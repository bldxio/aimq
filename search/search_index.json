{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AIMQ Documentation","text":"<p>AIMQ (AI Message Queue) is a robust message queue processor designed for Supabase's pgmq integration. It provides a powerful framework for processing queued tasks with built-in support for AI-powered document processing and OCR capabilities.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Supabase pgmq Integration: Seamlessly process messages from Supabase's PostgreSQL message queue</li> <li>Document OCR Processing: Extract text from images using EasyOCR</li> <li>Queue-based Processing: Efficient handling of document processing tasks</li> <li>AI-powered Analysis: Leverage LangChain for advanced text analysis</li> <li>Flexible Architecture: Easy to extend with new processing tools and capabilities</li> <li>Zero Installation Option: Run with <code>uvx</code> without installing anything</li> <li>Git URL Support: Load task definitions from git repositories for GitOps workflows</li> <li>Docker Ready: Pre-built images for easy deployment</li> </ul>"},{"location":"#quick-start-zero-installation","title":"Quick Start (Zero Installation)","text":"<p>The fastest way to get started with AIMQ requires no installation:</p> <pre><code># Initialize a new AIMQ project\nuvx aimq init my-project\ncd my-project\n\n# Configure your .env file with Supabase credentials\ncp .env.example .env\n# Edit .env with your SUPABASE_URL and SUPABASE_KEY\n\n# Edit tasks.py to define your task queues\n# (A template is already created for you)\n\n# Start the worker\nuvx aimq start\n</code></pre> <p>That's it! No <code>pip install</code>, no virtual environments, no dependency conflicts.</p>"},{"location":"#example-task-definition","title":"Example Task Definition","text":"<pre><code>from aimq import Worker\nfrom typing import Dict, Any\n\n# Create a worker instance\nworker = Worker()\n\n@worker.task(queue=\"document-processing\", timeout=300)\ndef process_document(data: Dict[str, Any]) -&gt; Dict[str, Any]:\n    \"\"\"Process a document using AI tools.\"\"\"\n    document_url = data.get(\"document_url\")\n\n    # Your processing logic here...\n    # Use built-in AIMQ tools for OCR, PDF extraction, etc.\n\n    return {\"status\": \"processed\", \"text\": extracted_text}\n\n# The worker can be started with: aimq start\n</code></pre>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Installation</li> <li>Quick Start Guide</li> <li>API Reference</li> <li>Contributing Guide</li> </ul>"},{"location":"#project-status","title":"Project Status","text":"<p>AIMQ is currently in beta. While it is being used in production environments, the API may still undergo changes as we gather feedback from users.</p>"},{"location":"#license","title":"License","text":"<p>AIMQ is released under the MIT License. See the LICENSE file for more details.</p>"},{"location":"api/overview/","title":"API Reference","text":"<p>This section provides detailed documentation for AIMQ's API.</p>"},{"location":"api/overview/#core-components","title":"Core Components","text":""},{"location":"api/overview/#worker","title":"Worker","text":"<p>The <code>Worker</code> class is the main entry point for AIMQ. It manages queues and processes jobs:</p> <pre><code>from aimq import Worker\n\nworker = Worker()\n\n@worker.task(queue=\"my_queue\")\ndef process_data(data):\n    # Process data here\n    return {\"status\": \"processed\"}\n</code></pre>"},{"location":"api/overview/#queue","title":"Queue","text":"<p>The <code>Queue</code> class handles message queue operations:</p> <pre><code>from aimq import Queue\n\nqueue = Queue(\"my_queue\")\nqueue.send({\"data\": \"to process\"})\n</code></pre>"},{"location":"api/overview/#job","title":"Job","text":"<p>The <code>Job</code> class represents a unit of work:</p> <pre><code>from aimq import Job\n\n# Jobs are usually created from queue messages\njob = Job.from_response(response_data)\nprint(f\"Processing job {job.id}\")\n</code></pre>"},{"location":"api/overview/#tools","title":"Tools","text":"<p>AIMQ provides several built-in tools for document processing:</p>"},{"location":"api/overview/#ocr-tools","title":"OCR Tools","text":"<ul> <li>Image OCR: Extract text from images</li> <li>PDF Processor: Process PDF documents</li> </ul>"},{"location":"api/overview/#storage-tools","title":"Storage Tools","text":""},{"location":"api/overview/#supabase-storage","title":"Supabase Storage","text":"<ul> <li>Read and write files to Supabase Storage</li> <li>Manage file metadata and access control</li> </ul>"},{"location":"api/overview/#supabase-database","title":"Supabase Database","text":"<ul> <li>Read and write records to Supabase Database</li> <li>Manage database records and relationships</li> </ul>"},{"location":"api/overview/#error-handling","title":"Error Handling","text":"<p>AIMQ provides several exception classes for error handling:</p> <p>```python from aimq.exceptions import QueueError, ProcessingError</p> <p>try:     result = queue.work() except QueueError as e:     print(f\"Queue error: {e}\") except ProcessingError as e:     print(f\"Processing error: {e}\")</p>"},{"location":"api/tools/","title":"Tools API Reference","text":"<p>AIMQ provides a set of built-in tools for document processing and storage operations.</p>"},{"location":"api/tools/#ocr-tools","title":"OCR Tools","text":"<p>AIMQ includes OCR (Optical Character Recognition) capabilities for extracting text from images.</p>"},{"location":"api/tools/#imageocr","title":"ImageOCR","text":"<p>LangChain tool for performing OCR on images. Supports multiple languages and debug visualization.</p> <p>Full Reference: ImageOCR API</p>"},{"location":"api/tools/#ocrprocessor","title":"OCRProcessor","text":"<p>Low-level processor for direct image processing with EasyOCR. Provides detailed text detection results with bounding boxes and confidence scores.</p> <p>Full Reference: OCRProcessor API</p>"},{"location":"api/tools/#pdf-tools","title":"PDF Tools","text":""},{"location":"api/tools/#pagesplitter","title":"PageSplitter","text":"<p>Tool for splitting PDF documents into individual pages for parallel processing.</p> <p>Full Reference: PageSplitter API</p>"},{"location":"api/tools/#storage-tools","title":"Storage Tools","text":"<p>AIMQ includes tools for interacting with Supabase storage and database.</p>"},{"location":"api/tools/#supabase-storage","title":"Supabase Storage","text":"<ul> <li>ReadFile - Read files from Supabase storage buckets</li> <li>WriteFile - Write files to Supabase storage buckets</li> </ul>"},{"location":"api/tools/#supabase-database","title":"Supabase Database","text":"<ul> <li>ReadRecord - Query records from Supabase database tables</li> <li>WriteRecord - Insert or update records in Supabase database tables</li> </ul>"},{"location":"api/tools/#queue-operations","title":"Queue Operations","text":"<ul> <li>Enqueue - Send messages to pgmq queues</li> </ul>"},{"location":"api/tools/#see-also","title":"See Also","text":"<p>For complete auto-generated API documentation, see the Reference section.</p>"},{"location":"deployment/docker-kubernetes/","title":"Docker &amp; Kubernetes Deployment","text":"<p>This guide covers deploying AIMQ workers using Docker and Kubernetes for production environments.</p>"},{"location":"deployment/docker-kubernetes/#overview","title":"Overview","text":"<p>AIMQ provides two Docker deployment approaches:</p> <ol> <li>Local Development: Generate project-specific Docker files with <code>aimq init --docker</code></li> <li>Production: Use the published AIMQ image with volume mounts or git URLs</li> </ol>"},{"location":"deployment/docker-kubernetes/#local-development-setup","title":"Local Development Setup","text":""},{"location":"deployment/docker-kubernetes/#generate-docker-files","title":"Generate Docker Files","text":"<pre><code># Initialize with Docker files\naimq init --docker\n\n# This creates:\n# - Dockerfile (optimized for your project)\n# - docker-compose.yml (with volume mounts)\n# - .dockerignore\n</code></pre>"},{"location":"deployment/docker-kubernetes/#start-with-docker-compose","title":"Start with Docker Compose","text":"<pre><code># Start the worker\ndocker-compose up -d\n\n# View logs\ndocker-compose logs -f\n\n# Stop\ndocker-compose down\n</code></pre> <p>The generated <code>docker-compose.yml</code> mounts your local <code>tasks.py</code> and <code>.env</code> files, allowing for rapid development iteration.</p>"},{"location":"deployment/docker-kubernetes/#production-deployment","title":"Production Deployment","text":""},{"location":"deployment/docker-kubernetes/#using-the-published-image","title":"Using the Published Image","text":"<p>AIMQ publishes Docker images that can be used with two patterns:</p>"},{"location":"deployment/docker-kubernetes/#pattern-1-volume-mount-simple","title":"Pattern 1: Volume Mount (Simple)","text":"<p>Mount your local <code>tasks.py</code> and <code>.env</code> files:</p> <pre><code>docker run --rm \\\n  -v $(pwd)/tasks.py:/app/tasks.py:ro \\\n  -v $(pwd)/.env:/app/.env:ro \\\n  aimq:latest\n</code></pre>"},{"location":"deployment/docker-kubernetes/#pattern-2-git-repository-recommended-for-production","title":"Pattern 2: Git Repository (Recommended for Production)","text":"<p>Load tasks from a git repository using environment variables:</p> <pre><code># Default branch from GitHub\ndocker run --rm \\\n  -e AIMQ_TASKS=git:mycompany/aimq-tasks \\\n  -e SUPABASE_URL=https://xxx.supabase.co \\\n  -e SUPABASE_KEY=eyJ... \\\n  aimq:latest\n\n# Specific branch or tag\ndocker run --rm \\\n  -e AIMQ_TASKS=git:mycompany/aimq-tasks@production \\\n  -e SUPABASE_URL=https://xxx.supabase.co \\\n  -e SUPABASE_KEY=eyJ... \\\n  aimq:latest\n\n# Monorepo subdirectory\ndocker run --rm \\\n  -e AIMQ_TASKS=git:mycompany/monorepo#services/worker \\\n  -e SUPABASE_URL=https://xxx.supabase.co \\\n  -e SUPABASE_KEY=eyJ... \\\n  aimq:latest\n</code></pre>"},{"location":"deployment/docker-kubernetes/#git-url-patterns","title":"Git URL Patterns","text":"<p>AIMQ supports npm-style git URLs:</p> <ul> <li><code>git:user/repo</code> - Default branch from GitHub</li> <li><code>git:user/repo@branch</code> - Specific branch or tag</li> <li><code>git:user/repo#path/to/tasks</code> - Subdirectory in monorepo</li> <li><code>git:gitlab.com/user/repo@v1.0.0</code> - Full URL with version tag</li> </ul>"},{"location":"deployment/docker-kubernetes/#git-authentication","title":"Git Authentication","text":"<p>For private repositories:</p>"},{"location":"deployment/docker-kubernetes/#https-with-token-quick-setup","title":"HTTPS with Token (Quick Setup)","text":"<pre><code>docker run --rm \\\n  -e AIMQ_TASKS=git:mycompany/private-repo@main \\\n  -e GIT_USERNAME=myuser \\\n  -e GIT_PASSWORD=ghp_your_github_token \\\n  aimq:latest\n</code></pre>"},{"location":"deployment/docker-kubernetes/#ssh-recommended-for-production","title":"SSH (Recommended for Production)","text":"<pre><code>docker run --rm \\\n  -v ~/.ssh:/home/aimq/.ssh:ro \\\n  -e AIMQ_TASKS=git:mycompany/private-repo@main \\\n  -e AIMQ_USE_SSH=true \\\n  aimq:latest\n</code></pre>"},{"location":"deployment/docker-kubernetes/#docker-compose-examples","title":"Docker Compose Examples","text":""},{"location":"deployment/docker-kubernetes/#production-with-git-repository","title":"Production with Git Repository","text":"<pre><code>version: '3.8'\n\nservices:\n  aimq-worker:\n    image: aimq:latest\n    environment:\n      - AIMQ_TASKS=git:mycompany/aimq-tasks@production\n      - SUPABASE_URL=${SUPABASE_URL}\n      - SUPABASE_KEY=${SUPABASE_KEY}\n      - WORKER_NAME=aimq-worker\n      - WORKER_LOG_LEVEL=info\n      - OPENAI_API_KEY=${OPENAI_API_KEY}\n    restart: unless-stopped\n    # For private repos with SSH:\n    # volumes:\n    #   - ~/.ssh:/home/aimq/.ssh:ro\n</code></pre>"},{"location":"deployment/docker-kubernetes/#local-development-with-volume-mounts","title":"Local Development with Volume Mounts","text":"<pre><code>version: '3.8'\n\nservices:\n  aimq-worker:\n    image: aimq:latest\n    volumes:\n      - ./tasks.py:/app/tasks.py:ro\n      - ./.env:/app/.env:ro\n    restart: unless-stopped\n</code></pre>"},{"location":"deployment/docker-kubernetes/#kubernetes-deployment","title":"Kubernetes Deployment","text":""},{"location":"deployment/docker-kubernetes/#basic-deployment-with-git-url","title":"Basic Deployment with Git URL","text":"<p>Minimal production-ready Kubernetes deployment using git URLs:</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: aimq-worker\n  namespace: default\nspec:\n  replicas: 3  # Scale based on workload\n  selector:\n    matchLabels:\n      app: aimq-worker\n  template:\n    metadata:\n      labels:\n        app: aimq-worker\n    spec:\n      containers:\n        - name: aimq-worker\n          image: aimq:latest\n          imagePullPolicy: Always\n          env:\n            # Load tasks from git repository\n            - name: AIMQ_TASKS\n              value: \"git:mycompany/aimq-tasks@production\"\n\n            # Supabase configuration\n            - name: SUPABASE_URL\n              valueFrom:\n                secretKeyRef:\n                  name: aimq-secrets\n                  key: supabase-url\n            - name: SUPABASE_KEY\n              valueFrom:\n                secretKeyRef:\n                  name: aimq-secrets\n                  key: supabase-key\n\n            # Worker configuration\n            - name: WORKER_NAME\n              valueFrom:\n                fieldRef:\n                  fieldPath: metadata.name\n            - name: WORKER_LOG_LEVEL\n              value: \"info\"\n\n            # AI Provider Keys (optional)\n            - name: OPENAI_API_KEY\n              valueFrom:\n                secretKeyRef:\n                  name: aimq-secrets\n                  key: openai-api-key\n                  optional: true\n\n          resources:\n            requests:\n              cpu: \"500m\"\n              memory: \"1Gi\"\n            limits:\n              cpu: \"2\"\n              memory: \"4Gi\"\n\n          # Graceful shutdown\n          lifecycle:\n            preStop:\n              exec:\n                command: [\"/bin/sh\", \"-c\", \"sleep 15\"]\n\n      restartPolicy: Always\n</code></pre>"},{"location":"deployment/docker-kubernetes/#create-kubernetes-secret","title":"Create Kubernetes Secret","text":"<pre><code>kubectl create secret generic aimq-secrets \\\n  --from-literal=supabase-url='https://xxx.supabase.co' \\\n  --from-literal=supabase-key='your-service-key' \\\n  --from-literal=openai-api-key='sk-...'\n</code></pre>"},{"location":"deployment/docker-kubernetes/#for-private-git-repositories","title":"For Private Git Repositories","text":"<p>If using private git repositories with SSH:</p> <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: git-ssh-key\ntype: Opaque\ndata:\n  ssh-privatekey: &lt;base64-encoded-ssh-key&gt;\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: aimq-worker\nspec:\n  # ... (same as above)\n  template:\n    spec:\n      containers:\n        - name: aimq-worker\n          # ... (same as above)\n          env:\n            - name: AIMQ_TASKS\n              value: \"git:mycompany/private-repo@main\"\n            - name: AIMQ_USE_SSH\n              value: \"true\"\n          volumeMounts:\n            - name: ssh-key\n              mountPath: /home/aimq/.ssh\n              readOnly: true\n      volumes:\n        - name: ssh-key\n          secret:\n            secretName: git-ssh-key\n            defaultMode: 0400\n</code></pre>"},{"location":"deployment/docker-kubernetes/#environment-variables-reference","title":"Environment Variables Reference","text":"Variable Description Required Default <code>AIMQ_TASKS</code> Path or git URL to tasks.py No <code>./tasks.py</code> <code>AIMQ_USE_SSH</code> Use SSH for git operations No <code>false</code> <code>SUPABASE_URL</code> Supabase project URL Yes - <code>SUPABASE_KEY</code> Supabase API key Yes - <code>WORKER_NAME</code> Worker instance name No <code>peon</code> <code>WORKER_LOG_LEVEL</code> Logging level No <code>info</code> <code>WORKER_IDLE_WAIT</code> Seconds to wait when idle No <code>10.0</code> <code>OPENAI_API_KEY</code> OpenAI API key (optional) No - <code>MISTRAL_API_KEY</code> Mistral API key (optional) No - <code>LANGCHAIN_TRACING_V2</code> Enable LangChain tracing No <code>false</code> <code>LANGCHAIN_API_KEY</code> LangChain API key No -"},{"location":"deployment/docker-kubernetes/#production-best-practices","title":"Production Best Practices","text":""},{"location":"deployment/docker-kubernetes/#scaling","title":"Scaling","text":"<p>Run multiple worker instances for parallel processing:</p> <pre><code># Scale deployment\nkubectl scale deployment aimq-worker --replicas=5\n\n# Or use HorizontalPodAutoscaler\nkubectl autoscale deployment aimq-worker \\\n  --min=2 --max=10 --cpu-percent=70\n</code></pre>"},{"location":"deployment/docker-kubernetes/#gitops-workflow","title":"GitOps Workflow","text":"<ol> <li>Store tasks in version-controlled git repositories</li> <li>Use git tags/branches for versioning (e.g., <code>@v1.0.0</code>, <code>@production</code>)</li> <li>Update deployment by changing the git reference</li> <li>Workers automatically pull latest code on restart</li> </ol>"},{"location":"deployment/docker-kubernetes/#monitoring","title":"Monitoring","text":"<p>Add health checks using file-based probes (no additional dependencies required):</p> <pre><code># In container spec\nlivenessProbe:\n  exec:\n    command:\n      - python3\n      - -c\n      - |\n        import os, time\n        probe_file = '/tmp/aimq-health'\n        if not os.path.exists(probe_file):\n            exit(1)\n        age = time.time() - os.path.getmtime(probe_file)\n        exit(0 if age &lt; 60 else 1)  # Fail if file not updated in 60s\n  initialDelaySeconds: 30\n  periodSeconds: 10\n  timeoutSeconds: 5\n  failureThreshold: 3\n\nreadinessProbe:\n  exec:\n    command:\n      - python3\n      - -c\n      - |\n        import os\n        exit(0 if os.path.exists('/tmp/aimq-health') else 1)\n  initialDelaySeconds: 5\n  periodSeconds: 5\n  timeoutSeconds: 3\n  failureThreshold: 2\n</code></pre> <p>Important: Your application must manage the health probe file. Add this to your worker code:</p> <pre><code># In your tasks.py or worker setup\nimport threading\nimport time\nfrom pathlib import Path\n\ndef health_check_writer():\n    \"\"\"Update health check file periodically.\"\"\"\n    probe_file = Path(\"/tmp/aimq-health\")\n    while True:\n        probe_file.touch()\n        time.sleep(10)  # Update every 10 seconds\n\n# Start health check thread\nhealth_thread = threading.Thread(target=health_check_writer, daemon=True)\nhealth_thread.start()\n</code></pre> <p>Alternative: Install procps for pgrep-based probes</p> <p>If you prefer process-based checks, add to your Dockerfile:</p> <pre><code>FROM python:3.12-slim\nRUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends procps &amp;&amp; rm -rf /var/lib/apt/lists/*\n# ... rest of Dockerfile\n</code></pre> <p>Then use:</p> <pre><code>livenessProbe:\n  exec:\n    command: [\"pgrep\", \"-f\", \"aimq\"]\n  initialDelaySeconds: 30\n  periodSeconds: 10\n</code></pre> <p>Note: The file-based probe is recommended as it's lightweight, doesn't require additional packages, and provides more granular health status.</p>"},{"location":"deployment/docker-kubernetes/#resource-limits","title":"Resource Limits","text":"<p>Set appropriate limits based on AI model requirements:</p> <ul> <li>Light tasks (text processing): 500m CPU, 1Gi memory</li> <li>OCR processing: 1 CPU, 2Gi memory</li> <li>Heavy AI models: 2+ CPU, 4Gi+ memory</li> </ul>"},{"location":"deployment/docker-kubernetes/#security","title":"Security","text":"<ol> <li>Use Secrets: Never hardcode credentials in manifests</li> <li>SSH Keys: Use volume mounts for private git repos</li> <li>Read-only mounts: Mount tasks.py and SSH keys as read-only</li> <li>Network Policies: Restrict traffic to Supabase only</li> <li>Service Accounts: Use Kubernetes service accounts for cloud provider auth</li> </ol>"},{"location":"deployment/docker-kubernetes/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/docker-kubernetes/#git-clone-fails","title":"Git Clone Fails","text":"<pre><code># Check git URL format\necho $AIMQ_TASKS\n# Should be: git:user/repo[@branch][#subdir]\n\n# Enable debug logging\nkubectl set env deployment/aimq-worker WORKER_LOG_LEVEL=debug\n\n# View logs\nkubectl logs -f deployment/aimq-worker\n</code></pre>"},{"location":"deployment/docker-kubernetes/#tasks-not-found","title":"Tasks Not Found","text":"<pre><code># For volume mounts, ensure path is correct\nkubectl exec -it deployment/aimq-worker -- ls -la /app/tasks.py\n\n# For git URLs, check subdirectory path\n# git:user/repo#correct/path/to/tasks.py\n</code></pre>"},{"location":"deployment/docker-kubernetes/#supabase-connection-errors","title":"Supabase Connection Errors","text":"<pre><code># Verify environment variables\nkubectl exec -it deployment/aimq-worker -- env | grep SUPABASE\n\n# Test connectivity\nkubectl exec -it deployment/aimq-worker -- curl $SUPABASE_URL\n</code></pre>"},{"location":"deployment/docker-kubernetes/#next-steps","title":"Next Steps","text":"<ul> <li>Review the Configuration Guide for all options</li> <li>See the Quick Start Guide for local testing</li> </ul>"},{"location":"development/codecov-setup/","title":"Codecov Integration Setup","text":"<p>AIMQ uses Codecov to track test coverage and display coverage reports on pull requests. This guide will help you set up Codecov for your AIMQ repository.</p>"},{"location":"development/codecov-setup/#what-is-codecov","title":"What is Codecov?","text":"<p>Codecov is a code coverage reporting tool that: - Visualizes test coverage in pull requests - Tracks coverage trends over time - Shows which lines are covered/uncovered by tests - Provides coverage badges for README.md - Free for open source projects</p>"},{"location":"development/codecov-setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>GitHub repository with AIMQ project</li> <li>Admin access to the repository</li> <li>Codecov account (free for public repositories)</li> </ul>"},{"location":"development/codecov-setup/#setup-steps","title":"Setup Steps","text":""},{"location":"development/codecov-setup/#1-sign-up-for-codecov","title":"1. Sign Up for Codecov","text":"<ol> <li>Visit https://codecov.io</li> <li>Click \"Sign up with GitHub\"</li> <li>Authorize Codecov to access your GitHub account</li> </ol>"},{"location":"development/codecov-setup/#2-add-your-repository","title":"2. Add Your Repository","text":"<ol> <li>In Codecov dashboard, click \"Add new repository\"</li> <li>Find <code>bldxio/aimq</code> in the list</li> <li>Click \"Setup repo\"</li> <li>Codecov will provide an upload token</li> </ol>"},{"location":"development/codecov-setup/#3-add-codecov-token-to-github","title":"3. Add Codecov Token to GitHub","text":"<ol> <li>Go to your GitHub repository: <code>https://github.com/bldxio/aimq</code></li> <li>Navigate to Settings \u2192 Secrets and variables \u2192 Actions</li> <li>Click New repository secret</li> <li>Add the following secret:</li> <li>Name: <code>CODECOV_TOKEN</code></li> <li>Value: The token from Codecov dashboard</li> <li>Click Add secret</li> </ol>"},{"location":"development/codecov-setup/#4-verify-integration","title":"4. Verify Integration","text":"<p>The CI workflow (<code>.github/workflows/ci.yml</code>) is already configured to upload coverage reports to Codecov. Once the token is added:</p> <ol> <li>Push a commit or create a PR</li> <li>Wait for CI to complete</li> <li>Check the Codecov dashboard for coverage report</li> <li>PR comments will show coverage changes</li> </ol>"},{"location":"development/codecov-setup/#understanding-coverage-reports","title":"Understanding Coverage Reports","text":""},{"location":"development/codecov-setup/#in-pull-requests","title":"In Pull Requests","text":"<p>Codecov will comment on PRs with: - Coverage changes: How much coverage increased/decreased - File-level changes: Which files have coverage changes - Patch coverage: Coverage of lines changed in the PR</p> <p>Example comment: <pre><code>Coverage: 89.2% (+0.5%) vs base\nFiles changed: 3\nPatch coverage: 95.2%\n</code></pre></p>"},{"location":"development/codecov-setup/#in-codecov-dashboard","title":"In Codecov Dashboard","text":"<p>The dashboard shows: - Overall coverage: Project-wide test coverage percentage - Coverage sunburst: Visual breakdown by file/directory - Coverage trend: Historical coverage over time - Uncovered lines: Specific lines that need tests</p>"},{"location":"development/codecov-setup/#adding-coverage-badge-to-readme","title":"Adding Coverage Badge to README","text":"<p>After setup, add the Codecov badge to your README.md:</p> <pre><code>[![codecov](https://codecov.io/gh/bldxio/aimq/branch/main/graph/badge.svg)](https://codecov.io/gh/bldxio/aimq)\n</code></pre> <p>This will display: </p>"},{"location":"development/codecov-setup/#current-coverage-status","title":"Current Coverage Status","text":"<p>AIMQ currently has 89%+ test coverage. Our goal is to maintain coverage above 85%.</p>"},{"location":"development/codecov-setup/#coverage-configuration","title":"Coverage Configuration","text":"<p>Coverage is configured in <code>pyproject.toml</code>:</p> <pre><code>[tool.coverage.run]\nbranch = true\nsource = [\"aimq\"]\nomit = [\"src/aimq/commands/shared/templates/*\"]\n\n[tool.coverage.report]\nexclude_lines = [\n    \"pragma: no cover\",\n    \"def __repr__\",\n    \"if self.debug:\",\n    \"raise NotImplementedError\",\n    \"if __name__ == .__main__.:\",\n    \"pass\",\n    \"raise ImportError\",\n]\nshow_missing = true\nskip_empty = true\n</code></pre>"},{"location":"development/codecov-setup/#ci-workflow-integration","title":"CI Workflow Integration","text":"<p>The CI workflow uploads coverage only for Python 3.11 to avoid duplicate reports:</p> <pre><code>- name: Upload coverage to Codecov\n  uses: codecov/codecov-action@v4\n  if: matrix.python-version == '3.11'\n  with:\n    file: ./coverage.xml\n    fail_ci_if_error: false\n  env:\n    CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}\n</code></pre>"},{"location":"development/codecov-setup/#running-coverage-locally","title":"Running Coverage Locally","text":"<p>To generate coverage reports locally:</p> <pre><code># Run tests with coverage\njust test-cov\n\n# Or manually:\nuv run pytest --cov=src/aimq --cov-report=term-missing --cov-report=html\n\n# Open HTML report in browser\nopen htmlcov/index.html\n</code></pre>"},{"location":"development/codecov-setup/#coverage-guidelines","title":"Coverage Guidelines","text":""},{"location":"development/codecov-setup/#what-to-test","title":"What to Test","text":"<ul> <li>\u2705 Core business logic (Worker, Queue, Job)</li> <li>\u2705 Public APIs and functions</li> <li>\u2705 Error handling paths</li> <li>\u2705 Edge cases and boundary conditions</li> <li>\u2705 Data transformations and validations</li> </ul>"},{"location":"development/codecov-setup/#what-can-be-excluded","title":"What Can Be Excluded","text":"<ul> <li>\u274c Third-party library code</li> <li>\u274c Generated code (templates)</li> <li>\u274c Debug/development code</li> <li>\u274c Simple getters/setters</li> <li>\u274c Type stubs and protocols</li> </ul> <p>Use <code># pragma: no cover</code> to exclude specific lines:</p> <pre><code>def debug_function():  # pragma: no cover\n    \"\"\"Only used during development.\"\"\"\n    print(\"Debug info\")\n</code></pre>"},{"location":"development/codecov-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"development/codecov-setup/#coverage-not-uploading","title":"Coverage Not Uploading","text":"<ol> <li>Check CI logs for upload errors</li> <li>Verify <code>CODECOV_TOKEN</code> is set in GitHub secrets</li> <li>Check Codecov status page: https://status.codecov.io</li> </ol>"},{"location":"development/codecov-setup/#coverage-decreased-unexpectedly","title":"Coverage Decreased Unexpectedly","text":"<ol> <li>Check Codecov PR comment for details</li> <li>Review which lines are uncovered</li> <li>Add tests for new code paths</li> <li>Check if tests are failing silently</li> </ol>"},{"location":"development/codecov-setup/#coverage-too-low","title":"Coverage Too Low","text":"<ol> <li>Run <code>just test-cov</code> locally to see missing coverage</li> <li>Identify critical paths without tests</li> <li>Write tests for high-value code first</li> <li>Gradually increase coverage over time</li> </ol>"},{"location":"development/codecov-setup/#best-practices","title":"Best Practices","text":"<ol> <li>Write tests before merging - Ensure new code has adequate coverage</li> <li>Review coverage reports - Check Codecov comments on PRs</li> <li>Don't game the system - 100% coverage doesn't mean quality tests</li> <li>Focus on critical paths - Prioritize testing important functionality</li> <li>Keep coverage above 85% - Our project standard</li> </ol>"},{"location":"development/codecov-setup/#resources","title":"Resources","text":"<ul> <li>Codecov Documentation</li> <li>Understanding Coverage Reports</li> <li>Python Coverage.py Guide</li> <li>Testing Best Practices</li> </ul>"},{"location":"development/codecov-setup/#support","title":"Support","text":"<p>If you encounter issues with Codecov integration: 1. Check the Codecov Community Forum 2. Review CI logs for error messages 3. Contact the team via GitHub issues</p> <p>Note: The CI workflow is already configured for Codecov. You only need to add the <code>CODECOV_TOKEN</code> secret to enable reporting.</p>"},{"location":"development/contributing/","title":"Contributing to AIMQ","text":"<p>We love your input! We want to make contributing to AIMQ as easy and transparent as possible, whether it's:</p> <ul> <li>Reporting a bug</li> <li>Discussing the current state of the code</li> <li>Submitting a fix</li> <li>Proposing new features</li> <li>Becoming a maintainer</li> </ul>"},{"location":"development/contributing/#development-process","title":"Development Process","text":"<p>We use GitHub to host code, to track issues and feature requests, as well as accept pull requests.</p> <ol> <li>Fork the repo and create your branch from <code>main</code></li> <li>If you've added code that should be tested, add tests</li> <li>If you've changed APIs, update the documentation</li> <li>Ensure the test suite passes</li> <li>Make sure your code follows our coding conventions</li> <li>Issue that pull request!</li> </ol>"},{"location":"development/contributing/#local-development-setup","title":"Local Development Setup","text":"<ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/yourusername/aimq.git\ncd aimq\n</code></pre></p> </li> <li> <p>Install dependencies:    <pre><code>poetry install\n</code></pre></p> </li> <li> <p>Set up pre-commit hooks:    <pre><code>poetry run pre-commit install\n</code></pre></p> </li> </ol>"},{"location":"development/contributing/#running-tests","title":"Running Tests","text":"<p>We use pytest for our test suite:</p> <pre><code>poetry run pytest\n</code></pre> <p>For coverage report:</p> <pre><code>poetry run pytest --cov=src\n</code></pre>"},{"location":"development/contributing/#code-style","title":"Code Style","text":"<p>We follow these coding conventions:</p> <ol> <li>Type Hints</li> <li>All function parameters and return values must have type hints</li> <li>Use <code>Optional</code> for parameters that can be None</li> <li> <p>Use <code>Union</code> for parameters that can be multiple types</p> </li> <li> <p>Docstrings</p> </li> <li>All public functions, classes, and modules must have docstrings</li> <li>Use Google style docstrings</li> <li> <p>Include Args, Returns, and Raises sections</p> </li> <li> <p>Naming Conventions</p> </li> <li>Classes: PascalCase</li> <li>Functions/Methods: snake_case</li> <li>Variables: snake_case</li> <li>Constants: SCREAMING_SNAKE_CASE</li> </ol>"},{"location":"development/contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Update the README.md with details of changes to the interface</li> <li>Update the documentation with any new features or changes</li> <li>The PR will be merged once you have the sign-off of at least one maintainer</li> </ol>"},{"location":"development/contributing/#license","title":"License","text":"<p>By contributing, you agree that your contributions will be licensed under its MIT License.</p>"},{"location":"development/conventional-commits/","title":"Conventional Commits Guide","text":"<p>AIMQ uses Conventional Commits for automatic CHANGELOG generation. This guide explains how to write commits that will be properly categorized in release notes.</p>"},{"location":"development/conventional-commits/#why-conventional-commits","title":"Why Conventional Commits?","text":"<ul> <li>Automated CHANGELOG: Commit messages automatically generate CHANGELOG.md entries</li> <li>Clear History: Understand what changed at a glance</li> <li>Semantic Versioning: Easily determine version bumps</li> <li>Better Collaboration: Consistent format across the team</li> </ul>"},{"location":"development/conventional-commits/#commit-message-format","title":"Commit Message Format","text":"<pre><code>&lt;type&gt;(&lt;scope&gt;): &lt;description&gt;\n\n[optional body]\n\n[optional footer(s)]\n</code></pre>"},{"location":"development/conventional-commits/#type","title":"Type","text":"<p>The type determines which CHANGELOG section your commit appears in:</p> Type CHANGELOG Section Description Example <code>feat</code> Added New features <code>feat: add user authentication</code> <code>fix</code> Fixed Bug fixes <code>fix: resolve database connection timeout</code> <code>docs</code> Changed Documentation changes <code>docs: update API documentation</code> <code>refactor</code> Changed Code refactoring <code>refactor: simplify worker thread logic</code> <code>perf</code> Changed Performance improvements <code>perf: optimize queue polling</code> <code>style</code> Changed Code style changes <code>style: format with black</code> <code>test</code> (skipped) Test changes <code>test: add queue integration tests</code> <code>chore</code> (skipped) Maintenance tasks <code>chore: update dependencies</code> <code>ci</code> (skipped) CI/CD changes <code>ci: add Python 3.13 to test matrix</code> <code>build</code> (skipped) Build system changes <code>build: update uv lock file</code> <code>security</code> Security Security improvements <code>security: update dependencies</code> <code>deprecate</code> Deprecated Feature deprecation <code>deprecate: old queue API</code> <code>remove</code> Removed Feature removal <code>remove: deprecated queue methods</code>"},{"location":"development/conventional-commits/#scope-optional","title":"Scope (Optional)","text":"<p>The scope provides additional context about what changed:</p> <pre><code>feat(ocr): add support for PDF documents\nfix(worker): prevent duplicate job processing\ndocs(api): add examples for queue operations\n</code></pre> <p>Common scopes in AIMQ: - <code>worker</code> - Worker-related changes - <code>queue</code> - Queue operations - <code>ocr</code> - OCR processing - <code>api</code> - API changes - <code>cli</code> - Command-line interface - <code>docs</code> - Documentation - <code>tests</code> - Testing infrastructure</p>"},{"location":"development/conventional-commits/#description","title":"Description","text":"<ul> <li>Use imperative mood: \"add\" not \"added\" or \"adds\"</li> <li>Don't capitalize first letter</li> <li>No period at the end</li> <li>Keep under 72 characters</li> </ul> <p>Good: <pre><code>feat: add batch processing for OCR jobs\nfix: prevent memory leak in worker threads\n</code></pre></p> <p>Bad: <pre><code>feat: Added batch processing for OCR jobs.\nfix: Fixes memory leak.\nFixed a bug in the worker\n</code></pre></p>"},{"location":"development/conventional-commits/#body-optional","title":"Body (Optional)","text":"<p>Provide additional context about the changes:</p> <pre><code>feat: add batch processing for OCR jobs\n\nImplements a new batch processor that groups multiple OCR\nrequests into a single operation, reducing API calls and\nimproving throughput by 3x.\n\nIncludes automatic retry logic and progress tracking.\n</code></pre>"},{"location":"development/conventional-commits/#footer-optional","title":"Footer (Optional)","text":"<p>Add metadata like breaking changes or issue references:</p> <pre><code>feat: redesign queue priority system\n\nBREAKING CHANGE: Queue priority now uses a 0-10 scale\ninstead of low/medium/high. Update all queue configurations.\n\nFixes #123\nCloses #456\n</code></pre>"},{"location":"development/conventional-commits/#breaking-changes","title":"Breaking Changes","text":"<p>Mark breaking changes in two ways:</p> <p>Option 1: Exclamation mark <pre><code>feat!: redesign queue API\n</code></pre></p> <p>Option 2: Footer <pre><code>feat: redesign queue API\n\nBREAKING CHANGE: Queue.add() now returns a Job object\ninstead of job ID string.\n</code></pre></p>"},{"location":"development/conventional-commits/#real-examples-from-aimq","title":"Real Examples from AIMQ","text":""},{"location":"development/conventional-commits/#features","title":"Features","text":"<pre><code>feat: add git URL support for Docker deployments\nfeat(worker): implement graceful shutdown\nfeat(ocr): support batch image processing\n</code></pre>"},{"location":"development/conventional-commits/#fixes","title":"Fixes","text":"<pre><code>fix: resolve race condition in worker startup\nfix(queue): prevent job duplication on retry\nfix(cli): handle missing config file gracefully\n</code></pre>"},{"location":"development/conventional-commits/#documentation","title":"Documentation","text":"<pre><code>docs: add Docker deployment guide\ndocs(api): update Queue class docstrings\ndocs: fix typos in README\n</code></pre>"},{"location":"development/conventional-commits/#refactoring","title":"Refactoring","text":"<pre><code>refactor: extract queue provider interface\nrefactor(worker): simplify thread management\nrefactor: use pathlib instead of os.path\n</code></pre>"},{"location":"development/conventional-commits/#testing","title":"Testing","text":"<pre><code>test: add integration tests for worker\ntest(ocr): increase coverage to 95%\ntest: mock Supabase client in unit tests\n</code></pre>"},{"location":"development/conventional-commits/#chores","title":"Chores","text":"<pre><code>chore: update dependencies\nchore: bump version to 0.1.1b2\nchore(ci): add caching to GitHub Actions\n</code></pre>"},{"location":"development/conventional-commits/#multi-line-commits","title":"Multi-line Commits","text":"<p>For complex changes, use multiple lines:</p> <pre><code>feat: implement retry logic with exponential backoff\n\n- Add RetryPolicy class with configurable delays\n- Implement exponential backoff with jitter\n- Add max retry limit configuration\n- Log retry attempts for debugging\n\nThis improves reliability when processing jobs that depend\non external services experiencing temporary outages.\n\nFixes #234\n</code></pre>"},{"location":"development/conventional-commits/#changelog-generation","title":"CHANGELOG Generation","text":"<p>The changelog script (<code>scripts/generate_changelog.py</code>) parses commits and generates entries:</p> <p>Input (git commits): <pre><code>feat: add user authentication\nfix: resolve database timeout\ndocs: update README\ntest: add auth tests\n</code></pre></p> <p>Output (CHANGELOG.md): <pre><code>### Added\n- add user authentication\n\n### Fixed\n- resolve database timeout\n\n### Changed\n- update README\n</code></pre></p> <p>Note: <code>test:</code> commits are automatically skipped.</p>"},{"location":"development/conventional-commits/#best-practices","title":"Best Practices","text":""},{"location":"development/conventional-commits/#do","title":"DO \u2705","text":"<ul> <li>Use present tense: \"add feature\" not \"added feature\"</li> <li>Be specific: \"fix worker timeout\" not \"fix bug\"</li> <li>Reference issues: Add \"Fixes #123\" in footer</li> <li>Explain why: Use body to explain motivation</li> <li>Group related changes: Make atomic commits</li> </ul>"},{"location":"development/conventional-commits/#dont","title":"DON'T \u274c","text":"<ul> <li>Don't combine types: Keep feat, fix, docs separate</li> <li>Don't be vague: \"update stuff\" tells us nothing</li> <li>Don't skip type: \"implement feature\" should be \"feat: implement feature\"</li> <li>Don't write novels: Keep description concise</li> <li>Don't commit WIP: Only commit working code</li> </ul>"},{"location":"development/conventional-commits/#generating-changelog","title":"Generating CHANGELOG","text":""},{"location":"development/conventional-commits/#automatic-generation","title":"Automatic Generation","text":"<p>Run during release: <pre><code># Preview what will be generated\njust changelog-preview\n\n# Generate and update CHANGELOG.md\njust changelog\n\n# Generate from specific version\njust changelog-since v0.1.0\n</code></pre></p>"},{"location":"development/conventional-commits/#manual-changelog","title":"Manual CHANGELOG","text":"<p>If you need to manually edit CHANGELOG.md: 1. Generate initial entries: <code>just changelog</code> 2. Review and edit the <code>[Unreleased]</code> section 3. Add any context the commit messages don't capture 4. Commit: <code>git add CHANGELOG.md &amp;&amp; git commit -m \"docs: update changelog\"</code></p>"},{"location":"development/conventional-commits/#integration-with-release-workflow","title":"Integration with Release Workflow","text":"<p>The release workflow automatically: 1. Detects last version tag 2. Parses all commits since that version 3. Categorizes commits by type 4. Generates CHANGELOG.md entries 5. Prompts for review before building</p> <p>For Beta Releases: <pre><code>just release-beta\n# Automatically generates CHANGELOG from commits\n# Prompts for review\n# Builds and prepares for TestPyPI\n</code></pre></p> <p>For Stable Releases: <pre><code>just release\n# Same automatic CHANGELOG generation\n# Builds and prepares for PyPI\n</code></pre></p>"},{"location":"development/conventional-commits/#commit-tools","title":"Commit Tools","text":""},{"location":"development/conventional-commits/#commitizen","title":"Commitizen","text":"<p>Install commitizen for interactive commit prompts:</p> <pre><code>npm install -g commitizen cz-conventional-changelog\n\n# Or with pipx\npipx install commitizen\n\n# Then use instead of git commit\ngit cz\n</code></pre>"},{"location":"development/conventional-commits/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>Add commitlint to validate commit messages:</p> <pre><code>npm install -g @commitlint/cli @commitlint/config-conventional\n\n# Add to .pre-commit-config.yaml\n- repo: https://github.com/alessandrojcm/commitlint-pre-commit-hook\n  rev: v9.5.0\n  hooks:\n    - id: commitlint\n      stages: [commit-msg]\n</code></pre>"},{"location":"development/conventional-commits/#troubleshooting","title":"Troubleshooting","text":""},{"location":"development/conventional-commits/#no-entries-generated","title":"No entries generated","text":"<p>Problem: <code>just changelog</code> says \"No meaningful changes found\"</p> <p>Solutions: 1. Check if you're using conventional commit format 2. Verify commits have <code>feat:</code>, <code>fix:</code>, etc. prefixes 3. Use <code>--debug</code> flag: <code>uv run python scripts/generate_changelog.py --debug</code></p>"},{"location":"development/conventional-commits/#wrong-category","title":"Wrong category","text":"<p>Problem: Commits appear in wrong CHANGELOG section</p> <p>Solution: Use correct type prefix: - Use <code>feat:</code> for new features (\u2192 Added) - Use <code>fix:</code> for bug fixes (\u2192 Fixed) - Use <code>docs:</code> for documentation (\u2192 Changed)</p>"},{"location":"development/conventional-commits/#commits-skipped","title":"Commits skipped","text":"<p>Problem: Some commits don't appear in CHANGELOG</p> <p>Reason: These types are automatically skipped: - <code>test:</code> - Test changes - <code>chore:</code> - Maintenance tasks - <code>ci:</code> - CI/CD changes - <code>build:</code> - Build system changes - Merge commits</p>"},{"location":"development/conventional-commits/#need-manual-entry","title":"Need manual entry","text":"<p>If automatic generation doesn't capture everything: 1. Generate initial: <code>just changelog</code> 2. Manually add entries to <code>[Unreleased]</code> section 3. Use clear, user-facing language 4. Follow existing format</p>"},{"location":"development/conventional-commits/#resources","title":"Resources","text":"<ul> <li>Conventional Commits Specification</li> <li>Semantic Versioning</li> <li>Keep a Changelog</li> <li>Commitizen</li> <li>Git Commit Best Practices</li> </ul>"},{"location":"development/conventional-commits/#examples-from-other-projects","title":"Examples from Other Projects","text":"<p>Angular: <pre><code>feat(compiler): add support for standalone components\nfix(router): prevent navigation to undefined routes\ndocs(forms): improve reactive forms guide\n</code></pre></p> <p>Kubernetes: <pre><code>feat: implement graceful pod shutdown\nfix: resolve kubelet memory leak\nperf: optimize pod scheduling algorithm\n</code></pre></p> <p>VS Code: <pre><code>feat: add multi-cursor editing\nfix: prevent extension host crash\ndocs: update debugging guide\n</code></pre></p> <p>Remember: Good commit messages are a gift to your future self and your team!</p>"},{"location":"development/release-process/","title":"Release Process","text":"<p>This document outlines the process for creating and publishing new releases of AIMQ.</p>"},{"location":"development/release-process/#version-numbering","title":"Version Numbering","text":"<p>We follow Semantic Versioning:</p> <ul> <li>MAJOR version for incompatible API changes</li> <li>MINOR version for new functionality in a backward compatible manner</li> <li>PATCH version for backward compatible bug fixes</li> </ul>"},{"location":"development/release-process/#release-checklist","title":"Release Checklist","text":"<ol> <li>Update Version</li> <li>Update version in <code>pyproject.toml</code></li> <li>Update CHANGELOG.md</li> <li> <p>Commit changes: <code>git commit -m \"Bump version to X.Y.Z\"</code></p> </li> <li> <p>Run Tests <pre><code>poetry run pytest\npoetry run pytest --cov=src\n</code></pre></p> </li> <li> <p>Build Documentation <pre><code>poetry run mkdocs build\n</code></pre></p> </li> <li> <p>Create Release Branch <pre><code>git checkout -b release/vX.Y.Z\ngit push origin release/vX.Y.Z\n</code></pre></p> </li> <li> <p>Create Pull Request</p> </li> <li>Title: \"Release vX.Y.Z\"</li> <li>Include changelog in description</li> <li> <p>Get required approvals</p> </li> <li> <p>Merge and Tag <pre><code>git checkout main\ngit pull origin main\ngit tag -a vX.Y.Z -m \"Release vX.Y.Z\"\ngit push origin vX.Y.Z\n</code></pre></p> </li> <li> <p>Build and Publish <pre><code>poetry build\npoetry publish\n</code></pre></p> </li> <li> <p>Deploy Documentation <pre><code>poetry run mkdocs gh-deploy\n</code></pre></p> </li> </ol>"},{"location":"development/release-process/#post-release","title":"Post-Release","text":"<ol> <li>Update version to next development version in <code>pyproject.toml</code></li> <li>Create new section in CHANGELOG.md for unreleased changes</li> <li>Announce release in appropriate channels</li> </ol>"},{"location":"development/release-process/#hotfix-process","title":"Hotfix Process","text":"<p>For critical bugs in production:</p> <ol> <li>Create hotfix branch from the release tag</li> <li>Fix the bug and update patch version</li> <li>Create PR back to both <code>main</code> and the release branch</li> <li>Follow steps 6-8 from the release checklist</li> </ol>"},{"location":"development/testing/","title":"Testing Guide","text":"<p>This guide covers the testing practices and requirements for AIMQ.</p>"},{"location":"development/testing/#test-structure","title":"Test Structure","text":"<p>Tests are organized to mirror the source code structure:</p> <pre><code>tests/\n\u251c\u2500\u2500 aimq/\n\u2502   \u251c\u2500\u2500 test_worker.py\n\u2502   \u251c\u2500\u2500 test_queue.py\n\u2502   \u251c\u2500\u2500 test_job.py\n\u2502   \u251c\u2500\u2500 clients/\n\u2502   \u2502   \u2514\u2500\u2500 test_supabase_client.py\n\u2502   \u2514\u2500\u2500 tools/\n\u2502       \u251c\u2500\u2500 ocr/\n\u2502       \u2502   \u2514\u2500\u2500 test_image_ocr.py\n\u2502       \u2514\u2500\u2500 pdf/\n\u2502           \u2514\u2500\u2500 test_pdf_processor.py\n\u2514\u2500\u2500 conftest.py\n</code></pre>"},{"location":"development/testing/#running-tests","title":"Running Tests","text":""},{"location":"development/testing/#using-just-recommended","title":"Using just (Recommended)","text":"<pre><code># Run all tests\njust test\n\n# Run with coverage report\njust test-cov\n\n# Run all quality checks (lint + type + test)\njust ci\n</code></pre>"},{"location":"development/testing/#using-uv-directly","title":"Using uv Directly","text":"<pre><code># Run all tests\nuv run pytest\n\n# Run with coverage\nuv run pytest --cov=src/aimq\n\n# Run specific test file\nuv run pytest tests/aimq/test_worker.py\n\n# Run tests matching a pattern\nuv run pytest -k \"test_process\"\n\n# Run with verbose output\nuv run pytest -v\n</code></pre>"},{"location":"development/testing/#using-pytest-directly","title":"Using pytest Directly","text":"<p>If you have AIMQ installed in your environment:</p> <pre><code># Run all tests\npytest\n\n# With coverage\npytest --cov=src/aimq\n</code></pre>"},{"location":"development/testing/#writing-tests","title":"Writing Tests","text":""},{"location":"development/testing/#test-requirements","title":"Test Requirements","text":"<ol> <li>Coverage Requirements</li> <li>Minimum 80% code coverage for new code</li> <li>Critical components require 90%+ coverage</li> <li> <p>Integration tests required for public APIs</p> </li> <li> <p>Test Types</p> </li> <li>Unit Tests: Test individual components in isolation</li> <li>Integration Tests: Test component interactions</li> <li>Functional Tests: Test complete features</li> <li>Async Tests: Use pytest-asyncio for async code</li> </ol>"},{"location":"development/testing/#test-structure_1","title":"Test Structure","text":"<p>Use pytest fixtures for test setup:</p> <pre><code>import pytest\nfrom aimq import Worker\n\n@pytest.fixture\ndef worker():\n    worker = Worker()\n    worker.register_queue(\"test_queue\")\n    return worker\n\ndef test_process_job(worker):\n    result = worker.process({\"data\": \"test\"})\n    assert result[\"status\"] == \"success\"\n</code></pre>"},{"location":"development/testing/#mocking","title":"Mocking","text":"<p>Use pytest's monkeypatch for mocking:</p> <pre><code>def test_supabase_client(monkeypatch):\n    mock_client = MockSupabaseClient()\n    monkeypatch.setattr(\"aimq.clients.supabase.client\", mock_client)\n    # Test code here\n</code></pre>"},{"location":"development/testing/#code-quality","title":"Code Quality","text":""},{"location":"development/testing/#linting-and-formatting","title":"Linting and Formatting","text":"<pre><code># Using just\njust lint           # Check code style with flake8\njust format         # Format code with black\njust type-check     # Type checking with mypy\n\n# Using uv directly\nuv run flake8 src/aimq tests\nuv run black src/aimq tests\nuv run mypy src/aimq tests\n</code></pre>"},{"location":"development/testing/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>Install pre-commit hooks to automatically check code before committing:</p> <pre><code># Install pre-commit hooks\njust pre-commit\n\n# Or manually\nuv run pre-commit install\n\n# Run hooks on all files\nuv run pre-commit run --all-files\n</code></pre> <p>The pre-commit hooks will: - Format code with black - Check code style with flake8 - Run type checking with mypy - Check for common issues</p>"},{"location":"development/testing/#cicd-pipeline","title":"CI/CD Pipeline","text":"<p>Our GitHub Actions pipeline runs tests on:</p> <ul> <li>Pull requests to main branch</li> <li>Push to main branch</li> <li>Release tags</li> </ul> <p>The pipeline:</p> <ol> <li>Sets up Python environment with uv</li> <li>Installs dependencies with <code>uv sync --group dev</code></li> <li>Runs code quality checks (lint, format, type-check)</li> <li>Runs all tests with coverage</li> <li>Generates and uploads coverage reports</li> <li>Builds documentation</li> </ol>"},{"location":"development/testing/#running-ci-checks-locally","title":"Running CI Checks Locally","text":"<p>Before pushing, run the same checks that CI will run:</p> <pre><code># Run all CI checks locally\njust ci\n\n# Or manually\nuv run flake8 src/aimq tests\nuv run mypy src/aimq tests\nuv run pytest --cov=src/aimq\n</code></pre>"},{"location":"development/testing/#test-coverage","title":"Test Coverage","text":"<p>AIMQ maintains high test coverage standards:</p> <ul> <li>Minimum: 80% overall coverage</li> <li>Critical components: 90%+ coverage</li> <li>New code: Must include tests</li> </ul> <p>View coverage report: <pre><code>just test-cov\n\n# Or\nuv run pytest --cov=src/aimq --cov-report=html\n# Open htmlcov/index.html in browser\n</code></pre></p>"},{"location":"development/testing/#continuous-testing","title":"Continuous Testing","text":"<p>For rapid feedback during development:</p> <pre><code># Watch mode (if installed)\njust test-watch\n\n# Or use pytest-watch\nuv run ptw\n</code></pre>"},{"location":"development/testing/#codecov-integration","title":"Codecov Integration","text":"<p>AIMQ uses Codecov for coverage tracking and reporting:</p>"},{"location":"development/testing/#features","title":"Features","text":"<ul> <li>PR Comments: Automatic coverage reports on pull requests</li> <li>Coverage Trends: Track coverage changes over time</li> <li>Visual Reports: See which lines are covered/uncovered</li> <li>Free for Open Source: No cost for public repositories</li> </ul>"},{"location":"development/testing/#setup","title":"Setup","text":"<ol> <li>Sign up at https://codecov.io with your GitHub account</li> <li>Add your repository to Codecov</li> <li>Add <code>CODECOV_TOKEN</code> secret to GitHub repository settings</li> <li>Coverage reports will automatically upload on CI runs</li> </ol> <p>See detailed setup instructions in codecov-setup.md.</p>"},{"location":"development/testing/#viewing-coverage","title":"Viewing Coverage","text":"<p>In Pull Requests: - Codecov comments on PRs with coverage changes - Shows patch coverage (coverage of changed lines) - Highlights uncovered lines</p> <p>In Codecov Dashboard: - Overall coverage percentage - File-by-file coverage breakdown - Coverage trends and graphs - Uncovered lines report</p>"},{"location":"development/testing/#local-coverage-reports","title":"Local Coverage Reports","text":"<p>Generate HTML coverage reports locally:</p> <pre><code># Generate HTML coverage report\nuv run pytest --cov=src/aimq --cov-report=html\n\n# Open in browser\nopen htmlcov/index.html\n</code></pre>"},{"location":"development/testing/#coverage-best-practices","title":"Coverage Best Practices","text":"<ol> <li>Write tests first - Test-driven development improves coverage</li> <li>Focus on critical paths - Prioritize high-value code</li> <li>Test edge cases - Boundary conditions, error cases</li> <li>Don't chase 100% - Quality &gt; quantity</li> <li>Review coverage reports - Use them to find gaps</li> </ol> <p>For more information, see codecov-setup.md.</p>"},{"location":"getting-started/configuration/","title":"Configuration","text":"<p>AIMQ can be configured through environment variables. Configuration is loaded from <code>.env</code> files or environment variables.</p>"},{"location":"getting-started/configuration/#supabase-setup","title":"Supabase Setup","text":"<p>AIMQ uses Supabase's pgmq (PostgreSQL Message Queue) extension for queue management.</p>"},{"location":"getting-started/configuration/#enable-pgmq-extension","title":"Enable pgmq Extension","text":"<ol> <li>Go to your Supabase project dashboard</li> <li>Navigate to Database \u2192 Extensions</li> <li>Search for <code>pgmq</code> and enable it</li> </ol>"},{"location":"getting-started/configuration/#initialize-aimq-schema-optional","title":"Initialize AIMQ Schema (Optional)","text":"<p>If you used <code>aimq init --supabase</code>, a migration file was created to set up the necessary schema:</p> <pre><code># The migration is created in supabase/migrations/\n# Apply it using the Supabase CLI or dashboard\nsupabase db push\n</code></pre> <p>This sets up the <code>pgmq_public</code> schema which AIMQ uses for queue operations.</p>"},{"location":"getting-started/configuration/#create-queues","title":"Create Queues","text":"<p>Queues are created automatically when you first send a message to them, or you can create them manually via SQL:</p> <pre><code>-- Create a queue (optional - queues are auto-created)\nSELECT pgmq.create('my-queue');\n</code></pre> <p>For more details, see the Supabase pgmq Documentation.</p>"},{"location":"getting-started/configuration/#environment-variables","title":"Environment Variables","text":"<p>The following environment variables are supported:</p> <pre><code># Required Supabase Configuration\nSUPABASE_URL=your-project-url\nSUPABASE_KEY=your-service-role-key  # Must be service role key, not anon key\n\n# Worker Configuration (Optional)\nWORKER_NAME=my-worker  # Default: 'peon'\nWORKER_LOG_LEVEL=info  # Default: 'info'\nWORKER_IDLE_WAIT=10.0  # Default: 10.0 seconds\n\n# LangChain Configuration (Optional)\nLANGCHAIN_TRACING_V2=true  # Enable LangChain tracing\nLANGCHAIN_ENDPOINT=https://api.smith.langchain.com\nLANGCHAIN_API_KEY=your-langchain-api-key\nLANGCHAIN_PROJECT=your-project-name\n\n# OpenAI Configuration (If using OpenAI)\nOPENAI_API_KEY=your-openai-api-key\n</code></pre>"},{"location":"getting-started/configuration/#configuration-file","title":"Configuration File","text":"<p>You can create a <code>.env</code> file in your project root:</p> <pre><code># .env\nSUPABASE_URL=your-project-url\nSUPABASE_KEY=your-service-role-key\nWORKER_NAME=my-worker\n</code></pre>"},{"location":"getting-started/configuration/#using-uv-for-development","title":"Using uv for Development","text":"<p>If you're developing AIMQ or running from source, use <code>uv</code> for dependency management:</p> <pre><code># Install dependencies\nuv sync --group dev\n\n# Run commands in the uv environment\nuv run aimq start\nuv run pytest\n</code></pre>"},{"location":"getting-started/configuration/#using-the-task-runner-just","title":"Using the Task Runner (just)","text":"<p>AIMQ uses <code>just</code> as a task runner for common development tasks:</p> <pre><code># Install dependencies\njust install\n\n# Run tests\njust test\njust test-cov\n\n# Code quality\njust lint\njust format\njust type-check\n\n# Run all checks (CI)\njust ci\n\n# Docker\njust dev           # Start dev environment\njust logs          # View logs\n\n# See all available commands\njust --list\n</code></pre> <p>Install <code>just</code>: <pre><code># macOS\nbrew install just\n\n# Other platforms: https://github.com/casey/just#installation\n</code></pre></p>"},{"location":"getting-started/configuration/#configuration-in-code","title":"Configuration in Code","text":"<p>Access configuration in your code:</p> <pre><code>from aimq.config import config\n\n# Access configuration values\nsupabase_url = config.supabase_url\nworker_name = config.worker_name\nlog_level = config.worker_log_level\n\n# Create a worker with custom configuration\nfrom aimq import Worker\n\nworker = Worker(\n    name=\"custom-worker\",\n    log_level=\"debug\",\n    idle_wait=5.0\n)\n</code></pre>"},{"location":"getting-started/configuration/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"getting-started/configuration/#worker-path","title":"Worker Path","text":"<p>Specify where to find your tasks file:</p> <pre><code># Via environment variable\nexport AIMQ_TASKS=./my_tasks.py\n\n# Via command line\naimq start custom_tasks.py\n\n# Using git URL\nexport AIMQ_TASKS=git:mycompany/aimq-tasks@production\naimq start\n</code></pre>"},{"location":"getting-started/configuration/#git-url-configuration","title":"Git URL Configuration","text":"<p>For loading tasks from git repositories:</p> <pre><code># Use SSH for private repos\nexport AIMQ_USE_SSH=true\n\n# Git credentials (for HTTPS)\nexport GIT_USERNAME=myuser\nexport GIT_PASSWORD=token\n</code></pre>"},{"location":"getting-started/configuration/#next-steps","title":"Next Steps","text":"<ul> <li>See the Quick Start Guide for usage examples</li> <li>Learn about Worker Configuration for advanced settings</li> <li>Check out Docker deployment options</li> </ul>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>AIMQ provides multiple installation options to suit different workflows, from zero-installation quick start to traditional package management.</p>"},{"location":"getting-started/installation/#option-1-using-uvx-recommended-for-quick-start","title":"Option 1: Using uvx (Recommended for Quick Start)","text":"<p>The fastest way to get started with AIMQ requires no installation:</p> <pre><code># Run any AIMQ command directly\nuvx aimq init my-project\nuvx aimq start\nuvx aimq send my-queue '{\"message\": \"hello\"}'\n</code></pre> <p>Pros: No installation, no virtual environments, no dependency conflicts Cons: Slower first run (packages are cached for subsequent runs)</p>"},{"location":"getting-started/installation/#option-2-install-as-a-tool-recommended-for-regular-use","title":"Option 2: Install as a Tool (Recommended for Regular Use)","text":"<p>Install AIMQ as a persistent tool using uv:</p> <pre><code># Install uv if you haven't already\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Install aimq as a tool\nuv tool install aimq\n\n# Now you can use aimq directly\naimq init my-project\naimq start\n</code></pre> <p>Pros: Fast, isolated from other Python projects, easy to upgrade Cons: Requires uv installation</p>"},{"location":"getting-started/installation/#option-3-traditional-pip-install","title":"Option 3: Traditional pip Install","text":"<pre><code>pip install aimq\n</code></pre> <p>Pros: Works with any Python environment Cons: May conflict with other package versions</p>"},{"location":"getting-started/installation/#option-4-development-setup","title":"Option 4: Development Setup","text":"<p>For contributing to AIMQ or building from source:</p> <pre><code># Clone the repository\ngit clone https://github.com/bldxio/aimq.git\ncd aimq\n\n# Install dependencies from lockfile (production)\nuv sync\n\n# For development (includes test/dev tools)\nuv sync --group dev\n\n# Run from source\nuv run aimq start\n</code></pre>"},{"location":"getting-started/installation/#key-uv-commands-for-development","title":"Key uv Commands for Development","text":"<pre><code># Add a new dependency\nuv add requests\n\n# Add to dev dependency group\nuv add --group dev pytest\n\n# Remove a dependency\nuv remove requests\n\n# Update dependencies\nuv lock --upgrade\n\n# Run commands in the uv environment\nuv run python -m aimq.worker\nuv run pytest\n</code></pre>"},{"location":"getting-started/installation/#requirements","title":"Requirements","text":"<ul> <li>Python: 3.11, 3.12, or 3.13</li> <li>Operating System: Linux, macOS, or Windows</li> </ul>"},{"location":"getting-started/installation/#main-dependencies","title":"Main Dependencies","text":"<p>AIMQ has the following main dependencies (automatically installed):</p> <ul> <li>easyocr: For OCR capabilities</li> <li>supabase: For queue and storage management</li> <li>langchain: For AI model integration</li> <li>pydantic: For data validation and settings management</li> <li>torch: For machine learning models</li> </ul>"},{"location":"getting-started/installation/#configuration","title":"Configuration","text":"<p>After installation, you'll need to configure your Supabase credentials. The easiest way is to use <code>aimq init</code>:</p> <pre><code># Initialize a new project (creates .env.example)\naimq init my-project\ncd my-project\n\n# Copy and configure\ncp .env.example .env\n# Edit .env with your Supabase credentials\n</code></pre> <p>Or create a <code>.env</code> file manually:</p> <pre><code>SUPABASE_URL=https://your-project.supabase.co\nSUPABASE_KEY=your-service-role-key\n</code></pre>"},{"location":"getting-started/installation/#verifying-installation","title":"Verifying Installation","text":"<p>You can verify your installation by running:</p> <pre><code># Using uvx\nuvx aimq --version\n\n# Using uv tool install\naimq --version\n\n# Using pip\naimq --version\n</code></pre> <p>This should display the version number of your AIMQ installation.</p>"},{"location":"getting-started/quickstart/","title":"Quick Start Guide","text":"<p>This guide will help you get started with AIMQ (AI Message Queue) in minutes.</p>"},{"location":"getting-started/quickstart/#zero-installation-quick-start","title":"Zero-Installation Quick Start","text":"<p>The fastest way to try AIMQ requires no installation:</p> <pre><code># Initialize a new project\nuvx aimq init my-aimq-project\ncd my-aimq-project\n\n# Configure Supabase credentials\ncp .env.example .env\n# Edit .env with your SUPABASE_URL and SUPABASE_KEY\n\n# Start the worker\nuvx aimq start\n</code></pre> <p>That's it! The worker is now running and will process jobs from your queues.</p>"},{"location":"getting-started/quickstart/#prerequisites","title":"Prerequisites","text":"<ol> <li>Supabase Project with pgmq extension enabled:</li> <li>Go to Database \u2192 Extensions</li> <li> <p>Enable the <code>pgmq</code> extension</p> </li> <li> <p>Supabase Credentials:</p> </li> <li><code>SUPABASE_URL</code>: Your project URL (e.g., <code>https://xxx.supabase.co</code>)</li> <li><code>SUPABASE_KEY</code>: Your service role key or anon key</li> </ol>"},{"location":"getting-started/quickstart/#environment-setup","title":"Environment Setup","text":"<p>The <code>aimq init</code> command creates a <code>.env.example</code> file. Copy and configure it:</p> <pre><code># Copy the example\ncp .env.example .env\n</code></pre> <p>Edit <code>.env</code> with your credentials:</p> <pre><code># Required\nSUPABASE_URL=https://your-project.supabase.co\nSUPABASE_KEY=your-service-role-key\n\n# Optional\nWORKER_NAME=my-worker\nWORKER_LOG_LEVEL=info\nWORKER_IDLE_WAIT=10.0\n</code></pre>"},{"location":"getting-started/quickstart/#using-workers-recommended","title":"Using Workers (Recommended)","text":"<p>The Worker class provides a convenient way to define and manage queue processors using decorators.</p> <ol> <li>Create a <code>tasks.py</code> file to define your queue processors:</li> </ol> <pre><code>\"\"\"\nExample tasks.py file demonstrating queue processors using AIMQ.\n\"\"\"\nfrom aimq import Worker\nfrom langchain.prompts import ChatPromptTemplate\nfrom langchain.chat_models import ChatOpenAI\n\n# Initialize the worker\nworker = Worker()\n\n# Define a simple task\n@worker.task(queue=\"hello_world\")\ndef hello_world(data):\n    \"\"\"Simple task that returns a greeting message.\"\"\"\n    return {\"message\": f\"Hello {data.get('name', 'World')}!\"}\n\n# Define a LangChain-powered task\n@worker.task(queue=\"ai_processor\", timeout=300)\ndef process_with_ai(data):\n    \"\"\"Process text using LangChain.\"\"\"\n    # Create a LangChain runnable\n    prompt = ChatPromptTemplate.from_template(\"Summarize this text: {text}\")\n    model = ChatOpenAI()\n    chain = prompt | model\n\n    # Process the input\n    return chain.with_config({\"text\": data.get(\"text\", \"\")})\n\nif __name__ == \"__main__\":\n    # This allows the file to be run directly with: python tasks.py\n    worker.start()\n</code></pre> <ol> <li>Run your worker:</li> </ol> <pre><code># Using uvx (no installation)\nuvx aimq start\n\n# Or if you installed with uv tool install\naimq start\n\n# With debug logging\naimq start --debug\n\n# With specific worker file\naimq start my_tasks.py\n</code></pre> <p>You can also run the file directly: <pre><code>python tasks.py\n# or\nuv run python tasks.py\n</code></pre></p> <ol> <li>Send jobs to your queues:</li> </ol> <p>Using the CLI (recommended for testing): <pre><code># Send a message to a queue\naimq send hello_world '{\"name\": \"Alice\"}'\n\n# Or with uvx\nuvx aimq send hello_world '{\"name\": \"Alice\"}'\n</code></pre></p> <p>Programmatically from Python: <pre><code>from aimq import Worker\n\n# Create a worker instance (make sure tasks are defined first)\nworker = Worker()\n\n# Send a job to the hello_world queue\nworker.send(\"hello_world\", {\"name\": \"Alice\"})\n\n# Send a job to the ai_processor queue\nworker.send(\"ai_processor\", {\n    \"text\": \"LangChain is a framework for developing applications powered by language models.\"\n})\n</code></pre></p> <p>Or directly via Supabase: <pre><code>from supabase import create_client\nimport os\n\nsupabase = create_client(\n    os.getenv(\"SUPABASE_URL\"),\n    os.getenv(\"SUPABASE_KEY\")\n)\n\n# Send a message using pgmq\nsupabase.rpc(\"pgmq_send\", {\n    \"queue_name\": \"hello_world\",\n    \"msg\": {\"name\": \"Alice\"}\n}).execute()\n</code></pre></p>"},{"location":"getting-started/quickstart/#using-queues-directly","title":"Using Queues Directly","text":"<p>You can also use the Queue class directly if you want more control or don't need the Worker abstraction.</p> <pre><code>from aimq.queue import Queue\nfrom langchain.prompts import ChatPromptTemplate\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain_core.runnables import RunnableLambda\n\n# Create a processor function\ndef process_text(data):\n    prompt = ChatPromptTemplate.from_template(\"Summarize this text: {text}\")\n    model = ChatOpenAI()\n    chain = prompt | model\n    result = chain.invoke({\"text\": data.get(\"text\", \"\")})\n    return {\"summary\": result.content}\n\n# Create a queue with a runnable\nqueue = Queue(\n    runnable=RunnableLambda(process_text, name=\"text_processor\"),\n    timeout=300,\n    delete_on_finish=True,\n    tags=[\"ai\", \"text\"]\n)\n\n# Send a job to the queue\njob_id = queue.send({\n    \"text\": \"LangChain is a framework for developing applications powered by language models.\"\n})\n\n# Process a single job\nresult = queue.work()\n</code></pre>"},{"location":"getting-started/quickstart/#advanced-features","title":"Advanced Features","text":""},{"location":"getting-started/quickstart/#delayed-jobs","title":"Delayed Jobs","text":"<pre><code># Using Worker\nworker.send(\"hello_world\", {\"name\": \"Bob\"}, delay=60)\n\n# Using Queue directly\nqueue.send({\"text\": \"Process this later\"}, delay=60)\n</code></pre>"},{"location":"getting-started/quickstart/#task-configuration","title":"Task Configuration","text":"<pre><code>@worker.task(\n    queue=\"important_task\",\n    timeout=600,  # 10 minute timeout\n    delete_on_finish=True,  # Delete instead of archive completed jobs\n    tags=[\"production\", \"high-priority\"]  # Add metadata tags\n)\ndef process_important_task(data):\n    # Process important task\n    return {\"status\": \"completed\"}\n</code></pre>"},{"location":"getting-started/quickstart/#docker-deployment","title":"Docker Deployment","text":"<p>AIMQ can be deployed using Docker with two approaches:</p>"},{"location":"getting-started/quickstart/#local-development","title":"Local Development","text":"<pre><code># Generate Docker files\naimq init --docker\n\n# Start with docker-compose\ndocker-compose up -d\n</code></pre>"},{"location":"getting-started/quickstart/#production-with-git-urls","title":"Production with Git URLs","text":"<pre><code># Load tasks from a git repository\ndocker run --rm \\\n  -e AIMQ_TASKS=git:mycompany/aimq-tasks@production \\\n  -e SUPABASE_URL=https://xxx.supabase.co \\\n  -e SUPABASE_KEY=your-key \\\n  aimq:latest\n</code></pre> <p>Git URL patterns supported: - <code>git:user/repo</code> - Default branch - <code>git:user/repo@branch</code> - Specific branch or tag - <code>git:user/repo#path/to/tasks</code> - Subdirectory in monorepo</p> <p>For more details, see Docker &amp; Kubernetes Deployment.</p>"},{"location":"getting-started/quickstart/#queue-management","title":"Queue Management","text":"<p>Enable or disable queues dynamically:</p> <pre><code># Enable a queue\naimq enable my-queue\n\n# Disable a queue\naimq disable my-queue\n</code></pre>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Learn more about configuration options</li> <li>See Docker deployment patterns</li> <li>Explore the API Reference</li> <li>Read about OCR capabilities</li> </ul>"},{"location":"reference/aimq/","title":"aimq","text":""},{"location":"reference/aimq/#aimq","title":"<code>aimq</code>","text":"<p>AIMQ - AI Message Queue</p>"},{"location":"reference/aimq/#aimq-attributes","title":"Attributes","text":""},{"location":"reference/aimq/#aimq.__version__","title":"<code>__version__ = '0.1.2'</code>  <code>module-attribute</code>","text":""},{"location":"reference/aimq/attachment/","title":"aimq.attachment","text":""},{"location":"reference/aimq/attachment/#aimq.attachment","title":"<code>aimq.attachment</code>","text":""},{"location":"reference/aimq/attachment/#aimq.attachment-classes","title":"Classes","text":""},{"location":"reference/aimq/attachment/#aimq.attachment.Attachment","title":"<code>Attachment</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"reference/aimq/attachment/#aimq.attachment.Attachment-attributes","title":"Attributes","text":""},{"location":"reference/aimq/attachment/#aimq.attachment.Attachment.data","title":"<code>data = Field(..., description='The bytes of the attachment', exclude=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/attachment/#aimq.attachment.Attachment.model_config","title":"<code>model_config = ConfigDict(arbitrary_types_allowed=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/attachment/#aimq.attachment.Attachment-functions","title":"Functions","text":""},{"location":"reference/aimq/attachment/#aimq.attachment.Attachment.__repr_args__","title":"<code>__repr_args__()</code>","text":"Source code in <code>src/aimq/attachment.py</code> <pre><code>def __repr_args__(self) -&gt; typing.Iterable[tuple[str | None, Any]]:\n    attrs = self.model_dump(exclude={\"data\", \"_mimetype\", \"_extension\"}).items()\n    return [(a, v) for a, v in attrs if v is not None]\n</code></pre>"},{"location":"reference/aimq/attachment/#aimq.attachment.Attachment.extension","title":"<code>extension()</code>","text":"Source code in <code>src/aimq/attachment.py</code> <pre><code>@computed_field  # type: ignore[prop-decorator]\ndef extension(self) -&gt; str | None:\n    return self._extension\n</code></pre>"},{"location":"reference/aimq/attachment/#aimq.attachment.Attachment.get","title":"<code>get(key, default=None)</code>","text":"Source code in <code>src/aimq/attachment.py</code> <pre><code>def get(self, key: str, default=None):\n    if hasattr(self, key):\n        return getattr(self, key, default)\n    return default\n</code></pre>"},{"location":"reference/aimq/attachment/#aimq.attachment.Attachment.mimetype","title":"<code>mimetype()</code>","text":"Source code in <code>src/aimq/attachment.py</code> <pre><code>@computed_field  # type: ignore[prop-decorator]\ndef mimetype(self) -&gt; str:\n    return self._mimetype\n</code></pre>"},{"location":"reference/aimq/attachment/#aimq.attachment.Attachment.model_post_init","title":"<code>model_post_init(__context)</code>","text":"Source code in <code>src/aimq/attachment.py</code> <pre><code>def model_post_init(self, __context: Any) -&gt; None:\n    kind = filetype.guess(self.data)\n    if kind:\n        self._mimetype = kind.mime\n        self._extension = kind.extension\n</code></pre>"},{"location":"reference/aimq/attachment/#aimq.attachment.Attachment.size","title":"<code>size()</code>","text":"Source code in <code>src/aimq/attachment.py</code> <pre><code>@computed_field\ndef size(self) -&gt; str:\n    return humanize.naturalsize(len(self.data))\n</code></pre>"},{"location":"reference/aimq/attachment/#aimq.attachment.Attachment.to_file","title":"<code>to_file()</code>","text":"Source code in <code>src/aimq/attachment.py</code> <pre><code>def to_file(self):\n    if not self.data or not self.mimetype:\n        raise ValueError(\"Data or mimetype not provided\")\n\n    if self.mimetype.startswith(\"image/\"):\n        return Image.open(io.BytesIO(self.data))\n    raise ValueError(\"Not an image file\")\n</code></pre>"},{"location":"reference/aimq/config/","title":"aimq.config","text":""},{"location":"reference/aimq/config/#aimq.config","title":"<code>aimq.config</code>","text":""},{"location":"reference/aimq/config/#aimq.config-attributes","title":"Attributes","text":""},{"location":"reference/aimq/config/#aimq.config.config","title":"<code>config = get_config()</code>  <code>module-attribute</code>","text":""},{"location":"reference/aimq/config/#aimq.config-classes","title":"Classes","text":""},{"location":"reference/aimq/config/#aimq.config.Config","title":"<code>Config</code>","text":"<p>               Bases: <code>BaseSettings</code></p> <p>Configuration class for the application.</p>"},{"location":"reference/aimq/config/#aimq.config.Config-attributes","title":"Attributes","text":""},{"location":"reference/aimq/config/#aimq.config.Config.langchain_api_key","title":"<code>langchain_api_key = Field(default='', alias='LANGCHAIN_API_KEY')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/config/#aimq.config.Config.langchain_endpoint","title":"<code>langchain_endpoint = Field(default='https://api.smith.langchain.com', alias='LANGCHAIN_ENDPOINT')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/config/#aimq.config.Config.langchain_project","title":"<code>langchain_project = Field(default='', alias='LANGCHAIN_PROJECT')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/config/#aimq.config.Config.langchain_tracing_v2","title":"<code>langchain_tracing_v2 = Field(default=False, alias='LANGCHAIN_TRACING_V2')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/config/#aimq.config.Config.mistral_api_key","title":"<code>mistral_api_key = Field(default='', alias='MISTRAL_API_KEY')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/config/#aimq.config.Config.model_config","title":"<code>model_config = {'case_sensitive': False, 'env_file': '.env', 'use_enum_values': True, 'extra': 'ignore'}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/config/#aimq.config.Config.openai_api_key","title":"<code>openai_api_key = Field(default='', alias='OPENAI_API_KEY')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/config/#aimq.config.Config.supabase_key","title":"<code>supabase_key = Field(default='', alias='SUPABASE_KEY')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/config/#aimq.config.Config.supabase_url","title":"<code>supabase_url = Field(default='', alias='SUPABASE_URL')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/config/#aimq.config.Config.worker_idle_wait","title":"<code>worker_idle_wait = Field(default=10.0, alias='WORKER_IDLE_WAIT')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/config/#aimq.config.Config.worker_log_level","title":"<code>worker_log_level = Field(default='info', alias='WORKER_LOG_LEVEL')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/config/#aimq.config.Config.worker_name","title":"<code>worker_name = Field(default='peon', alias='WORKER_NAME')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/config/#aimq.config.Config.worker_path","title":"<code>worker_path = Field(default=(Path('./tasks.py')), alias='WORKER_PATH')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/config/#aimq.config-functions","title":"Functions","text":""},{"location":"reference/aimq/config/#aimq.config.get_config","title":"<code>get_config()</code>  <code>cached</code>","text":"<p>Get the configuration singleton.</p> Source code in <code>src/aimq/config.py</code> <pre><code>@lru_cache()\ndef get_config() -&gt; Config:\n    \"\"\"Get the configuration singleton.\"\"\"\n    return Config()\n</code></pre>"},{"location":"reference/aimq/helpers/","title":"aimq.helpers","text":""},{"location":"reference/aimq/helpers/#aimq.helpers","title":"<code>aimq.helpers</code>","text":"<p>Helper functions for building and composing runnables in the AIMQ framework.</p> <p>This module provides utility functions for working with LangChain runnables, including functions for chaining, selecting, and transforming data through the runnable pipeline.</p>"},{"location":"reference/aimq/helpers/#aimq.helpers-attributes","title":"Attributes","text":""},{"location":"reference/aimq/helpers/#aimq.helpers.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"reference/aimq/helpers/#aimq.helpers-functions","title":"Functions","text":""},{"location":"reference/aimq/helpers/#aimq.helpers.assign","title":"<code>assign(runnables={})</code>","text":"<p>Create a RunnableAssign from a dictionary of runnables or constant values.</p> <p>Parameters:</p> Name Type Description Default <code>runnables</code> <code>dict[str, Any]</code> <p>Dictionary mapping keys to either runnables or constant values. Constant values will be wrapped in a const function.</p> <code>{}</code> <p>Returns:</p> Type Description <code>RunnableAssign</code> <p>A RunnableAssign that assigns the results of the runnables to their respective keys.</p> Source code in <code>src/aimq/helpers.py</code> <pre><code>def assign(runnables: dict[str, Any] = {}) -&gt; RunnableAssign:\n    \"\"\"Create a RunnableAssign from a dictionary of runnables or constant values.\n\n    Args:\n        runnables: Dictionary mapping keys to either runnables or constant values.\n            Constant values will be wrapped in a const function.\n\n    Returns:\n        A RunnableAssign that assigns the results of the runnables to their respective keys.\n    \"\"\"\n    for k, v in runnables.items():\n        if not isinstance(v, RunnableAssign):\n            runnables[k] = const(v)\n    return RunnableAssign(RunnableParallel(runnables))\n</code></pre>"},{"location":"reference/aimq/helpers/#aimq.helpers.const","title":"<code>const(value)</code>","text":"<p>Create a function that always returns a constant value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>T</code> <p>The constant value to be returned.</p> required <p>Returns:</p> Type Description <code>Callable[[Any], T]</code> <p>A function that takes any input and returns the constant value.</p> Source code in <code>src/aimq/helpers.py</code> <pre><code>def const(value: T) -&gt; Callable[[Any], T]:\n    \"\"\"Create a function that always returns a constant value.\n\n    Args:\n        value: The constant value to be returned.\n\n    Returns:\n        A function that takes any input and returns the constant value.\n    \"\"\"\n    return lambda x: value\n</code></pre>"},{"location":"reference/aimq/helpers/#aimq.helpers.echo","title":"<code>echo(input)</code>","text":"<p>Echo the input value back while also printing it to stdout.</p> <p>Parameters:</p> Name Type Description Default <code>input</code> <code>T</code> <p>Any value to be echoed.</p> required <p>Returns:</p> Type Description <code>T</code> <p>The same value that was passed in.</p> Source code in <code>src/aimq/helpers.py</code> <pre><code>@chain\ndef echo(input: T) -&gt; T:\n    \"\"\"Echo the input value back while also printing it to stdout.\n\n    Args:\n        input: Any value to be echoed.\n\n    Returns:\n        The same value that was passed in.\n    \"\"\"\n    print(input)\n    return input\n</code></pre>"},{"location":"reference/aimq/helpers/#aimq.helpers.orig","title":"<code>orig(key=None)</code>","text":"<p>Create a runnable that retrieves the original configuration.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str | list[str] | None</code> <p>Optional key or list of keys to select from the configuration. If None, returns the entire configuration.</p> <code>None</code> <p>Returns:</p> Type Description <code>Runnable[Any, dict[str, Any]]</code> <p>A runnable that returns the selected configuration values.</p> Source code in <code>src/aimq/helpers.py</code> <pre><code>def orig(key: str | list[str] | None = None) -&gt; Runnable[Any, dict[str, Any]]:\n    \"\"\"Create a runnable that retrieves the original configuration.\n\n    Args:\n        key: Optional key or list of keys to select from the configuration.\n            If None, returns the entire configuration.\n\n    Returns:\n        A runnable that returns the selected configuration values.\n    \"\"\"\n\n    def _orig(input: Any, config: RunnableConfig) -&gt; dict[str, Any]:\n        return config.get(\"configurable\", {})\n\n    runnable = RunnableLambda(_orig)\n\n    if key is not None:\n        runnable = runnable | pick(key)  # type: ignore\n    return runnable\n</code></pre>"},{"location":"reference/aimq/helpers/#aimq.helpers.pick","title":"<code>pick(key)</code>","text":"<p>Create a RunnablePick to select specific keys from the input.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str | list[str]</code> <p>Either a single key or list of keys to select from the input.</p> required <p>Returns:</p> Type Description <code>RunnablePick</code> <p>A RunnablePick configured to select the specified key(s).</p> Source code in <code>src/aimq/helpers.py</code> <pre><code>def pick(key: str | list[str]) -&gt; RunnablePick:\n    \"\"\"Create a RunnablePick to select specific keys from the input.\n\n    Args:\n        key: Either a single key or list of keys to select from the input.\n\n    Returns:\n        A RunnablePick configured to select the specified key(s).\n    \"\"\"\n    return RunnablePick(key)\n</code></pre>"},{"location":"reference/aimq/helpers/#aimq.helpers.select","title":"<code>select(key=None)</code>","text":"<p>Create a runnable that selects specific keys from the input.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str | list[str] | dict[str, str] | None</code> <p>Specifies what to select from the input: - None: Pass through the entire input - str: Select a single key - list[str]: Select multiple keys - dict[str, str]: Map old keys to new keys</p> <code>None</code> <p>Returns:</p> Type Description <code>Runnable</code> <p>A runnable that performs the selection operation.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the key type is not one of the supported types.</p> Source code in <code>src/aimq/helpers.py</code> <pre><code>def select(key: str | list[str] | dict[str, str] | None = None) -&gt; Runnable:\n    \"\"\"Create a runnable that selects specific keys from the input.\n\n    Args:\n        key: Specifies what to select from the input:\n            - None: Pass through the entire input\n            - str: Select a single key\n            - list[str]: Select multiple keys\n            - dict[str, str]: Map old keys to new keys\n\n    Returns:\n        A runnable that performs the selection operation.\n\n    Raises:\n        ValueError: If the key type is not one of the supported types.\n    \"\"\"\n    if key is None:\n        return RunnablePassthrough()\n    elif isinstance(key, str):\n        return RunnableParallel({key: RunnablePassthrough()})\n    elif isinstance(key, list):\n        return RunnablePick(key)\n    elif isinstance(key, dict):\n        return RunnableParallel(\n            {\n                new_key: RunnablePassthrough() if old_key == \"*\" else RunnablePick(old_key)\n                for old_key, new_key in key.items()\n            }\n        )\n    else:\n        raise ValueError(f\"Invalid key type: {type(key)}\")\n</code></pre>"},{"location":"reference/aimq/job/","title":"aimq.job","text":""},{"location":"reference/aimq/job/#aimq.job","title":"<code>aimq.job</code>","text":""},{"location":"reference/aimq/job/#aimq.job-classes","title":"Classes","text":""},{"location":"reference/aimq/job/#aimq.job.Job","title":"<code>Job</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A job in the queue.</p> <p>This class represents a job that can be processed by a worker. Each job has a unique identifier, metadata about its processing status, and the actual data to be processed.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Unique identifier for the job (aliased as msg_id)</p> <code>attempt</code> <code>int</code> <p>Number of times this job has been attempted (aliased as read_ct)</p> <code>updated_at</code> <code>datetime</code> <p>Timestamp of last update</p> <code>enqueued_at</code> <code>datetime</code> <p>Timestamp when job was added to queue</p> <code>expires_at</code> <code>datetime</code> <p>Timestamp when job expires (aliased as vt)</p> <code>data</code> <code>dict[str, Any]</code> <p>The actual job data to process (aliased as message)</p> <code>status</code> <code>str</code> <p>Current status of the job</p> <code>queue</code> <code>Optional[str]</code> <p>Optional name of the queue this job belongs to</p>"},{"location":"reference/aimq/job/#aimq.job.Job-attributes","title":"Attributes","text":""},{"location":"reference/aimq/job/#aimq.job.Job.attempt","title":"<code>attempt = Field(alias='read_ct')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/job/#aimq.job.Job.data","title":"<code>data = Field(alias='message')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/job/#aimq.job.Job.enqueued_at","title":"<code>enqueued_at</code>  <code>instance-attribute</code>","text":""},{"location":"reference/aimq/job/#aimq.job.Job.expires_at","title":"<code>expires_at = Field(alias='vt')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/job/#aimq.job.Job.id","title":"<code>id = Field(alias='msg_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/job/#aimq.job.Job.popped","title":"<code>popped</code>  <code>property</code>","text":"<p>Check if the job has been popped from the queue.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the job has been popped, False otherwise</p>"},{"location":"reference/aimq/job/#aimq.job.Job.queue","title":"<code>queue = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/job/#aimq.job.Job.status","title":"<code>status = Field(default='pending')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/job/#aimq.job.Job.updated_at","title":"<code>updated_at = Field(default_factory=(datetime.now))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/job/#aimq.job.Job-functions","title":"Functions","text":""},{"location":"reference/aimq/job/#aimq.job.Job.from_response","title":"<code>from_response(response_data, queue=None, popped=False)</code>  <code>classmethod</code>","text":"<p>Create a Job instance from API response data.</p> <p>Parameters:</p> Name Type Description Default <code>response_data</code> <code>dict</code> <p>Raw response data from the API</p> required <code>queue</code> <code>Optional[str]</code> <p>Optional name of the queue this job belongs to</p> <code>None</code> <code>popped</code> <code>bool</code> <p>Whether this job has been popped from the queue</p> <code>False</code> <p>Returns:</p> Name Type Description <code>Job</code> <code>Job</code> <p>A new Job instance initialized with the response data</p> Source code in <code>src/aimq/job.py</code> <pre><code>@classmethod\ndef from_response(\n    cls, response_data: dict, queue: Optional[str] = None, popped: bool = False\n) -&gt; \"Job\":\n    \"\"\"Create a Job instance from API response data.\n\n    Args:\n        response_data: Raw response data from the API\n        queue: Optional name of the queue this job belongs to\n        popped: Whether this job has been popped from the queue\n\n    Returns:\n        Job: A new Job instance initialized with the response data\n    \"\"\"\n    job = cls(**response_data)\n    job._popped = popped\n    job.queue = queue\n    return job\n</code></pre>"},{"location":"reference/aimq/logger/","title":"aimq.logger","text":""},{"location":"reference/aimq/logger/#aimq.logger","title":"<code>aimq.logger</code>","text":""},{"location":"reference/aimq/logger/#aimq.logger-attributes","title":"Attributes","text":""},{"location":"reference/aimq/logger/#aimq.logger.console","title":"<code>console = Console()</code>  <code>module-attribute</code>","text":""},{"location":"reference/aimq/logger/#aimq.logger-classes","title":"Classes","text":""},{"location":"reference/aimq/logger/#aimq.logger.LogEvent","title":"<code>LogEvent</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"reference/aimq/logger/#aimq.logger.LogEvent-attributes","title":"Attributes","text":""},{"location":"reference/aimq/logger/#aimq.logger.LogEvent.data","title":"<code>data = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/logger/#aimq.logger.LogEvent.level","title":"<code>level</code>  <code>instance-attribute</code>","text":""},{"location":"reference/aimq/logger/#aimq.logger.LogEvent.msg","title":"<code>msg</code>  <code>instance-attribute</code>","text":""},{"location":"reference/aimq/logger/#aimq.logger.LogEvent.styles","title":"<code>styles = Field(default_factory=(lambda: {LogLevel.DEBUG: LogStyle('\ud83d\udd0d DEBUG', 'blue'), LogLevel.INFO: LogStyle('\u2139\ufe0f INFO', 'green'), LogLevel.WARNING: LogStyle('\u26a0\ufe0f WARNING', 'yellow'), LogLevel.ERROR: LogStyle('\u274c ERROR', 'red'), LogLevel.CRITICAL: LogStyle('\ud83d\udea8 CRITICAL', 'red bold')}))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/logger/#aimq.logger.LogEvent-functions","title":"Functions","text":""},{"location":"reference/aimq/logger/#aimq.logger.LogEvent.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>src/aimq/logger.py</code> <pre><code>def __repr__(self) -&gt; str:\n    return f\"LogEvent(level={self.level!r}, msg={self.msg!r}, data={self.data!r})\"\n</code></pre>"},{"location":"reference/aimq/logger/#aimq.logger.LogEvent.__rich__","title":"<code>__rich__()</code>","text":"Source code in <code>src/aimq/logger.py</code> <pre><code>def __rich__(self) -&gt; Text:\n    style = self.styles[self.level]\n    text = Text()\n    text.append(f\"{style.template}: \", style=f\"{style.color}\")\n    text.append(self.msg, style=f\"dim {style.color}\")\n\n    if self.data:\n        text.append(\"\\nData: \", style=f\"{style.color} bold\")\n        text.append(str(self.data), style=f\"dim {style.color}\")\n\n    return text\n</code></pre>"},{"location":"reference/aimq/logger/#aimq.logger.LogEvent.__str__","title":"<code>__str__()</code>","text":"Source code in <code>src/aimq/logger.py</code> <pre><code>def __str__(self) -&gt; str:\n    style = self.styles[self.level]\n    result = f\"{style.template}: {self.msg}\"\n    if self.data:\n        result += f\"\\nData: {self.data}\"\n    return result\n</code></pre>"},{"location":"reference/aimq/logger/#aimq.logger.LogEvent.print","title":"<code>print()</code>","text":"Source code in <code>src/aimq/logger.py</code> <pre><code>def print(self):\n    style = self.styles[self.level]\n    console.print(Panel(self.__rich__(), border_style=style.color))\n</code></pre>"},{"location":"reference/aimq/logger/#aimq.logger.LogLevel","title":"<code>LogLevel</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p>"},{"location":"reference/aimq/logger/#aimq.logger.LogLevel-attributes","title":"Attributes","text":""},{"location":"reference/aimq/logger/#aimq.logger.LogLevel.CRITICAL","title":"<code>CRITICAL = 'critical'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/logger/#aimq.logger.LogLevel.DEBUG","title":"<code>DEBUG = 'debug'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/logger/#aimq.logger.LogLevel.ERROR","title":"<code>ERROR = 'error'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/logger/#aimq.logger.LogLevel.INFO","title":"<code>INFO = 'info'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/logger/#aimq.logger.LogLevel.WARNING","title":"<code>WARNING = 'warning'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/logger/#aimq.logger.LogLevel-functions","title":"Functions","text":""},{"location":"reference/aimq/logger/#aimq.logger.LogLevel.__ge__","title":"<code>__ge__(other)</code>","text":"Source code in <code>src/aimq/logger.py</code> <pre><code>def __ge__(self, other: Union[\"LogLevel\", str]) -&gt; bool:\n    if isinstance(other, str):\n        other = LogLevel(other)\n    levels = list(LogLevel)\n    return levels.index(self) &gt;= levels.index(other)\n</code></pre>"},{"location":"reference/aimq/logger/#aimq.logger.LogStyle","title":"<code>LogStyle</code>","text":"<p>               Bases: <code>NamedTuple</code></p>"},{"location":"reference/aimq/logger/#aimq.logger.LogStyle-attributes","title":"Attributes","text":""},{"location":"reference/aimq/logger/#aimq.logger.LogStyle.color","title":"<code>color</code>  <code>instance-attribute</code>","text":""},{"location":"reference/aimq/logger/#aimq.logger.LogStyle.template","title":"<code>template</code>  <code>instance-attribute</code>","text":""},{"location":"reference/aimq/logger/#aimq.logger.Logger","title":"<code>Logger()</code>","text":"Source code in <code>src/aimq/logger.py</code> <pre><code>def __init__(self):\n    self._queue = queue.Queue()\n</code></pre>"},{"location":"reference/aimq/logger/#aimq.logger.Logger-functions","title":"Functions","text":""},{"location":"reference/aimq/logger/#aimq.logger.Logger.critical","title":"<code>critical(msg, data=None)</code>","text":"Source code in <code>src/aimq/logger.py</code> <pre><code>def critical(self, msg: str, data: Any = None):\n    self.log_event(LogEvent(level=LogLevel.CRITICAL, msg=msg, data=data))\n</code></pre>"},{"location":"reference/aimq/logger/#aimq.logger.Logger.debug","title":"<code>debug(msg, data=None)</code>","text":"Source code in <code>src/aimq/logger.py</code> <pre><code>def debug(self, msg: str, data: Any = None):\n    self.log_event(LogEvent(level=LogLevel.DEBUG, msg=msg, data=data))\n</code></pre>"},{"location":"reference/aimq/logger/#aimq.logger.Logger.error","title":"<code>error(msg, data=None)</code>","text":"Source code in <code>src/aimq/logger.py</code> <pre><code>def error(self, msg: str, data: Any = None):\n    self.log_event(LogEvent(level=LogLevel.ERROR, msg=msg, data=data))\n</code></pre>"},{"location":"reference/aimq/logger/#aimq.logger.Logger.events","title":"<code>events(block=True)</code>","text":"Source code in <code>src/aimq/logger.py</code> <pre><code>def events(self, block=True):\n    while True:\n        try:\n            event = self._queue.get(block=block)\n            if event is None:\n                break\n            yield event\n        except queue.Empty:\n            break\n</code></pre>"},{"location":"reference/aimq/logger/#aimq.logger.Logger.info","title":"<code>info(msg, data=None)</code>","text":"Source code in <code>src/aimq/logger.py</code> <pre><code>def info(self, msg: str, data: Any = None):\n    self.log_event(LogEvent(level=LogLevel.INFO, msg=msg, data=data))\n</code></pre>"},{"location":"reference/aimq/logger/#aimq.logger.Logger.log_event","title":"<code>log_event(event)</code>","text":"Source code in <code>src/aimq/logger.py</code> <pre><code>def log_event(self, event: LogEvent):\n    self._queue.put(event)\n</code></pre>"},{"location":"reference/aimq/logger/#aimq.logger.Logger.print","title":"<code>print(block=True, level=LogLevel.INFO)</code>","text":"Source code in <code>src/aimq/logger.py</code> <pre><code>def print(self, block=True, level: Union[LogLevel, str] = LogLevel.INFO):\n    if isinstance(level, str):\n        level = LogLevel(level)\n    [event.print() for event in self.events(block=block) if event.level &gt;= level]\n</code></pre>"},{"location":"reference/aimq/logger/#aimq.logger.Logger.stop","title":"<code>stop()</code>","text":"Source code in <code>src/aimq/logger.py</code> <pre><code>def stop(self):\n    self._queue.put(None)\n</code></pre>"},{"location":"reference/aimq/logger/#aimq.logger.Logger.warning","title":"<code>warning(msg, data=None)</code>","text":"Source code in <code>src/aimq/logger.py</code> <pre><code>def warning(self, msg: str, data: Any = None):\n    self.log_event(LogEvent(level=LogLevel.WARNING, msg=msg, data=data))\n</code></pre>"},{"location":"reference/aimq/queue/","title":"aimq.queue","text":""},{"location":"reference/aimq/queue/#aimq.queue","title":"<code>aimq.queue</code>","text":""},{"location":"reference/aimq/queue/#aimq.queue-classes","title":"Classes","text":""},{"location":"reference/aimq/queue/#aimq.queue.Queue","title":"<code>Queue</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A queue class that manages workflows with configurable parameters.</p>"},{"location":"reference/aimq/queue/#aimq.queue.Queue-attributes","title":"Attributes","text":""},{"location":"reference/aimq/queue/#aimq.queue.Queue.delay","title":"<code>delay = Field(default=0, ge=0, description='Delay in seconds between processing tasks')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/queue/#aimq.queue.Queue.delete_on_finish","title":"<code>delete_on_finish = Field(default=False, description='Whether to delete (True) or archive (False) jobs after processing')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/queue/#aimq.queue.Queue.logger","title":"<code>logger = Field(default_factory=Logger, description='Logger instance to use for queue events')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/queue/#aimq.queue.Queue.model_config","title":"<code>model_config = ConfigDict(arbitrary_types_allowed=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/queue/#aimq.queue.Queue.name","title":"<code>name</code>  <code>property</code>","text":"<p>Get the queue name from the runnable.</p>"},{"location":"reference/aimq/queue/#aimq.queue.Queue.provider","title":"<code>provider = Field(default_factory=SupabaseQueueProvider, description='Queue provider implementation')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/queue/#aimq.queue.Queue.runnable","title":"<code>runnable = Field(description='Langchain runnable to process jobs')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/queue/#aimq.queue.Queue.tags","title":"<code>tags = Field(default_factory=list, description='List of tags associated with the queue')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/queue/#aimq.queue.Queue.timeout","title":"<code>timeout = Field(default=300, description='Maximum time in seconds for a task to complete. If 0, messages will be popped instead of read.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/queue/#aimq.queue.Queue.worker_name","title":"<code>worker_name = Field(default='peon', description='Name of the worker processing this queue')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/queue/#aimq.queue.Queue-functions","title":"Functions","text":""},{"location":"reference/aimq/queue/#aimq.queue.Queue.finish","title":"<code>finish(job)</code>","text":"<p>Finish processing a job.</p> <p>If the job was popped, do nothing. Otherwise, either archive or delete based on delete_on_finish setting.</p> <p>Parameters:</p> Name Type Description Default <code>job</code> <code>Job</code> <p>The job to finish</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the operation was successful</p> Source code in <code>src/aimq/queue.py</code> <pre><code>def finish(self, job: Job) -&gt; bool:\n    \"\"\"Finish processing a job.\n\n    If the job was popped, do nothing.\n    Otherwise, either archive or delete based on delete_on_finish setting.\n\n    Args:\n        job: The job to finish\n\n    Returns:\n        bool: True if the operation was successful\n    \"\"\"\n    if job._popped:\n        self.logger.debug(f\"Job {job.id} was popped, no cleanup needed\")\n        return True\n\n    try:\n        if self.delete_on_finish:\n            self.provider.delete(self.name, job.id)\n            self.logger.info(f\"Deleted job {job.id} from queue {self.name}\")\n        else:\n            self.provider.archive(self.name, job.id)\n            self.logger.info(f\"Archived job {job.id} from queue {self.name}\")\n        return True\n    except Exception as e:\n        self.logger.error(f\"Error finishing job {job.id}: {str(e)}\")\n        return False\n</code></pre>"},{"location":"reference/aimq/queue/#aimq.queue.Queue.get_runtime_config","title":"<code>get_runtime_config(job)</code>","text":"<p>Create a runtime configuration for the job.</p> <p>Parameters:</p> Name Type Description Default <code>job</code> <code>Job</code> <p>The job to create configuration for</p> required <p>Returns:</p> Name Type Description <code>RunnableConfig</code> <code>RunnableConfig</code> <p>Configuration for running the job</p> Source code in <code>src/aimq/queue.py</code> <pre><code>def get_runtime_config(self, job: Job) -&gt; RunnableConfig:\n    \"\"\"Create a runtime configuration for the job.\n\n    Args:\n        job: The job to create configuration for\n\n    Returns:\n        RunnableConfig: Configuration for running the job\n    \"\"\"\n    return RunnableConfig(\n        metadata={\n            \"worker\": self.worker_name,\n            \"queue\": self.name,\n            \"job\": job.id,\n        },\n        tags=self.tags,\n        configurable=job.data,\n    )\n</code></pre>"},{"location":"reference/aimq/queue/#aimq.queue.Queue.next","title":"<code>next()</code>","text":"<p>Check for new jobs in the queue.</p> <p>Returns:</p> Type Description <code>Job | None</code> <p>Optional[Job]: Next job if available, None otherwise</p> Source code in <code>src/aimq/queue.py</code> <pre><code>def next(self) -&gt; Job | None:\n    \"\"\"Check for new jobs in the queue.\n\n    Returns:\n        Optional[Job]: Next job if available, None otherwise\n    \"\"\"\n    try:\n        if self.timeout == 0:\n            job = self.provider.pop(self.name)\n        else:\n            jobs = self.provider.read(self.name, self.timeout, 1)\n            job = jobs[0] if jobs else None\n        if job:\n            self.logger.debug(f\"Retrieved job {job.id} from queue {self.name}\")\n        return job\n    except QueueNotFoundError as e:\n        self.logger.error(f\"Queue {self.name} not found\", str(e))\n        return None\n</code></pre>"},{"location":"reference/aimq/queue/#aimq.queue.Queue.run","title":"<code>run(job)</code>","text":"<p>Process a  specific job using the configured runnable.</p> Source code in <code>src/aimq/queue.py</code> <pre><code>def run(self, job: Job) -&gt; Any:\n    \"\"\"Process a  specific job using the configured runnable.\"\"\"\n    runtime_config = self.get_runtime_config(job)\n    return self.runnable.invoke(job.data, runtime_config)\n</code></pre>"},{"location":"reference/aimq/queue/#aimq.queue.Queue.send","title":"<code>send(data, delay=None)</code>","text":"<p>Add a message to the queue.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict[str, Any]</code> <p>Data payload to send</p> required <code>delay</code> <code>int | None</code> <p>Optional delay in seconds before the message becomes visible</p> <code>None</code> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The ID of the added message</p> Source code in <code>src/aimq/queue.py</code> <pre><code>def send(self, data: dict[str, Any], delay: int | None = None) -&gt; int:\n    \"\"\"Add a message to the queue.\n\n    Args:\n        data: Data payload to send\n        delay: Optional delay in seconds before the message becomes visible\n\n    Returns:\n        int: The ID of the added message\n    \"\"\"\n    job_id = self.provider.send(self.name, data, delay)\n    self.logger.info(f\"Sent job {job_id} to queue {self.name}\", data)\n    return job_id\n</code></pre>"},{"location":"reference/aimq/queue/#aimq.queue.Queue.send_batch","title":"<code>send_batch(data_list, delay=None)</code>","text":"<p>Add a batch of messages to the queue.</p> <p>Parameters:</p> Name Type Description Default <code>data_list</code> <code>list[dict[str, Any]]</code> <p>List of data payloads to send</p> required <code>delay</code> <code>int | None</code> <p>Optional delay in seconds before the messages become visible</p> <code>None</code> <p>Returns:</p> Type Description <code>List[int]</code> <p>List[int]: List of IDs of added messages</p> Source code in <code>src/aimq/queue.py</code> <pre><code>def send_batch(self, data_list: list[dict[str, Any]], delay: int | None = None) -&gt; List[int]:\n    \"\"\"Add a batch of messages to the queue.\n\n    Args:\n        data_list: List of data payloads to send\n        delay: Optional delay in seconds before the messages become visible\n\n    Returns:\n        List[int]: List of IDs of added messages\n    \"\"\"\n    job_ids = self.provider.send_batch(self.name, data_list, delay)\n    self.logger.info(f\"Sent batch of {len(job_ids)} jobs to queue {self.name}\")\n    return job_ids\n</code></pre>"},{"location":"reference/aimq/queue/#aimq.queue.Queue.work","title":"<code>work()</code>","text":"<p>Process jobs in the queue using the configured runnable.</p> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>Result from processing each job</p> Source code in <code>src/aimq/queue.py</code> <pre><code>def work(self) -&gt; Any:\n    \"\"\"Process jobs in the queue using the configured runnable.\n\n    Returns:\n        Any: Result from processing each job\n    \"\"\"\n    job = self.next()\n    if job is None:\n        return None\n\n    self.logger.info(f\"Processing job {job.id} in queue {self.name}\", job.data)\n    try:\n        result = self.run(job)\n        self.logger.info(f\"Job {job.id} processed successfully\", result)\n        self.finish(job)\n        return result\n    except Exception as e:\n        self.logger.error(f\"Error processing job {job.id}: {str(e)}\", job.data)\n        raise\n</code></pre>"},{"location":"reference/aimq/queue/#aimq.queue.QueueNotFoundError","title":"<code>QueueNotFoundError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Raised when attempting to access a queue that does not exist.</p>"},{"location":"reference/aimq/utils/","title":"aimq.utils","text":""},{"location":"reference/aimq/utils/#aimq.utils","title":"<code>aimq.utils</code>","text":"<p>Utility functions for the core package.</p>"},{"location":"reference/aimq/utils/#aimq.utils-functions","title":"Functions","text":""},{"location":"reference/aimq/utils/#aimq.utils.add_to_path","title":"<code>add_to_path(path)</code>","text":"<p>Temporarily add a directory to sys.path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Directory to add to sys.path</p> required <p>Yields:</p> Type Description <code>None</code> <p>None</p> Source code in <code>src/aimq/utils.py</code> <pre><code>@contextmanager\ndef add_to_path(path: str) -&gt; Generator[None, None, None]:\n    \"\"\"Temporarily add a directory to sys.path.\n\n    Args:\n        path: Directory to add to sys.path\n\n    Yields:\n        None\n    \"\"\"\n    sys.path.insert(0, path)\n    try:\n        yield\n    finally:\n        sys.path.pop(0)\n</code></pre>"},{"location":"reference/aimq/utils/#aimq.utils.encode_image","title":"<code>encode_image(image)</code>","text":"<p>Encode a PIL Image as a base64 string.</p> <p>Parameters:</p> Name Type Description Default <code>image</code> <code>Image</code> <p>PIL Image to encode</p> required <p>Returns:</p> Type Description <code>str</code> <p>Base64 encoded string of the image in PNG format</p> Source code in <code>src/aimq/utils.py</code> <pre><code>def encode_image(image: Image.Image) -&gt; str:\n    \"\"\"\n    Encode a PIL Image as a base64 string.\n\n    Args:\n        image: PIL Image to encode\n\n    Returns:\n        Base64 encoded string of the image in PNG format\n    \"\"\"\n    buffered = BytesIO()\n    image.save(buffered, format=\"PNG\")\n    return base64.b64encode(buffered.getvalue()).decode(\"utf-8\")\n</code></pre>"},{"location":"reference/aimq/utils/#aimq.utils.load_module","title":"<code>load_module(module_path, *, add_to_sys_path=True)</code>","text":"<p>Load a Python module from a file path.</p> <p>Parameters:</p> Name Type Description Default <code>module_path</code> <code>Path</code> <p>Path to the Python file to load</p> required <code>add_to_sys_path</code> <code>bool</code> <p>Whether to add the module's parent directory to sys.path</p> <code>True</code> <p>Returns:</p> Type Description <code>Any</code> <p>The loaded module</p> <p>Raises:</p> Type Description <code>ImportError</code> <p>If the module cannot be loaded</p> Source code in <code>src/aimq/utils.py</code> <pre><code>def load_module(module_path: Path, *, add_to_sys_path: bool = True) -&gt; Any:\n    \"\"\"Load a Python module from a file path.\n\n    Args:\n        module_path: Path to the Python file to load\n        add_to_sys_path: Whether to add the module's parent directory to sys.path\n\n    Returns:\n        The loaded module\n\n    Raises:\n        ImportError: If the module cannot be loaded\n    \"\"\"\n    if add_to_sys_path:\n        # Add the parent directory to Python path\n        module_dir = module_path.parent\n        sys.path.insert(0, str(module_dir.parent))\n\n    try:\n        # Import the module using the package name\n        package_name = module_path.parent.name\n        module_name = module_path.stem\n        full_module_name = f\"{package_name}.{module_name}\"\n\n        # Import the module\n        spec = importlib.util.spec_from_file_location(full_module_name, module_path)\n        if spec is None or spec.loader is None:\n            raise ImportError(f\"Could not load module from {module_path}\")\n\n        module = importlib.util.module_from_spec(spec)\n        sys.modules[full_module_name] = module  # Register the module in sys.modules\n        spec.loader.exec_module(module)\n\n        return module\n    finally:\n        if add_to_sys_path:\n            # Remove the added path to avoid polluting sys.path\n            sys.path.pop(0)\n</code></pre>"},{"location":"reference/aimq/worker/","title":"aimq.worker","text":""},{"location":"reference/aimq/worker/#aimq.worker","title":"<code>aimq.worker</code>","text":""},{"location":"reference/aimq/worker/#aimq.worker-attributes","title":"Attributes","text":""},{"location":"reference/aimq/worker/#aimq.worker-classes","title":"Classes","text":""},{"location":"reference/aimq/worker/#aimq.worker.Worker","title":"<code>Worker</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Main worker class that manages job processing across multiple queues.</p> <p>The Worker class is responsible for managing multiple queues and their associated processing threads. It handles queue registration, thread management, and provides a clean interface for starting and stopping job processing.</p> <p>Attributes:</p> Name Type Description <code>queues</code> <code>OrderedDict[str, Queue]</code> <p>Ordered dictionary of registered queues</p> <code>logger</code> <code>Logger</code> <p>Logger instance for recording worker activities</p> <code>log_level</code> <code>LogLevel | str</code> <p>Current logging level</p> <code>running</code> <code>LogLevel | str</code> <p>Threading event controlling worker execution</p> <code>thread</code> <code>Optional[WorkerThread]</code> <p>Worker thread instance</p>"},{"location":"reference/aimq/worker/#aimq.worker.Worker-attributes","title":"Attributes","text":""},{"location":"reference/aimq/worker/#aimq.worker.Worker.idle_wait","title":"<code>idle_wait = Field(default_factory=(lambda: config.worker_idle_wait))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/worker/#aimq.worker.Worker.is_running","title":"<code>is_running = Field(default_factory=(threading.Event))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/worker/#aimq.worker.Worker.log_level","title":"<code>log_level = Field(default_factory=(lambda: config.worker_log_level))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/worker/#aimq.worker.Worker.logger","title":"<code>logger = Field(default_factory=Logger)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/worker/#aimq.worker.Worker.model_config","title":"<code>model_config = ConfigDict(arbitrary_types_allowed=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/worker/#aimq.worker.Worker.name","title":"<code>name = Field(default_factory=(lambda: config.worker_name), description='Name of this worker')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/worker/#aimq.worker.Worker.queues","title":"<code>queues = Field(default_factory=OrderedDict)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/worker/#aimq.worker.Worker.thread","title":"<code>thread = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/worker/#aimq.worker.Worker-functions","title":"Functions","text":""},{"location":"reference/aimq/worker/#aimq.worker.Worker.assign","title":"<code>assign(runnable, *, queue=None, timeout=300, delete_on_finish=False, tags=None)</code>","text":"<p>Register a task with a queue name and runnable instance.</p> <p>Parameters:</p> Name Type Description Default <code>runnable</code> <code>Runnable</code> <p>Langchain Runnable instance to process jobs</p> required <code>queue</code> <code>str | None</code> <p>Queue name to assign the task to</p> <code>None</code> <code>timeout</code> <code>int</code> <p>Maximum time in seconds for a task to complete. If 0, messages will be popped instead of read.</p> <code>300</code> <code>delete_on_finish</code> <code>bool</code> <p>Whether to delete (True) or archive (False) jobs after processing</p> <code>False</code> <code>tags</code> <code>List[str] | None</code> <p>Optional list of tags to associate with the queue</p> <code>None</code> Source code in <code>src/aimq/worker.py</code> <pre><code>def assign(\n    self,\n    runnable: Runnable,\n    *,\n    queue: str | None = None,\n    timeout: int = 300,\n    delete_on_finish: bool = False,\n    tags: List[str] | None = None,\n) -&gt; None:\n    \"\"\"Register a task with a queue name and runnable instance.\n\n    Args:\n        runnable: Langchain Runnable instance to process jobs\n        queue: Queue name to assign the task to\n        timeout: Maximum time in seconds for a task to complete. If 0, messages will be popped instead of read.\n        delete_on_finish: Whether to delete (True) or archive (False) jobs after processing\n        tags: Optional list of tags to associate with the queue\n    \"\"\"\n\n    runnable.name = queue or runnable.name\n    if runnable.name is None:\n        raise ValueError(\"Queue name is required\")\n\n    self.queues[runnable.name] = Queue(\n        runnable=runnable,\n        timeout=timeout,\n        tags=tags or [],\n        delete_on_finish=delete_on_finish,\n        logger=self.logger,\n        worker_name=self.name,\n    )\n    self.logger.info(f\"Registered task {runnable.name}\")\n</code></pre>"},{"location":"reference/aimq/worker/#aimq.worker.Worker.load","title":"<code>load(worker_path)</code>  <code>classmethod</code>","text":"<p>Load a worker instance from a Python file.</p> <p>Parameters:</p> Name Type Description Default <code>worker_path</code> <code>Path</code> <p>Path to the Python file containing the worker instance</p> required <p>Returns:</p> Type Description <code>Worker</code> <p>Worker instance exported as 'worker' from the module</p> <p>Raises:</p> Type Description <code>ImportError</code> <p>If the module cannot be loaded</p> <code>AttributeError</code> <p>If the module does not export a 'worker' attribute</p> Source code in <code>src/aimq/worker.py</code> <pre><code>@classmethod\ndef load(cls, worker_path: Path) -&gt; \"Worker\":\n    \"\"\"Load a worker instance from a Python file.\n\n    Args:\n        worker_path: Path to the Python file containing the worker instance\n\n    Returns:\n        Worker instance exported as 'worker' from the module\n\n    Raises:\n        ImportError: If the module cannot be loaded\n        AttributeError: If the module does not export a 'worker' attribute\n    \"\"\"\n    module = load_module(worker_path)\n\n    if not hasattr(module, \"worker\"):\n        raise AttributeError(f\"Module {worker_path} does not export a 'worker' attribute\")\n\n    worker: Worker = module.worker\n    worker.logger.info(f\"Tasks loaded from file {worker_path}\")\n\n    return worker\n</code></pre>"},{"location":"reference/aimq/worker/#aimq.worker.Worker.log","title":"<code>log(block=True)</code>","text":"<p>Print log events from the logger.</p> <p>Parameters:</p> Name Type Description Default <code>block</code> <code>bool</code> <p>If True, block until events are available</p> <code>True</code> Source code in <code>src/aimq/worker.py</code> <pre><code>def log(self, block: bool = True) -&gt; None:\n    \"\"\"Print log events from the logger.\n\n    Args:\n        block: If True, block until events are available\n    \"\"\"\n    self.logger.print(block=block, level=self.log_level)\n</code></pre>"},{"location":"reference/aimq/worker/#aimq.worker.Worker.send","title":"<code>send(queue, data, delay=None)</code>","text":"<p>Send data to a queue.</p> <p>Parameters:</p> Name Type Description Default <code>queue</code> <code>str</code> <p>Name of the queue to send data to</p> required <code>data</code> <code>dict[str, Any]</code> <p>Data to send</p> required <code>delay</code> <code>int | None</code> <p>Optional delay in seconds before sending the data</p> <code>None</code> Source code in <code>src/aimq/worker.py</code> <pre><code>def send(self, queue: str, data: dict[str, Any], delay: int | None = None) -&gt; int:\n    \"\"\"Send data to a queue.\n\n    Args:\n        queue: Name of the queue to send data to\n        data: Data to send\n        delay: Optional delay in seconds before sending the data\n    \"\"\"\n    return self.queues[queue].send(data, delay)\n</code></pre>"},{"location":"reference/aimq/worker/#aimq.worker.Worker.start","title":"<code>start(block=True)</code>","text":"<p>Start processing tasks in an endless loop.</p> <p>Parameters:</p> Name Type Description Default <code>block</code> <code>bool</code> <p>If True, block until events are available</p> <code>True</code> Source code in <code>src/aimq/worker.py</code> <pre><code>def start(self, block: bool = True) -&gt; None:\n    \"\"\"Start processing tasks in an endless loop.\n\n    Args:\n        block: If True, block until events are available\n    \"\"\"\n    if self.thread and self.thread.is_alive():\n        return\n\n    self.is_running.set()\n    self.thread = WorkerThread(\n        self.queues, self.logger, self.is_running, idle_wait=self.idle_wait\n    )\n    self.thread.start()\n\n    if block:\n        self.log(block=block)\n</code></pre>"},{"location":"reference/aimq/worker/#aimq.worker.Worker.stop","title":"<code>stop()</code>","text":"<p>Stop processing tasks and clear job history.</p> Source code in <code>src/aimq/worker.py</code> <pre><code>def stop(self) -&gt; None:\n    \"\"\"Stop processing tasks and clear job history.\"\"\"\n    if self.is_running.is_set():\n        self.is_running.clear()\n        if self.thread:\n            self.thread.join()\n            self.thread = None\n        self.logger.info(\"Worker stopped\")\n</code></pre>"},{"location":"reference/aimq/worker/#aimq.worker.Worker.task","title":"<code>task(*, queue=None, timeout=300, tags=None, delete_on_finish=False)</code>","text":"<p>Decorator to register a function that returns a Runnable with a queue.</p> <p>Parameters:</p> Name Type Description Default <code>queue</code> <code>str | None</code> <p>Name of the queue to get jobs from</p> <code>None</code> <code>timeout</code> <code>int</code> <p>Maximum time in seconds for a task to complete. If 0, messages will be popped instead of read</p> <code>300</code> <code>delete_on_finish</code> <code>bool</code> <p>Whether to delete (True) or archive (False) jobs after processing</p> <code>False</code> <code>tags</code> <code>List[str] | None</code> <p>Optional list of tags to associate with the queue</p> <code>None</code> Source code in <code>src/aimq/worker.py</code> <pre><code>def task(\n    self,\n    *,\n    queue: str | None = None,\n    timeout: int = 300,\n    tags: List[str] | None = None,\n    delete_on_finish: bool = False,\n) -&gt; Callable:\n    \"\"\"Decorator to register a function that returns a Runnable with a queue.\n\n    Args:\n        queue: Name of the queue to get jobs from\n        timeout: Maximum time in seconds for a task to complete. If 0, messages will be popped instead of read\n        delete_on_finish: Whether to delete (True) or archive (False) jobs after processing\n        tags: Optional list of tags to associate with the queue\n    \"\"\"\n\n    def decorator(func: Callable) -&gt; Callable:\n        @wraps(func)\n        def wrapper(*args: Any, **kwargs: Any) -&gt; Any:\n            return func(*args, **kwargs)\n\n        self.assign(\n            RunnableLambda(func, name=(queue or func.__name__)),\n            timeout=timeout,\n            delete_on_finish=delete_on_finish,\n            tags=tags,\n        )\n        return wrapper\n\n    return decorator\n</code></pre>"},{"location":"reference/aimq/worker/#aimq.worker.Worker.work","title":"<code>work(queue)</code>","text":"<p>Process a job from a queue.</p> <p>Parameters:</p> Name Type Description Default <code>queue</code> <code>str</code> <p>Name of the queue to process a job from</p> required Source code in <code>src/aimq/worker.py</code> <pre><code>def work(self, queue: str) -&gt; Any:\n    \"\"\"Process a job from a queue.\n\n    Args:\n        queue: Name of the queue to process a job from\n    \"\"\"\n    return self.queues[queue].work()\n</code></pre>"},{"location":"reference/aimq/worker/#aimq.worker.WorkerThread","title":"<code>WorkerThread(queues, logger, running, idle_wait=1.0)</code>","text":"<p>               Bases: <code>Thread</code></p> <p>A thread that processes jobs from multiple queues.</p> <p>Parameters:</p> Name Type Description Default <code>queues</code> <code>OrderedDict[str, Queue]</code> <p>Ordered dictionary of queue name to Queue instance mappings</p> required <code>logger</code> <code>Logger</code> <p>Logger instance for recording worker activities</p> required <code>running</code> <code>Event</code> <p>Threading event to control the worker's execution</p> required <code>idle_wait</code> <code>float</code> <p>Time in seconds to wait when no jobs are found</p> <code>1.0</code> <p>Attributes:</p> Name Type Description <code>queues</code> <p>The queues to process jobs from</p> <code>logger</code> <p>Logger instance</p> <code>running</code> <p>Threading event controlling execution</p> <code>idle_wait</code> <p>Sleep duration when idle</p> Source code in <code>src/aimq/worker.py</code> <pre><code>def __init__(\n    self,\n    queues: OrderedDict[str, Queue],\n    logger: Logger,\n    running: threading.Event,\n    idle_wait: float = 1.0,\n):\n    super().__init__()\n    self.queues = queues\n    self.logger = logger\n    self.running = running\n    self.idle_wait = idle_wait\n</code></pre>"},{"location":"reference/aimq/worker/#aimq.worker.WorkerThread-attributes","title":"Attributes","text":""},{"location":"reference/aimq/worker/#aimq.worker.WorkerThread.idle_wait","title":"<code>idle_wait = idle_wait</code>  <code>instance-attribute</code>","text":""},{"location":"reference/aimq/worker/#aimq.worker.WorkerThread.logger","title":"<code>logger = logger</code>  <code>instance-attribute</code>","text":""},{"location":"reference/aimq/worker/#aimq.worker.WorkerThread.queues","title":"<code>queues = queues</code>  <code>instance-attribute</code>","text":""},{"location":"reference/aimq/worker/#aimq.worker.WorkerThread.running","title":"<code>running = running</code>  <code>instance-attribute</code>","text":""},{"location":"reference/aimq/worker/#aimq.worker.WorkerThread-functions","title":"Functions","text":""},{"location":"reference/aimq/worker/#aimq.worker.WorkerThread.run","title":"<code>run()</code>","text":"<p>Start the worker thread.</p> Source code in <code>src/aimq/worker.py</code> <pre><code>def run(self) -&gt; None:\n    \"\"\"Start the worker thread.\"\"\"\n    self.logger.info(\"Worker thread started\")\n\n    while self.running.is_set():\n        try:\n            found_jobs = False\n            for queue in self.queues.values():\n                if not self.running.is_set():\n                    break\n\n                # work next job in queue\n                try:\n                    found_jobs = found_jobs or bool(queue.work())\n                except RuntimeError as e:\n                    self.logger.error(f\"Runtime error in queue {queue.name}\", {\"error\": str(e)})\n\n            if not found_jobs:\n                self.logger.debug(\"No jobs found, waiting...\")\n                time.sleep(self.idle_wait)\n\n        except Exception as e:\n            self.logger.critical(\n                \"Worker thread encountered an unhandled error\", {\"error\": str(e)}\n            )\n            self.running.clear()\n</code></pre>"},{"location":"reference/aimq/worker/#aimq.worker-functions","title":"Functions","text":""},{"location":"reference/aimq/clients/","title":"aimq.clients","text":""},{"location":"reference/aimq/clients/#aimq.clients","title":"<code>aimq.clients</code>","text":""},{"location":"reference/aimq/clients/mistral/","title":"aimq.clients.mistral","text":""},{"location":"reference/aimq/clients/mistral/#aimq.clients.mistral","title":"<code>aimq.clients.mistral</code>","text":""},{"location":"reference/aimq/clients/mistral/#aimq.clients.mistral-attributes","title":"Attributes","text":""},{"location":"reference/aimq/clients/mistral/#aimq.clients.mistral.mistral","title":"<code>mistral = MistralClient()</code>  <code>module-attribute</code>","text":""},{"location":"reference/aimq/clients/mistral/#aimq.clients.mistral-classes","title":"Classes","text":""},{"location":"reference/aimq/clients/mistral/#aimq.clients.mistral.MistralClient","title":"<code>MistralClient()</code>","text":"<p>A wrapper class for Mistral operations.</p> <p>Initialize the Mistral client.</p> Source code in <code>src/aimq/clients/mistral.py</code> <pre><code>def __init__(self):\n    \"\"\"Initialize the Mistral client.\"\"\"\n    self._client: Optional[Mistral] = None\n</code></pre>"},{"location":"reference/aimq/clients/mistral/#aimq.clients.mistral.MistralClient-attributes","title":"Attributes","text":""},{"location":"reference/aimq/clients/mistral/#aimq.clients.mistral.MistralClient.client","title":"<code>client</code>  <code>property</code>","text":"<p>Get or create the Mistral client.</p> <p>Returns:</p> Name Type Description <code>Mistral</code> <code>Mistral</code> <p>Configured Mistral client</p> <p>Raises:</p> Type Description <code>MistralError</code> <p>If Mistral is not properly configured</p>"},{"location":"reference/aimq/clients/mistral/#aimq.clients.mistral.MistralClient-functions","title":"Functions","text":""},{"location":"reference/aimq/clients/mistral/#aimq.clients.mistral.MistralError","title":"<code>MistralError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception for Mistral-related errors.</p>"},{"location":"reference/aimq/clients/supabase/","title":"aimq.clients.supabase","text":""},{"location":"reference/aimq/clients/supabase/#aimq.clients.supabase","title":"<code>aimq.clients.supabase</code>","text":""},{"location":"reference/aimq/clients/supabase/#aimq.clients.supabase-attributes","title":"Attributes","text":""},{"location":"reference/aimq/clients/supabase/#aimq.clients.supabase.supabase","title":"<code>supabase = SupabaseClient()</code>  <code>module-attribute</code>","text":""},{"location":"reference/aimq/clients/supabase/#aimq.clients.supabase-classes","title":"Classes","text":""},{"location":"reference/aimq/clients/supabase/#aimq.clients.supabase.SupabaseClient","title":"<code>SupabaseClient()</code>","text":"<p>A wrapper class for Supabase operations.</p> <p>Initialize the Supabase client.</p> Source code in <code>src/aimq/clients/supabase.py</code> <pre><code>def __init__(self):\n    \"\"\"Initialize the Supabase client.\"\"\"\n    self._client: Optional[Client] = None\n</code></pre>"},{"location":"reference/aimq/clients/supabase/#aimq.clients.supabase.SupabaseClient-attributes","title":"Attributes","text":""},{"location":"reference/aimq/clients/supabase/#aimq.clients.supabase.SupabaseClient.client","title":"<code>client</code>  <code>property</code>","text":"<p>Get or create the Supabase client.</p> <p>Returns:</p> Name Type Description <code>Client</code> <code>Client</code> <p>Configured Supabase client</p> <p>Raises:</p> Type Description <code>SupabaseError</code> <p>If Supabase is not properly configured</p>"},{"location":"reference/aimq/clients/supabase/#aimq.clients.supabase.SupabaseClient-functions","title":"Functions","text":""},{"location":"reference/aimq/clients/supabase/#aimq.clients.supabase.SupabaseError","title":"<code>SupabaseError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception for Supabase-related errors.</p>"},{"location":"reference/aimq/commands/","title":"aimq.commands","text":""},{"location":"reference/aimq/commands/#aimq.commands","title":"<code>aimq.commands</code>","text":"<p>AIMQ command line interface.</p>"},{"location":"reference/aimq/commands/#aimq.commands-attributes","title":"Attributes","text":""},{"location":"reference/aimq/commands/#aimq.commands.app","title":"<code>app = typer.Typer(no_args_is_help=True)</code>  <code>module-attribute</code>","text":""},{"location":"reference/aimq/commands/disable/","title":"aimq.commands.disable","text":""},{"location":"reference/aimq/commands/disable/#aimq.commands.disable","title":"<code>aimq.commands.disable</code>","text":"<p>Command for disabling PGMQ in Supabase.</p>"},{"location":"reference/aimq/commands/disable/#aimq.commands.disable-classes","title":"Classes","text":""},{"location":"reference/aimq/commands/disable/#aimq.commands.disable-functions","title":"Functions","text":""},{"location":"reference/aimq/commands/disable/#aimq.commands.disable.disable","title":"<code>disable()</code>","text":"<p>Disable PGMQ in Supabase by removing pgmq_public from API schemas.</p> Source code in <code>src/aimq/commands/disable.py</code> <pre><code>def disable() -&gt; None:\n    \"\"\"Disable PGMQ in Supabase by removing pgmq_public from API schemas.\"\"\"\n    try:\n        config = SupabaseConfig(ProjectPath())\n        config.disable()\n        typer.echo(\"Successfully disabled PGMQ in Supabase config\")\n    except Exception as e:\n        typer.echo(f\"Failed to disable PGMQ: {str(e)}\", err=True)\n        raise typer.Exit(1)\n</code></pre>"},{"location":"reference/aimq/commands/enable/","title":"aimq.commands.enable","text":""},{"location":"reference/aimq/commands/enable/#aimq.commands.enable","title":"<code>aimq.commands.enable</code>","text":"<p>Command for enabling PGMQ in Supabase.</p>"},{"location":"reference/aimq/commands/enable/#aimq.commands.enable-classes","title":"Classes","text":""},{"location":"reference/aimq/commands/enable/#aimq.commands.enable-functions","title":"Functions","text":""},{"location":"reference/aimq/commands/enable/#aimq.commands.enable.enable","title":"<code>enable()</code>","text":"<p>Enable PGMQ in Supabase by adding pgmq_public to API schemas.</p> Source code in <code>src/aimq/commands/enable.py</code> <pre><code>def enable() -&gt; None:\n    \"\"\"Enable PGMQ in Supabase by adding pgmq_public to API schemas.\"\"\"\n    try:\n        config = SupabaseConfig(ProjectPath())\n        config.enable()\n        typer.echo(\"Successfully enabled PGMQ in Supabase config\")\n    except Exception as e:\n        typer.echo(f\"Failed to enable PGMQ: {str(e)}\", err=True)\n        raise typer.Exit(1)\n</code></pre>"},{"location":"reference/aimq/commands/init/","title":"aimq.commands.init","text":""},{"location":"reference/aimq/commands/init/#aimq.commands.init","title":"<code>aimq.commands.init</code>","text":"<p>Command for initializing a new AIMQ project.</p> <p>This module provides functionality to initialize a new AIMQ project with the required directory structure and configuration files.</p>"},{"location":"reference/aimq/commands/init/#aimq.commands.init-attributes","title":"Attributes","text":""},{"location":"reference/aimq/commands/init/#aimq.commands.init.console","title":"<code>console = Console()</code>  <code>module-attribute</code>","text":""},{"location":"reference/aimq/commands/init/#aimq.commands.init-classes","title":"Classes","text":""},{"location":"reference/aimq/commands/init/#aimq.commands.init-functions","title":"Functions","text":""},{"location":"reference/aimq/commands/init/#aimq.commands.init.init","title":"<code>init(directory=typer.Argument(None, help='Directory to initialize AIMQ project in'), supabase=typer.Option(None, '--supabase', help='Setup Supabase configuration'), docker=typer.Option(None, '--docker', help='Setup Docker files'), all_components=typer.Option(False, '--all', help='Setup all components'), minimal=typer.Option(False, '--minimal', help='Minimal setup (only tasks.py)'))</code>","text":"<p>Initialize a new AIMQ project in the specified directory.</p> <p>Creates the required directory structure and configuration files for a new AIMQ project. If no directory is specified, initializes in the current directory.</p> <p>If no flags are provided, you'll be prompted interactively to choose components.</p> <p>Parameters:</p> Name Type Description Default <code>directory</code> <code>Optional[str]</code> <p>Optional directory path to initialize project in. Defaults to current directory.</p> <code>Argument(None, help='Directory to initialize AIMQ project in')</code> <code>supabase</code> <code>bool</code> <p>Setup Supabase configuration and migrations.</p> <code>Option(None, '--supabase', help='Setup Supabase configuration')</code> <code>docker</code> <code>bool</code> <p>Setup Docker and docker-compose files.</p> <code>Option(None, '--docker', help='Setup Docker files')</code> <code>all_components</code> <code>bool</code> <p>Setup all available components.</p> <code>Option(False, '--all', help='Setup all components')</code> <code>minimal</code> <code>bool</code> <p>Create only the basic tasks.py template (no Supabase or Docker).</p> <code>Option(False, '--minimal', help='Minimal setup (only tasks.py)')</code> <p>Raises:</p> Type Description <code>Exit</code> <p>If project initialization fails, exits with status code 1.</p> <code>FileNotFoundError</code> <p>If template files cannot be found.</p> <code>PermissionError</code> <p>If directory creation or file operations fail due to permissions.</p> Source code in <code>src/aimq/commands/init.py</code> <pre><code>def init(\n    directory: Optional[str] = typer.Argument(None, help=\"Directory to initialize AIMQ project in\"),\n    supabase: bool = typer.Option(None, \"--supabase\", help=\"Setup Supabase configuration\"),\n    docker: bool = typer.Option(None, \"--docker\", help=\"Setup Docker files\"),\n    all_components: bool = typer.Option(False, \"--all\", help=\"Setup all components\"),\n    minimal: bool = typer.Option(False, \"--minimal\", help=\"Minimal setup (only tasks.py)\"),\n) -&gt; None:\n    \"\"\"Initialize a new AIMQ project in the specified directory.\n\n    Creates the required directory structure and configuration files for a new AIMQ project.\n    If no directory is specified, initializes in the current directory.\n\n    If no flags are provided, you'll be prompted interactively to choose components.\n\n    Args:\n        directory: Optional directory path to initialize project in. Defaults to current directory.\n        supabase: Setup Supabase configuration and migrations.\n        docker: Setup Docker and docker-compose files.\n        all_components: Setup all available components.\n        minimal: Create only the basic tasks.py template (no Supabase or Docker).\n\n    Raises:\n        typer.Exit: If project initialization fails, exits with status code 1.\n        FileNotFoundError: If template files cannot be found.\n        PermissionError: If directory creation or file operations fail due to permissions.\n    \"\"\"\n    try:\n        # Convert directory to absolute Path\n        project_dir = Path(directory or \".\").resolve()\n\n        console.print(\n            Panel.fit(\n                f\"[bold cyan]Initializing AIMQ project[/bold cyan]\\n\"\n                f\"Location: [yellow]{project_dir}[/yellow]\",\n                border_style=\"cyan\",\n            )\n        )\n\n        # Create project directory\n        project_dir.mkdir(parents=True, exist_ok=True)\n\n        # Determine what to setup\n        setup_supabase_flag = supabase\n        setup_docker_flag = docker\n\n        # Handle --all flag\n        if all_components:\n            setup_supabase_flag = True\n            setup_docker_flag = True\n\n        # Handle --minimal flag\n        if minimal:\n            setup_supabase_flag = False\n            setup_docker_flag = False\n\n        # If no flags provided and not minimal, ask interactively\n        if supabase is None and docker is None and not all_components and not minimal:\n            console.print(\"\\n[bold]Select components to setup:[/bold]\")\n            setup_supabase_flag = typer.confirm(\"  Setup Supabase configuration?\", default=True)\n            setup_docker_flag = typer.confirm(\"  Generate Docker files?\", default=True)\n\n        # Show what will be created\n        console.print(\"\\n[bold]Components to setup:[/bold]\")\n        console.print(\"  \u2022 tasks.py template: [green]\u2713[/green]\")\n        console.print(\"  \u2022 .env.example: [green]\u2713[/green]\")\n        supabase_status = \"green]\u2713\" if setup_supabase_flag else \"dim]\u2717\"\n        console.print(f\"  \u2022 Supabase config: [{supabase_status}[/]\")\n        docker_status = \"green]\u2713\" if setup_docker_flag else \"dim]\u2717\"\n        console.print(f\"  \u2022 Docker files: [{docker_status}[/]\")\n        console.print()\n\n        with Progress(\n            SpinnerColumn(),\n            TextColumn(\"[progress.description]{task.description}\"),\n            console=console,\n        ) as progress:\n            # Always setup tasks template and .env.example\n            task = progress.add_task(\"Setting up project files...\", total=None)\n            setup_tasks_template(project_dir)\n            setup_env_template(project_dir)\n            progress.update(task, completed=True)\n\n            # Setup Supabase if requested\n            if setup_supabase_flag:\n                task = progress.add_task(\"Configuring Supabase...\", total=None)\n                setup_supabase(project_dir)\n                progress.update(task, completed=True)\n\n            # Setup Docker if requested\n            if setup_docker_flag:\n                task = progress.add_task(\"Creating Docker files...\", total=None)\n                setup_docker(project_dir)\n                progress.update(task, completed=True)\n\n        # Show success message with next steps\n        console.print()\n        console.print(\n            Panel.fit(\n                \"[bold green]\u2713 Project initialized successfully![/bold green]\\n\\n\"\n                \"[bold]Next steps:[/bold]\\n\"\n                f\"1. cd {project_dir.name if directory else '.'}\\n\"\n                \"2. Copy .env.example to .env and configure your Supabase credentials\\n\"\n                \"3. Edit tasks.py to define your task queues\\n\"\n                f\"4. Run: [cyan]{'uvx aimq start' if not docker else 'docker-compose up'}[/cyan]\",\n                border_style=\"green\",\n            )\n        )\n\n    except Exception as e:\n        console.print(f\"\\n[bold red]Failed to initialize AIMQ project:[/bold red] {str(e)}\")\n        raise typer.Exit(1)\n</code></pre>"},{"location":"reference/aimq/commands/init/#aimq.commands.init.setup_docker","title":"<code>setup_docker(project_dir)</code>","text":"<p>Set up Docker configuration files.</p> <p>Parameters:</p> Name Type Description Default <code>project_dir</code> <code>Path</code> <p>The project directory path.</p> required Source code in <code>src/aimq/commands/init.py</code> <pre><code>def setup_docker(project_dir: Path) -&gt; None:\n    \"\"\"Set up Docker configuration files.\n\n    Args:\n        project_dir: The project directory path.\n    \"\"\"\n    templates_dir = Path(__file__).parent / \"shared\" / \"templates\" / \"docker\"\n\n    # Copy Dockerfile\n    dockerfile = project_dir / \"Dockerfile\"\n    if not dockerfile.exists():\n        template_dockerfile = templates_dir / \"Dockerfile.template\"\n        dockerfile.write_text(template_dockerfile.read_text())\n        console.print(\"\u2713 Created Dockerfile\", style=\"green\")\n    else:\n        console.print(\"  Dockerfile already exists, skipping\", style=\"yellow\")\n\n    # Copy docker-compose.yml\n    compose_file = project_dir / \"docker-compose.yml\"\n    if not compose_file.exists():\n        template_compose = templates_dir / \"docker-compose.yml.template\"\n        compose_file.write_text(template_compose.read_text())\n        console.print(\"\u2713 Created docker-compose.yml\", style=\"green\")\n    else:\n        console.print(\"  docker-compose.yml already exists, skipping\", style=\"yellow\")\n\n    # Copy .dockerignore\n    dockerignore = project_dir / \".dockerignore\"\n    if not dockerignore.exists():\n        template_dockerignore = templates_dir / \".dockerignore.template\"\n        dockerignore.write_text(template_dockerignore.read_text())\n        console.print(\"\u2713 Created .dockerignore\", style=\"green\")\n    else:\n        console.print(\"  .dockerignore already exists, skipping\", style=\"yellow\")\n</code></pre>"},{"location":"reference/aimq/commands/init/#aimq.commands.init.setup_env_template","title":"<code>setup_env_template(project_dir)</code>","text":"<p>Copy the .env.example template to the project directory.</p> <p>Parameters:</p> Name Type Description Default <code>project_dir</code> <code>Path</code> <p>The project directory path.</p> required Source code in <code>src/aimq/commands/init.py</code> <pre><code>def setup_env_template(project_dir: Path) -&gt; None:\n    \"\"\"Copy the .env.example template to the project directory.\n\n    Args:\n        project_dir: The project directory path.\n    \"\"\"\n    env_example_file = project_dir / \".env.example\"\n    if not env_example_file.exists():\n        template_env = Path(__file__).parent / \"shared\" / \"templates\" / \"env.example.template\"\n        env_example_file.write_text(template_env.read_text())\n        console.print(\"\u2713 Created .env.example\", style=\"green\")\n    else:\n        console.print(\"  .env.example already exists, skipping\", style=\"yellow\")\n</code></pre>"},{"location":"reference/aimq/commands/init/#aimq.commands.init.setup_supabase","title":"<code>setup_supabase(project_dir)</code>","text":"<p>Set up Supabase configuration and migrations.</p> <p>Parameters:</p> Name Type Description Default <code>project_dir</code> <code>Path</code> <p>The project directory path.</p> required Source code in <code>src/aimq/commands/init.py</code> <pre><code>def setup_supabase(project_dir: Path) -&gt; None:\n    \"\"\"Set up Supabase configuration and migrations.\n\n    Args:\n        project_dir: The project directory path.\n    \"\"\"\n    # Create Supabase directories\n    (project_dir / \"supabase\").mkdir(exist_ok=True)\n    (project_dir / \"supabase\" / \"migrations\").mkdir(exist_ok=True)\n\n    # Initialize project path with the target directory\n    project_path = ProjectPath(project_dir)\n\n    # Create and configure Supabase\n    config = SupabaseConfig(project_path)\n    config.enable()  # Ensure pgmq_public is enabled\n\n    # Create setup migration\n    migrations = SupabaseMigrations(project_path)\n    migrations.setup_aimq_migration()\n\n    console.print(\"\u2713 Configured Supabase and created migrations\", style=\"green\")\n</code></pre>"},{"location":"reference/aimq/commands/init/#aimq.commands.init.setup_tasks_template","title":"<code>setup_tasks_template(project_dir)</code>","text":"<p>Copy the tasks.py template to the project directory.</p> <p>Parameters:</p> Name Type Description Default <code>project_dir</code> <code>Path</code> <p>The project directory path.</p> required Source code in <code>src/aimq/commands/init.py</code> <pre><code>def setup_tasks_template(project_dir: Path) -&gt; None:\n    \"\"\"Copy the tasks.py template to the project directory.\n\n    Args:\n        project_dir: The project directory path.\n    \"\"\"\n    tasks_file = project_dir / \"tasks.py\"\n    if not tasks_file.exists():\n        template_tasks = Path(__file__).parent / \"shared\" / \"templates\" / \"tasks.py\"\n        tasks_file.write_text(template_tasks.read_text())\n        console.print(\"\u2713 Created tasks.py template\", style=\"green\")\n    else:\n        console.print(\"  tasks.py already exists, skipping\", style=\"yellow\")\n</code></pre>"},{"location":"reference/aimq/commands/send/","title":"aimq.commands.send","text":""},{"location":"reference/aimq/commands/send/#aimq.commands.send","title":"<code>aimq.commands.send</code>","text":"<p>Command for sending jobs to a queue.</p>"},{"location":"reference/aimq/commands/send/#aimq.commands.send-classes","title":"Classes","text":""},{"location":"reference/aimq/commands/send/#aimq.commands.send.Provider","title":"<code>Provider</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p>"},{"location":"reference/aimq/commands/send/#aimq.commands.send.Provider-attributes","title":"Attributes","text":""},{"location":"reference/aimq/commands/send/#aimq.commands.send.Provider.SUPABASE","title":"<code>SUPABASE = 'supabase'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/commands/send/#aimq.commands.send-functions","title":"Functions","text":""},{"location":"reference/aimq/commands/send/#aimq.commands.send.send","title":"<code>send(queue_name=typer.Argument(..., help='Name of the queue to send the job to'), data=typer.Argument(..., help='JSON data to send as the job payload'), delay=typer.Option(None, '--delay', '-d', help='Delay in seconds before the job becomes visible'), provider=typer.Option(Provider.SUPABASE, '--provider', '-p', help='Queue provider to use', case_sensitive=False))</code>","text":"<p>Send a job to a queue with JSON data.</p> Source code in <code>src/aimq/commands/send.py</code> <pre><code>def send(\n    queue_name: str = typer.Argument(\n        ...,\n        help=\"Name of the queue to send the job to\",\n    ),\n    data: str = typer.Argument(\n        ...,\n        help=\"JSON data to send as the job payload\",\n    ),\n    delay: Optional[int] = typer.Option(\n        None,\n        \"--delay\",\n        \"-d\",\n        help=\"Delay in seconds before the job becomes visible\",\n    ),\n    provider: Provider = typer.Option(\n        Provider.SUPABASE,\n        \"--provider\",\n        \"-p\",\n        help=\"Queue provider to use\",\n        case_sensitive=False,\n    ),\n) -&gt; None:\n    \"\"\"Send a job to a queue with JSON data.\"\"\"\n    try:\n        # Parse the JSON data\n        job_data = json.loads(data)\n\n        # Create provider instance based on selection\n        if provider == Provider.SUPABASE:\n            queue_provider = SupabaseQueueProvider()\n        else:\n            raise ValueError(f\"Unsupported provider: {provider}\")\n\n        # Send the job\n        job_id = queue_provider.send(queue_name, job_data, delay=delay)\n\n        typer.echo(\n            f\"Successfully sent job {job_id} to queue '{queue_name}' using {provider} provider\"\n        )\n\n    except json.JSONDecodeError:\n        typer.echo(\"Error: Invalid JSON data\", err=True)\n        raise typer.Exit(1)\n    except Exception as e:\n        typer.echo(f\"Error: {str(e)}\", err=True)\n        raise typer.Exit(1)\n</code></pre>"},{"location":"reference/aimq/commands/start/","title":"aimq.commands.start","text":""},{"location":"reference/aimq/commands/start/#aimq.commands.start","title":"<code>aimq.commands.start</code>","text":"<p>Command for starting the AIMQ worker.</p>"},{"location":"reference/aimq/commands/start/#aimq.commands.start-attributes","title":"Attributes","text":""},{"location":"reference/aimq/commands/start/#aimq.commands.start-classes","title":"Classes","text":""},{"location":"reference/aimq/commands/start/#aimq.commands.start-functions","title":"Functions","text":""},{"location":"reference/aimq/commands/start/#aimq.commands.start.load_worker_safely","title":"<code>load_worker_safely(worker_path)</code>","text":"<p>Load worker from path with error handling.</p> <p>Parameters:</p> Name Type Description Default <code>worker_path</code> <code>Path</code> <p>Path to worker file.</p> required <p>Returns:</p> Type Description <code>Worker</code> <p>Loaded Worker instance.</p> <p>Raises:</p> Type Description <code>Exit</code> <p>If loading fails.</p> Source code in <code>src/aimq/commands/start.py</code> <pre><code>def load_worker_safely(worker_path: Path) -&gt; Worker:\n    \"\"\"Load worker from path with error handling.\n\n    Args:\n        worker_path: Path to worker file.\n\n    Returns:\n        Loaded Worker instance.\n\n    Raises:\n        typer.Exit: If loading fails.\n    \"\"\"\n    try:\n        return Worker.load(worker_path)\n    except AttributeError as e:\n        typer.echo(f\"Error loading worker: {e}\", err=True)\n        typer.echo(\n            f\"\\nMake sure {worker_path} exports a 'worker' variable (instance of Worker).\",\n            err=True,\n        )\n        raise typer.Exit(1)\n    except Exception as e:\n        typer.echo(f\"Error loading worker from {worker_path}: {e}\", err=True)\n        raise typer.Exit(1)\n</code></pre>"},{"location":"reference/aimq/commands/start/#aimq.commands.start.resolve_worker_path","title":"<code>resolve_worker_path(worker_path)</code>","text":"<p>Resolve the worker path with fallback logic.</p> <p>Supports: - Local file paths: tasks.py, /path/to/tasks.py - Git URLs: git:user/repo, git:user/repo@branch, git:host/user/repo#path - Environment variable: AIMQ_TASKS</p> <p>Parameters:</p> Name Type Description Default <code>worker_path</code> <code>Optional[str]</code> <p>Optional worker path or git URL provided by user.</p> required <p>Returns:</p> Type Description <code>Path</code> <p>Resolved Path to the worker file.</p> <p>Raises:</p> Type Description <code>GitURLError</code> <p>If git URL is invalid or loading fails.</p> Source code in <code>src/aimq/commands/start.py</code> <pre><code>def resolve_worker_path(worker_path: Optional[str]) -&gt; Path:\n    \"\"\"Resolve the worker path with fallback logic.\n\n    Supports:\n    - Local file paths: tasks.py, /path/to/tasks.py\n    - Git URLs: git:user/repo, git:user/repo@branch, git:host/user/repo#path\n    - Environment variable: AIMQ_TASKS\n\n    Args:\n        worker_path: Optional worker path or git URL provided by user.\n\n    Returns:\n        Resolved Path to the worker file.\n\n    Raises:\n        GitURLError: If git URL is invalid or loading fails.\n    \"\"\"\n    # Check for environment variable first\n    if worker_path is None:\n        worker_path = os.getenv(\"AIMQ_TASKS\")\n\n    # If still None, use config default or current directory\n    if worker_path is None:\n        # Check for WORKER_PATH env var or config default\n        worker_path_obj = Path(config.worker_path)\n\n        # If the config default doesn't exist, try current directory\n        if not worker_path_obj.exists():\n            cwd_tasks = Path.cwd() / \"tasks.py\"\n            if cwd_tasks.exists():\n                worker_path_obj = cwd_tasks\n        return worker_path_obj\n\n    # Check if it's a git URL\n    if is_git_url(worker_path):\n        try:\n            # Check for SSH preference (git operations might need SSH keys)\n            use_ssh = os.getenv(\"AIMQ_USE_SSH\", \"false\").lower() == \"true\"\n            return load_from_git_url(worker_path, use_ssh=use_ssh)\n        except GitURLError as e:\n            typer.echo(f\"Error loading from git URL: {e}\", err=True)\n            typer.echo(\"\\nGit URL format: git:user/repo[@ref][#subdir]\", err=True)\n            typer.echo(\"Examples:\", err=True)\n            typer.echo(\"  git:mycompany/aimq-tasks\", err=True)\n            typer.echo(\"  git:mycompany/aimq-tasks@production\", err=True)\n            typer.echo(\"  git:mycompany/monorepo#services/worker\", err=True)\n            raise typer.Exit(1)\n\n    # Treat as local path\n    return Path(worker_path)\n</code></pre>"},{"location":"reference/aimq/commands/start/#aimq.commands.start.start","title":"<code>start(worker_path=typer.Argument(None, help='Path to tasks.py or git URL (git:user/repo[@ref][#path])'), log_level=typer.Option(LogLevel.INFO, '--log-level', '-l', help='Set the log level (debug, info, warning, error, critical)', case_sensitive=False), debug=typer.Option(False, '--debug', '-d', help='Enable debug logging (shortcut for --log-level debug)'))</code>","text":"<p>Start the AIMQ worker with the specified tasks.</p> <p>Supports local files and git URLs: - Local: aimq start tasks.py - Git URL: aimq start git:user/repo - Git branch: aimq start git:user/repo@production - Git subdir: aimq start git:user/monorepo#services/worker</p> <p>If no worker_path is provided, attempts to use: 1. AIMQ_TASKS environment variable (can be local path or git URL) 2. WORKER_PATH environment variable 3. ./tasks.py in the current directory 4. Config default (usually ./tasks.py)</p> Source code in <code>src/aimq/commands/start.py</code> <pre><code>def start(\n    worker_path: Optional[str] = typer.Argument(\n        None,\n        help=\"Path to tasks.py or git URL (git:user/repo[@ref][#path])\",\n    ),\n    log_level: LogLevel = typer.Option(\n        LogLevel.INFO,\n        \"--log-level\",\n        \"-l\",\n        help=\"Set the log level (debug, info, warning, error, critical)\",\n        case_sensitive=False,\n    ),\n    debug: bool = typer.Option(\n        False,\n        \"--debug\",\n        \"-d\",\n        help=\"Enable debug logging (shortcut for --log-level debug)\",\n    ),\n):\n    \"\"\"Start the AIMQ worker with the specified tasks.\n\n    Supports local files and git URLs:\n    - Local: aimq start tasks.py\n    - Git URL: aimq start git:user/repo\n    - Git branch: aimq start git:user/repo@production\n    - Git subdir: aimq start git:user/monorepo#services/worker\n\n    If no worker_path is provided, attempts to use:\n    1. AIMQ_TASKS environment variable (can be local path or git URL)\n    2. WORKER_PATH environment variable\n    3. ./tasks.py in the current directory\n    4. Config default (usually ./tasks.py)\n    \"\"\"\n    # Resolve and validate worker path\n    resolved_path = resolve_worker_path(worker_path)\n    validate_worker_path(resolved_path)\n    validate_supabase_config()\n\n    # Load worker\n    worker = load_worker_safely(resolved_path)\n    worker.log_level = LogLevel.DEBUG if debug else log_level\n\n    def signal_handler(signum, frame):\n        \"\"\"Handle shutdown signals gracefully.\"\"\"\n        print(\"\")\n        worker.logger.info(\"Shutting down...\")\n        worker.log(block=False)\n        worker.stop()\n        worker.log(block=False)\n        sys.exit(0)\n\n    # Set up signal handlers\n    signal.signal(signal.SIGINT, signal_handler)\n    signal.signal(signal.SIGTERM, signal_handler)\n\n    try:\n        worker.start()\n    except Exception as e:\n        worker.logger.error(f\"Error: {e}\")\n        worker.log(block=False)\n        worker.stop()\n        worker.log(block=False)\n        sys.exit(1)\n</code></pre>"},{"location":"reference/aimq/commands/start/#aimq.commands.start.validate_supabase_config","title":"<code>validate_supabase_config()</code>","text":"<p>Validate that Supabase configuration is present.</p> <p>Raises:</p> Type Description <code>Exit</code> <p>If Supabase config is missing.</p> Source code in <code>src/aimq/commands/start.py</code> <pre><code>def validate_supabase_config() -&gt; None:\n    \"\"\"Validate that Supabase configuration is present.\n\n    Raises:\n        typer.Exit: If Supabase config is missing.\n    \"\"\"\n    if not config.supabase_url or not config.supabase_key:\n        typer.echo(\"Error: Missing Supabase configuration\", err=True)\n        typer.echo(\"\\nPlease set the following environment variables:\", err=True)\n        if not config.supabase_url:\n            typer.echo(\"  - SUPABASE_URL\", err=True)\n        if not config.supabase_key:\n            typer.echo(\"  - SUPABASE_KEY\", err=True)\n        typer.echo(\"\\nYou can create a .env file with: uvx aimq init\", err=True)\n        raise typer.Exit(1)\n</code></pre>"},{"location":"reference/aimq/commands/start/#aimq.commands.start.validate_worker_path","title":"<code>validate_worker_path(worker_path)</code>","text":"<p>Validate that the worker path exists.</p> <p>Parameters:</p> Name Type Description Default <code>worker_path</code> <code>Path</code> <p>Path to validate.</p> required <p>Raises:</p> Type Description <code>Exit</code> <p>If path doesn't exist.</p> Source code in <code>src/aimq/commands/start.py</code> <pre><code>def validate_worker_path(worker_path: Path) -&gt; None:\n    \"\"\"Validate that the worker path exists.\n\n    Args:\n        worker_path: Path to validate.\n\n    Raises:\n        typer.Exit: If path doesn't exist.\n    \"\"\"\n    if not worker_path.exists():\n        typer.echo(f\"Error: Worker file not found: {worker_path}\", err=True)\n        typer.echo(\"\\nPlease ensure you have a tasks.py file in your current directory.\", err=True)\n        typer.echo(\"You can create one with: uvx aimq init\", err=True)\n        raise typer.Exit(1)\n</code></pre>"},{"location":"reference/aimq/commands/shared/","title":"aimq.commands.shared","text":""},{"location":"reference/aimq/commands/shared/#aimq.commands.shared","title":"<code>aimq.commands.shared</code>","text":""},{"location":"reference/aimq/commands/shared/config/","title":"aimq.commands.shared.config","text":""},{"location":"reference/aimq/commands/shared/config/#aimq.commands.shared.config","title":"<code>aimq.commands.shared.config</code>","text":""},{"location":"reference/aimq/commands/shared/config/#aimq.commands.shared.config-classes","title":"Classes","text":""},{"location":"reference/aimq/commands/shared/config/#aimq.commands.shared.config.SupabaseConfig","title":"<code>SupabaseConfig(project_path)</code>","text":"<p>Initialize SupabaseConfig with a ProjectPath instance.</p> <p>Parameters:</p> Name Type Description Default <code>project_path</code> <code>ProjectPath</code> <p>Instance of ProjectPath for path management</p> required Source code in <code>src/aimq/commands/shared/config.py</code> <pre><code>def __init__(self, project_path: ProjectPath):\n    \"\"\"\n    Initialize SupabaseConfig with a ProjectPath instance.\n\n    Args:\n        project_path (ProjectPath): Instance of ProjectPath for path management\n    \"\"\"\n    self.project_path = project_path\n    self._config: TOMLDocument = tomlkit.document()\n</code></pre>"},{"location":"reference/aimq/commands/shared/config/#aimq.commands.shared.config.SupabaseConfig-attributes","title":"Attributes","text":""},{"location":"reference/aimq/commands/shared/config/#aimq.commands.shared.config.SupabaseConfig.config","title":"<code>config</code>  <code>property</code>","text":"<p>Get the config, loading it if not already loaded.</p> <p>Returns:</p> Name Type Description <code>TOMLDocument</code> <code>TOMLDocument</code> <p>The loaded configuration</p>"},{"location":"reference/aimq/commands/shared/config/#aimq.commands.shared.config.SupabaseConfig.project_path","title":"<code>project_path = project_path</code>  <code>instance-attribute</code>","text":""},{"location":"reference/aimq/commands/shared/config/#aimq.commands.shared.config.SupabaseConfig-functions","title":"Functions","text":""},{"location":"reference/aimq/commands/shared/config/#aimq.commands.shared.config.SupabaseConfig.disable","title":"<code>disable()</code>","text":"<p>Disable PGMQ in Supabase by removing pgmq_public from API schemas</p> Source code in <code>src/aimq/commands/shared/config.py</code> <pre><code>def disable(self) -&gt; None:\n    \"\"\"Disable PGMQ in Supabase by removing pgmq_public from API schemas\"\"\"\n    schemas: items.Array = self.config[\"api\"][\"schemas\"]  # type: ignore\n    if \"pgmq_public\" in schemas:\n        schemas.remove(\"pgmq_public\")\n        self.save()\n</code></pre>"},{"location":"reference/aimq/commands/shared/config/#aimq.commands.shared.config.SupabaseConfig.enable","title":"<code>enable()</code>","text":"<p>Enable PGMQ in Supabase by adding pgmq_public to API schemas</p> Source code in <code>src/aimq/commands/shared/config.py</code> <pre><code>def enable(self) -&gt; None:\n    \"\"\"Enable PGMQ in Supabase by adding pgmq_public to API schemas\"\"\"\n    schemas: items.Array = self.config[\"api\"][\"schemas\"]  # type: ignore\n    if \"pgmq_public\" not in schemas:\n        schemas.append(\"pgmq_public\")\n        self.save()\n</code></pre>"},{"location":"reference/aimq/commands/shared/config/#aimq.commands.shared.config.SupabaseConfig.load","title":"<code>load()</code>","text":"<p>Load the Supabase config from config.toml file. Creates config from template if it doesn't exist. Ensures api.schemas exists in the config.</p> <p>Returns:</p> Name Type Description <code>TOMLDocument</code> <code>TOMLDocument</code> <p>Loaded configuration</p> Source code in <code>src/aimq/commands/shared/config.py</code> <pre><code>def load(self) -&gt; TOMLDocument:\n    \"\"\"\n    Load the Supabase config from config.toml file.\n    Creates config from template if it doesn't exist.\n    Ensures api.schemas exists in the config.\n\n    Returns:\n        TOMLDocument: Loaded configuration\n    \"\"\"\n    if not self.project_path.supabase_config.exists():\n        self._create_from_template()\n\n    with open(self.project_path.supabase_config, \"r\") as f:\n        self._config = tomlkit.load(f)\n\n    # Ensure api.schemas exists\n    if \"api\" not in self._config:\n        self._config.add(\"api\", tomlkit.table())\n\n    api_table: items.Table = self._config[\"api\"]  # type: ignore\n    if \"schemas\" not in api_table:\n        api_table.add(\"schemas\", tomlkit.array())\n\n    return self._config\n</code></pre>"},{"location":"reference/aimq/commands/shared/config/#aimq.commands.shared.config.SupabaseConfig.save","title":"<code>save()</code>","text":"<p>Save the current configuration back to config.toml</p> Source code in <code>src/aimq/commands/shared/config.py</code> <pre><code>def save(self) -&gt; None:\n    \"\"\"Save the current configuration back to config.toml\"\"\"\n    with open(self.project_path.supabase_config, \"w\") as f:\n        tomlkit.dump(self.config, f)\n</code></pre>"},{"location":"reference/aimq/commands/shared/git_loader/","title":"aimq.commands.shared.git_loader","text":""},{"location":"reference/aimq/commands/shared/git_loader/#aimq.commands.shared.git_loader","title":"<code>aimq.commands.shared.git_loader</code>","text":"<p>Git repository loader for remote task files.</p> <p>Supports npm-style git URLs for loading task files from remote repositories: - git:user/repo - GitHub default branch - git:user/repo@branch - Specific branch - git:user/repo#path - Subdirectory in repo - git:github.com/user/repo@tag - Full URL with version</p> <p>Examples:</p> <p>git:mycompany/aimq-tasks git:mycompany/aimq-tasks@production git:mycompany/monorepo#services/worker git:github.com/mycompany/aimq-tasks@v1.0.0</p>"},{"location":"reference/aimq/commands/shared/git_loader/#aimq.commands.shared.git_loader-classes","title":"Classes","text":""},{"location":"reference/aimq/commands/shared/git_loader/#aimq.commands.shared.git_loader.GitURL","title":"<code>GitURL(host, owner, repo, ref=None, subdir=None)</code>  <code>dataclass</code>","text":"<p>Parsed git URL components.</p>"},{"location":"reference/aimq/commands/shared/git_loader/#aimq.commands.shared.git_loader.GitURL-attributes","title":"Attributes","text":""},{"location":"reference/aimq/commands/shared/git_loader/#aimq.commands.shared.git_loader.GitURL.host","title":"<code>host</code>  <code>instance-attribute</code>","text":""},{"location":"reference/aimq/commands/shared/git_loader/#aimq.commands.shared.git_loader.GitURL.owner","title":"<code>owner</code>  <code>instance-attribute</code>","text":""},{"location":"reference/aimq/commands/shared/git_loader/#aimq.commands.shared.git_loader.GitURL.ref","title":"<code>ref = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/commands/shared/git_loader/#aimq.commands.shared.git_loader.GitURL.repo","title":"<code>repo</code>  <code>instance-attribute</code>","text":""},{"location":"reference/aimq/commands/shared/git_loader/#aimq.commands.shared.git_loader.GitURL.subdir","title":"<code>subdir = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/commands/shared/git_loader/#aimq.commands.shared.git_loader.GitURL-functions","title":"Functions","text":""},{"location":"reference/aimq/commands/shared/git_loader/#aimq.commands.shared.git_loader.GitURLError","title":"<code>GitURLError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Error parsing or processing git URL.</p>"},{"location":"reference/aimq/commands/shared/git_loader/#aimq.commands.shared.git_loader-functions","title":"Functions","text":""},{"location":"reference/aimq/commands/shared/git_loader/#aimq.commands.shared.git_loader.build_clone_url","title":"<code>build_clone_url(git_url, use_ssh=False)</code>","text":"<p>Build a full git clone URL from parsed components.</p> <p>Parameters:</p> Name Type Description Default <code>git_url</code> <code>GitURL</code> <p>Parsed GitURL object</p> required <code>use_ssh</code> <code>bool</code> <p>If True, use SSH URL format (git@host:owner/repo)      If False, use HTTPS URL format (https://host/owner/repo)</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>Full git clone URL</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; url = parse_git_url(\"git:user/repo\")\n&gt;&gt;&gt; build_clone_url(url, use_ssh=False)\n'https://github.com/user/repo.git'\n</code></pre> <pre><code>&gt;&gt;&gt; build_clone_url(url, use_ssh=True)\n'git@github.com:user/repo.git'\n</code></pre> Source code in <code>src/aimq/commands/shared/git_loader.py</code> <pre><code>def build_clone_url(git_url: GitURL, use_ssh: bool = False) -&gt; str:\n    \"\"\"Build a full git clone URL from parsed components.\n\n    Args:\n        git_url: Parsed GitURL object\n        use_ssh: If True, use SSH URL format (git@host:owner/repo)\n                 If False, use HTTPS URL format (https://host/owner/repo)\n\n    Returns:\n        Full git clone URL\n\n    Examples:\n        &gt;&gt;&gt; url = parse_git_url(\"git:user/repo\")\n        &gt;&gt;&gt; build_clone_url(url, use_ssh=False)\n        'https://github.com/user/repo.git'\n\n        &gt;&gt;&gt; build_clone_url(url, use_ssh=True)\n        'git@github.com:user/repo.git'\n    \"\"\"\n    if use_ssh:\n        return f\"git@{git_url.host}:{git_url.owner}/{git_url.repo}.git\"\n    else:\n        return f\"https://{git_url.host}/{git_url.owner}/{git_url.repo}.git\"\n</code></pre>"},{"location":"reference/aimq/commands/shared/git_loader/#aimq.commands.shared.git_loader.clone_or_update_repo","title":"<code>clone_or_update_repo(git_url, use_ssh=False)</code>","text":"<p>Clone or update a git repository to the cache.</p> <p>Parameters:</p> Name Type Description Default <code>git_url</code> <code>GitURL</code> <p>Parsed GitURL object</p> required <code>use_ssh</code> <code>bool</code> <p>If True, use SSH for cloning</p> <code>False</code> <p>Returns:</p> Type Description <code>Path</code> <p>Path to the cloned repository</p> <p>Raises:</p> Type Description <code>GitURLError</code> <p>If clone/update fails</p> Source code in <code>src/aimq/commands/shared/git_loader.py</code> <pre><code>def clone_or_update_repo(git_url: GitURL, use_ssh: bool = False) -&gt; Path:\n    \"\"\"Clone or update a git repository to the cache.\n\n    Args:\n        git_url: Parsed GitURL object\n        use_ssh: If True, use SSH for cloning\n\n    Returns:\n        Path to the cloned repository\n\n    Raises:\n        GitURLError: If clone/update fails\n    \"\"\"\n    cache_path = get_cache_path(git_url)\n    clone_url = build_clone_url(git_url, use_ssh=use_ssh)\n\n    try:\n        if cache_path.exists():\n            # Repository already cached, update it\n            # Check if it's a git repo\n            if not (cache_path / \".git\").exists():\n                # Cache corrupted, remove and re-clone\n                shutil.rmtree(cache_path)\n                return _clone_fresh(clone_url, cache_path, git_url.ref)\n\n            # Update existing clone\n            subprocess.run(\n                [\"git\", \"fetch\", \"--all\"],\n                cwd=cache_path,\n                check=True,\n                capture_output=True,\n                text=True,\n            )\n\n            # Checkout the specified ref (or default branch)\n            if git_url.ref:\n                subprocess.run(\n                    [\"git\", \"checkout\", git_url.ref],\n                    cwd=cache_path,\n                    check=True,\n                    capture_output=True,\n                    text=True,\n                )\n                subprocess.run(\n                    [\"git\", \"pull\"],\n                    cwd=cache_path,\n                    check=True,\n                    capture_output=True,\n                    text=True,\n                )\n            else:\n                # Get default branch and checkout\n                result = subprocess.run(\n                    [\"git\", \"symbolic-ref\", \"refs/remotes/origin/HEAD\"],\n                    cwd=cache_path,\n                    capture_output=True,\n                    text=True,\n                )\n                if result.returncode == 0:\n                    default_branch = result.stdout.strip().split(\"/\")[-1]\n                    subprocess.run(\n                        [\"git\", \"checkout\", default_branch],\n                        cwd=cache_path,\n                        check=True,\n                        capture_output=True,\n                        text=True,\n                    )\n                    subprocess.run(\n                        [\"git\", \"pull\"],\n                        cwd=cache_path,\n                        check=True,\n                        capture_output=True,\n                        text=True,\n                    )\n        else:\n            # Clone fresh\n            return _clone_fresh(clone_url, cache_path, git_url.ref)\n\n    except subprocess.CalledProcessError as e:\n        stderr = e.stderr if hasattr(e, \"stderr\") else str(e)\n        raise GitURLError(f\"Git operation failed: {stderr}\")\n\n    return cache_path\n</code></pre>"},{"location":"reference/aimq/commands/shared/git_loader/#aimq.commands.shared.git_loader.find_tasks_file","title":"<code>find_tasks_file(repo_path, subdir=None)</code>","text":"<p>Find tasks.py in the cloned repository.</p> <p>Parameters:</p> Name Type Description Default <code>repo_path</code> <code>Path</code> <p>Path to cloned repository</p> required <code>subdir</code> <code>Optional[str]</code> <p>Optional subdirectory to search in</p> <code>None</code> <p>Returns:</p> Type Description <code>Path</code> <p>Path to tasks.py file</p> <p>Raises:</p> Type Description <code>GitURLError</code> <p>If tasks.py not found</p> Source code in <code>src/aimq/commands/shared/git_loader.py</code> <pre><code>def find_tasks_file(repo_path: Path, subdir: Optional[str] = None) -&gt; Path:\n    \"\"\"Find tasks.py in the cloned repository.\n\n    Args:\n        repo_path: Path to cloned repository\n        subdir: Optional subdirectory to search in\n\n    Returns:\n        Path to tasks.py file\n\n    Raises:\n        GitURLError: If tasks.py not found\n    \"\"\"\n    # Determine search path\n    if subdir:\n        search_path = repo_path / subdir\n        if not search_path.exists():\n            raise GitURLError(f\"Subdirectory not found: {subdir}\")\n    else:\n        search_path = repo_path\n\n    # Look for tasks.py\n    tasks_file = search_path / \"tasks.py\"\n    if not tasks_file.exists():\n        raise GitURLError(\n            f\"tasks.py not found in {search_path.relative_to(repo_path) or 'repository root'}\"\n        )\n\n    return tasks_file\n</code></pre>"},{"location":"reference/aimq/commands/shared/git_loader/#aimq.commands.shared.git_loader.get_cache_path","title":"<code>get_cache_path(git_url)</code>","text":"<p>Get cache directory path for a git repository.</p> <p>Parameters:</p> Name Type Description Default <code>git_url</code> <code>GitURL</code> <p>Parsed GitURL object</p> required <p>Returns:</p> Type Description <code>Path</code> <p>Path to cache directory</p> Note <p>Cache key includes host, owner, repo, and ref to ensure different versions are cached separately.</p> Source code in <code>src/aimq/commands/shared/git_loader.py</code> <pre><code>def get_cache_path(git_url: GitURL) -&gt; Path:\n    \"\"\"Get cache directory path for a git repository.\n\n    Args:\n        git_url: Parsed GitURL object\n\n    Returns:\n        Path to cache directory\n\n    Note:\n        Cache key includes host, owner, repo, and ref to ensure different\n        versions are cached separately.\n    \"\"\"\n    # Create cache key from URL components\n    cache_key = f\"{git_url.host}/{git_url.owner}/{git_url.repo}\"\n    if git_url.ref:\n        cache_key += f\"@{git_url.ref}\"\n\n    # Hash the cache key to create a filesystem-safe directory name\n    cache_hash = hashlib.sha256(cache_key.encode()).hexdigest()[:16]\n\n    # Use system temp directory for cache\n    cache_dir = Path(tempfile.gettempdir()) / \"aimq\" / \"git-cache\" / cache_hash\n    return cache_dir\n</code></pre>"},{"location":"reference/aimq/commands/shared/git_loader/#aimq.commands.shared.git_loader.is_git_url","title":"<code>is_git_url(path_or_url)</code>","text":"<p>Check if a string is a git URL.</p> <p>Parameters:</p> Name Type Description Default <code>path_or_url</code> <code>str</code> <p>String that might be a git URL</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if string starts with 'git:', False otherwise</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; is_git_url(\"git:user/repo\")\nTrue\n</code></pre> <pre><code>&gt;&gt;&gt; is_git_url(\"tasks.py\")\nFalse\n</code></pre> <pre><code>&gt;&gt;&gt; is_git_url(\"/path/to/tasks.py\")\nFalse\n</code></pre> Source code in <code>src/aimq/commands/shared/git_loader.py</code> <pre><code>def is_git_url(path_or_url: str) -&gt; bool:\n    \"\"\"Check if a string is a git URL.\n\n    Args:\n        path_or_url: String that might be a git URL\n\n    Returns:\n        True if string starts with 'git:', False otherwise\n\n    Examples:\n        &gt;&gt;&gt; is_git_url(\"git:user/repo\")\n        True\n\n        &gt;&gt;&gt; is_git_url(\"tasks.py\")\n        False\n\n        &gt;&gt;&gt; is_git_url(\"/path/to/tasks.py\")\n        False\n    \"\"\"\n    return path_or_url.startswith(\"git:\")\n</code></pre>"},{"location":"reference/aimq/commands/shared/git_loader/#aimq.commands.shared.git_loader.load_from_git_url","title":"<code>load_from_git_url(url, use_ssh=False)</code>","text":"<p>Load a tasks.py file from a git URL.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>Git URL in npm style (git:user/repo, git:user/repo@branch, etc.)</p> required <code>use_ssh</code> <code>bool</code> <p>If True, use SSH for git operations</p> <code>False</code> <p>Returns:</p> Type Description <code>Path</code> <p>Path to the tasks.py file</p> <p>Raises:</p> Type Description <code>GitURLError</code> <p>If URL is invalid or loading fails</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; load_from_git_url(\"git:mycompany/aimq-tasks\")\nPath('/tmp/aimq/git-cache/abc123/tasks.py')\n</code></pre> <pre><code>&gt;&gt;&gt; load_from_git_url(\"git:mycompany/monorepo#services/worker\")\nPath('/tmp/aimq/git-cache/def456/services/worker/tasks.py')\n</code></pre> Source code in <code>src/aimq/commands/shared/git_loader.py</code> <pre><code>def load_from_git_url(url: str, use_ssh: bool = False) -&gt; Path:\n    \"\"\"Load a tasks.py file from a git URL.\n\n    Args:\n        url: Git URL in npm style (git:user/repo, git:user/repo@branch, etc.)\n        use_ssh: If True, use SSH for git operations\n\n    Returns:\n        Path to the tasks.py file\n\n    Raises:\n        GitURLError: If URL is invalid or loading fails\n\n    Examples:\n        &gt;&gt;&gt; load_from_git_url(\"git:mycompany/aimq-tasks\")\n        Path('/tmp/aimq/git-cache/abc123/tasks.py')\n\n        &gt;&gt;&gt; load_from_git_url(\"git:mycompany/monorepo#services/worker\")\n        Path('/tmp/aimq/git-cache/def456/services/worker/tasks.py')\n    \"\"\"\n    # Parse the git URL\n    git_url = parse_git_url(url)\n\n    # Clone or update the repository\n    repo_path = clone_or_update_repo(git_url, use_ssh=use_ssh)\n\n    # Find the tasks.py file\n    tasks_file = find_tasks_file(repo_path, git_url.subdir)\n\n    return tasks_file\n</code></pre>"},{"location":"reference/aimq/commands/shared/git_loader/#aimq.commands.shared.git_loader.parse_git_url","title":"<code>parse_git_url(url)</code>","text":"<p>Parse npm-style git URL into components.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>Git URL in format git:user/repo, git:user/repo@ref, git:host/user/repo#path</p> required <p>Returns:</p> Type Description <code>GitURL</code> <p>GitURL with parsed components</p> <p>Raises:</p> Type Description <code>GitURLError</code> <p>If URL format is invalid</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; parse_git_url(\"git:user/repo\")\nGitURL(host='github.com', owner='user', repo='repo', ref=None, subdir=None)\n</code></pre> <pre><code>&gt;&gt;&gt; parse_git_url(\"git:user/repo@main\")\nGitURL(host='github.com', owner='user', repo='repo', ref='main', subdir=None)\n</code></pre> <pre><code>&gt;&gt;&gt; parse_git_url(\"git:user/repo#workers/tasks\")\nGitURL(host='github.com', owner='user', repo='repo', ref=None, subdir='workers/tasks')\n</code></pre> <pre><code>&gt;&gt;&gt; parse_git_url(\"git:gitlab.com/user/repo@v1.0.0\")\nGitURL(host='gitlab.com', owner='user', repo='repo', ref='v1.0.0', subdir=None)\n</code></pre> Source code in <code>src/aimq/commands/shared/git_loader.py</code> <pre><code>def parse_git_url(url: str) -&gt; GitURL:\n    \"\"\"Parse npm-style git URL into components.\n\n    Args:\n        url: Git URL in format git:user/repo, git:user/repo@ref, git:host/user/repo#path\n\n    Returns:\n        GitURL with parsed components\n\n    Raises:\n        GitURLError: If URL format is invalid\n\n    Examples:\n        &gt;&gt;&gt; parse_git_url(\"git:user/repo\")\n        GitURL(host='github.com', owner='user', repo='repo', ref=None, subdir=None)\n\n        &gt;&gt;&gt; parse_git_url(\"git:user/repo@main\")\n        GitURL(host='github.com', owner='user', repo='repo', ref='main', subdir=None)\n\n        &gt;&gt;&gt; parse_git_url(\"git:user/repo#workers/tasks\")\n        GitURL(host='github.com', owner='user', repo='repo', ref=None, subdir='workers/tasks')\n\n        &gt;&gt;&gt; parse_git_url(\"git:gitlab.com/user/repo@v1.0.0\")\n        GitURL(host='gitlab.com', owner='user', repo='repo', ref='v1.0.0', subdir=None)\n    \"\"\"\n    if not url.startswith(\"git:\"):\n        raise GitURLError(f\"Git URL must start with 'git:': {url}\")\n\n    # Remove 'git:' prefix\n    url = url[4:]\n\n    # Extract subdirectory if present (after #)\n    subdir = None\n    if \"#\" in url:\n        url, subdir = url.split(\"#\", 1)\n\n    # Extract ref if present (after @)\n    ref = None\n    if \"@\" in url:\n        url, ref = url.split(\"@\", 1)\n\n    # Parse host/owner/repo\n    # Supports: user/repo OR host/user/repo\n    parts = url.split(\"/\")\n\n    if len(parts) == 2:\n        # git:user/repo (default to github.com)\n        host = \"github.com\"\n        owner, repo = parts\n    elif len(parts) == 3:\n        # git:host/user/repo\n        host, owner, repo = parts\n    else:\n        raise GitURLError(\n            f\"Invalid git URL format. Expected 'user/repo' or 'host/user/repo': {url}\"\n        )\n\n    # Validate components\n    if not owner or not repo:\n        raise GitURLError(f\"Git URL must specify owner and repo: {url}\")\n\n    # Remove .git suffix if present\n    if repo.endswith(\".git\"):\n        repo = repo[:-4]\n\n    return GitURL(host=host, owner=owner, repo=repo, ref=ref, subdir=subdir)\n</code></pre>"},{"location":"reference/aimq/commands/shared/migration/","title":"aimq.commands.shared.migration","text":""},{"location":"reference/aimq/commands/shared/migration/#aimq.commands.shared.migration","title":"<code>aimq.commands.shared.migration</code>","text":""},{"location":"reference/aimq/commands/shared/migration/#aimq.commands.shared.migration-classes","title":"Classes","text":""},{"location":"reference/aimq/commands/shared/migration/#aimq.commands.shared.migration.SupabaseMigrations","title":"<code>SupabaseMigrations(project_path)</code>","text":"<p>Initialize Migration with a ProjectPath instance.</p> <p>Parameters:</p> Name Type Description Default <code>project_path</code> <code>ProjectPath</code> <p>Instance of ProjectPath for file operations</p> required Source code in <code>src/aimq/commands/shared/migration.py</code> <pre><code>def __init__(self, project_path: ProjectPath):\n    \"\"\"\n    Initialize Migration with a ProjectPath instance.\n\n    Args:\n        project_path (ProjectPath): Instance of ProjectPath for file operations\n    \"\"\"\n    self.project_path = project_path\n    self.template_dir = Path(__file__).parent / \"templates\"\n</code></pre>"},{"location":"reference/aimq/commands/shared/migration/#aimq.commands.shared.migration.SupabaseMigrations-attributes","title":"Attributes","text":""},{"location":"reference/aimq/commands/shared/migration/#aimq.commands.shared.migration.SupabaseMigrations.project_path","title":"<code>project_path = project_path</code>  <code>instance-attribute</code>","text":""},{"location":"reference/aimq/commands/shared/migration/#aimq.commands.shared.migration.SupabaseMigrations.template_dir","title":"<code>template_dir = Path(__file__).parent / 'templates'</code>  <code>instance-attribute</code>","text":""},{"location":"reference/aimq/commands/shared/migration/#aimq.commands.shared.migration.SupabaseMigrations-functions","title":"Functions","text":""},{"location":"reference/aimq/commands/shared/migration/#aimq.commands.shared.migration.SupabaseMigrations.create_migration","title":"<code>create_migration(name, template_name, context=None)</code>","text":"<p>Create a new migration file from a template.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the migration</p> required <code>template_name</code> <code>str</code> <p>Name of the template file to use</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Context data to apply to the template</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Path</code> <code>Path</code> <p>Path to the created migration file</p> Source code in <code>src/aimq/commands/shared/migration.py</code> <pre><code>def create_migration(\n    self, name: str, template_name: str, context: Optional[Dict[str, Any]] = None\n) -&gt; Path:\n    \"\"\"\n    Create a new migration file from a template.\n\n    Args:\n        name (str): Name of the migration\n        template_name (str): Name of the template file to use\n        context (Optional[Dict[str, Any]]): Context data to apply to the template\n\n    Returns:\n        Path: Path to the created migration file\n    \"\"\"\n    context = context or {}\n\n    # Check for existing migration using ProjectPath\n    existing = self.project_path.find_existing_migration(name)\n    if existing:\n        return existing\n\n    # Get template from library\n    template_path = self._get_template(template_name)\n\n    # Generate migration path using ProjectPath\n    migration_path = self.project_path.migration_path(name)\n\n    # Ensure migrations directory exists\n    os.makedirs(self.project_path.migrations, exist_ok=True)\n\n    # Load and render template\n    with open(template_path, \"r\") as f:\n        template_content = f.read()\n\n    content = render(template_content, context)\n\n    # Write migration file\n    with open(migration_path, \"w\") as f:\n        f.write(content)\n\n    return migration_path\n</code></pre>"},{"location":"reference/aimq/commands/shared/migration/#aimq.commands.shared.migration.SupabaseMigrations.create_queue_migration","title":"<code>create_queue_migration(queue_name)</code>","text":"<p>Create a queue-specific migration. This migration sets up a new queue with the specified name.</p> <p>Parameters:</p> Name Type Description Default <code>queue_name</code> <code>str</code> <p>Name of the queue to create</p> required <p>Returns:</p> Name Type Description <code>Path</code> <code>Path</code> <p>Path to the created migration file</p> Source code in <code>src/aimq/commands/shared/migration.py</code> <pre><code>def create_queue_migration(self, queue_name: str) -&gt; Path:\n    \"\"\"\n    Create a queue-specific migration.\n    This migration sets up a new queue with the specified name.\n\n    Args:\n        queue_name (str): Name of the queue to create\n\n    Returns:\n        Path: Path to the created migration file\n    \"\"\"\n    return self.create_migration(\n        name=f\"create_queue_{queue_name}\",\n        template_name=\"create_queue.sql\",\n        context={\"queue_name\": queue_name},\n    )\n</code></pre>"},{"location":"reference/aimq/commands/shared/migration/#aimq.commands.shared.migration.SupabaseMigrations.setup_aimq_migration","title":"<code>setup_aimq_migration()</code>","text":"<p>Create the enable AIMQ migration using the static template. This migration enables the necessary Supabase configuration for AIMQ.</p> <p>Returns:</p> Name Type Description <code>Path</code> <code>Path</code> <p>Path to the created migration file</p> Source code in <code>src/aimq/commands/shared/migration.py</code> <pre><code>def setup_aimq_migration(self) -&gt; Path:\n    \"\"\"\n    Create the enable AIMQ migration using the static template.\n    This migration enables the necessary Supabase configuration for AIMQ.\n\n    Returns:\n        Path: Path to the created migration file\n    \"\"\"\n    return self.create_migration(name=\"setup_aimq\", template_name=\"setup_aimq.sql\")\n</code></pre>"},{"location":"reference/aimq/commands/shared/paths/","title":"aimq.commands.shared.paths","text":""},{"location":"reference/aimq/commands/shared/paths/#aimq.commands.shared.paths","title":"<code>aimq.commands.shared.paths</code>","text":""},{"location":"reference/aimq/commands/shared/paths/#aimq.commands.shared.paths-attributes","title":"Attributes","text":""},{"location":"reference/aimq/commands/shared/paths/#aimq.commands.shared.paths.default_paths","title":"<code>default_paths = ProjectPath()</code>  <code>module-attribute</code>","text":""},{"location":"reference/aimq/commands/shared/paths/#aimq.commands.shared.paths-classes","title":"Classes","text":""},{"location":"reference/aimq/commands/shared/paths/#aimq.commands.shared.paths.ProjectPath","title":"<code>ProjectPath(root=None)</code>","text":"<p>Initialize ProjectPath with a root directory.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>Optional[Path]</code> <p>Root directory path. Defaults to current working directory.</p> <code>None</code> Source code in <code>src/aimq/commands/shared/paths.py</code> <pre><code>def __init__(self, root: Optional[Path] = None):\n    \"\"\"\n    Initialize ProjectPath with a root directory.\n\n    Args:\n        root (Optional[Path]): Root directory path. Defaults to current working directory.\n    \"\"\"\n    self.root = root or Path.cwd()\n</code></pre>"},{"location":"reference/aimq/commands/shared/paths/#aimq.commands.shared.paths.ProjectPath-attributes","title":"Attributes","text":""},{"location":"reference/aimq/commands/shared/paths/#aimq.commands.shared.paths.ProjectPath.migrations","title":"<code>migrations</code>  <code>property</code>","text":"<p>Get the migrations directory path.</p>"},{"location":"reference/aimq/commands/shared/paths/#aimq.commands.shared.paths.ProjectPath.root","title":"<code>root = root or Path.cwd()</code>  <code>instance-attribute</code>","text":""},{"location":"reference/aimq/commands/shared/paths/#aimq.commands.shared.paths.ProjectPath.supabase","title":"<code>supabase</code>  <code>property</code>","text":"<p>Get the Supabase directory path.</p>"},{"location":"reference/aimq/commands/shared/paths/#aimq.commands.shared.paths.ProjectPath.supabase_config","title":"<code>supabase_config</code>  <code>property</code>","text":"<p>Get the Supabase config file path.</p>"},{"location":"reference/aimq/commands/shared/paths/#aimq.commands.shared.paths.ProjectPath-functions","title":"Functions","text":""},{"location":"reference/aimq/commands/shared/paths/#aimq.commands.shared.paths.ProjectPath.find_existing_migration","title":"<code>find_existing_migration(name)</code>","text":"<p>Check if there is an existing migration file with the given name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the migration to search for.</p> required <p>Returns:</p> Type Description <code>Optional[Path]</code> <p>Optional[Path]: Path to the existing migration if found, None otherwise.</p> Source code in <code>src/aimq/commands/shared/paths.py</code> <pre><code>def find_existing_migration(self, name: str) -&gt; Optional[Path]:\n    \"\"\"\n    Check if there is an existing migration file with the given name.\n\n    Args:\n        name (str): The name of the migration to search for.\n\n    Returns:\n        Optional[Path]: Path to the existing migration if found, None otherwise.\n    \"\"\"\n    if not self.migrations.exists():\n        return None\n\n    for file in self.migrations.glob(f\"*_{name}.sql\"):\n        return file\n    return None\n</code></pre>"},{"location":"reference/aimq/commands/shared/paths/#aimq.commands.shared.paths.ProjectPath.get_current_timestamp","title":"<code>get_current_timestamp()</code>  <code>staticmethod</code>","text":"<p>Get the current UTC timestamp as a string. Format: YYYYMMDDHHMMSS (equivalent to Go's 20060102150405)</p> Source code in <code>src/aimq/commands/shared/paths.py</code> <pre><code>@staticmethod\ndef get_current_timestamp() -&gt; str:\n    \"\"\"\n    Get the current UTC timestamp as a string.\n    Format: YYYYMMDDHHMMSS (equivalent to Go's 20060102150405)\n    \"\"\"\n    return datetime.now(timezone.utc).strftime(\"%Y%m%d%H%M%S\")\n</code></pre>"},{"location":"reference/aimq/commands/shared/paths/#aimq.commands.shared.paths.ProjectPath.migration_path","title":"<code>migration_path(name)</code>","text":"<p>Generate a path for a new migration file.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the migration.</p> required <p>Returns:</p> Name Type Description <code>Path</code> <code>Path</code> <p>The path to the new migration file.</p> Source code in <code>src/aimq/commands/shared/paths.py</code> <pre><code>def migration_path(self, name: str) -&gt; Path:\n    \"\"\"\n    Generate a path for a new migration file.\n\n    Args:\n        name (str): The name of the migration.\n\n    Returns:\n        Path: The path to the new migration file.\n    \"\"\"\n    timestamp = self.get_current_timestamp()\n    migration_file = f\"{timestamp}_{name}.sql\"\n    return self.migrations / migration_file\n</code></pre>"},{"location":"reference/aimq/commands/shared/templates/","title":"aimq.commands.shared.templates","text":""},{"location":"reference/aimq/commands/shared/templates/#aimq.commands.shared.templates","title":"<code>aimq.commands.shared.templates</code>","text":"<p>Template modules for AIMQ commands.</p>"},{"location":"reference/aimq/commands/shared/templates/#aimq.commands.shared.templates-attributes","title":"Attributes","text":""},{"location":"reference/aimq/commands/shared/templates/#aimq.commands.shared.templates.__all__","title":"<code>__all__ = ['tasks']</code>  <code>module-attribute</code>","text":""},{"location":"reference/aimq/commands/shared/templates/tasks/","title":"aimq.commands.shared.templates.tasks","text":""},{"location":"reference/aimq/commands/shared/templates/tasks/#aimq.commands.shared.templates.tasks","title":"<code>aimq.commands.shared.templates.tasks</code>","text":"<p>Template task definitions for AIMQ.</p> <p>This module provides example task definitions that demonstrate how to create and use worker tasks in AIMQ. These templates can be used as starting points for creating your own task definitions.</p>"},{"location":"reference/aimq/commands/shared/templates/tasks/#aimq.commands.shared.templates.tasks-attributes","title":"Attributes","text":""},{"location":"reference/aimq/commands/shared/templates/tasks/#aimq.commands.shared.templates.tasks.worker","title":"<code>worker = Worker()</code>  <code>module-attribute</code>","text":""},{"location":"reference/aimq/commands/shared/templates/tasks/#aimq.commands.shared.templates.tasks-classes","title":"Classes","text":""},{"location":"reference/aimq/commands/shared/templates/tasks/#aimq.commands.shared.templates.tasks-functions","title":"Functions","text":""},{"location":"reference/aimq/commands/shared/templates/tasks/#aimq.commands.shared.templates.tasks.example","title":"<code>example(data)</code>","text":"<p>Example task that converts input text to uppercase.</p> <p>This is a simple example task that demonstrates the basic pattern for creating worker tasks in AIMQ. It takes a dictionary with a 'text' key and returns a dictionary with the uppercase version of that text.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Dict[str, Any]</code> <p>Dictionary containing task data with a 'text' key.</p> required <p>Returns:</p> Type Description <code>Dict[str, str]</code> <p>Dictionary with 'result' key containing the uppercase text.</p> Example <pre><code>result = await worker.enqueue('example', {'text': 'hello'})\nassert result['result'] == 'HELLO'\n</code></pre> Source code in <code>src/aimq/commands/shared/templates/tasks.py</code> <pre><code>@worker.task()\ndef example(data: Dict[str, Any]) -&gt; Dict[str, str]:\n    \"\"\"Example task that converts input text to uppercase.\n\n    This is a simple example task that demonstrates the basic pattern for\n    creating worker tasks in AIMQ. It takes a dictionary with a 'text' key\n    and returns a dictionary with the uppercase version of that text.\n\n    Args:\n        data: Dictionary containing task data with a 'text' key.\n\n    Returns:\n        Dictionary with 'result' key containing the uppercase text.\n\n    Example:\n        ```python\n        result = await worker.enqueue('example', {'text': 'hello'})\n        assert result['result'] == 'HELLO'\n        ```\n    \"\"\"\n    text = data.get(\"text\", \"\")\n    return {\"result\": text.upper()}\n</code></pre>"},{"location":"reference/aimq/commands/shared/templates/docker/","title":"aimq.commands.shared.templates.docker","text":""},{"location":"reference/aimq/commands/shared/templates/docker/#aimq.commands.shared.templates.docker","title":"<code>aimq.commands.shared.templates.docker</code>","text":"<p>Docker template files for AIMQ deployment.</p>"},{"location":"reference/aimq/providers/","title":"aimq.providers","text":""},{"location":"reference/aimq/providers/#aimq.providers","title":"<code>aimq.providers</code>","text":""},{"location":"reference/aimq/providers/#aimq.providers-attributes","title":"Attributes","text":""},{"location":"reference/aimq/providers/#aimq.providers.__all__","title":"<code>__all__ = ['QueueProvider', 'QueueNotFoundError', 'SupabaseQueueProvider']</code>  <code>module-attribute</code>","text":""},{"location":"reference/aimq/providers/#aimq.providers-classes","title":"Classes","text":""},{"location":"reference/aimq/providers/#aimq.providers.QueueNotFoundError","title":"<code>QueueNotFoundError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Raised when attempting to access a queue that does not exist.</p>"},{"location":"reference/aimq/providers/#aimq.providers.QueueProvider","title":"<code>QueueProvider</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base class for queue providers.</p>"},{"location":"reference/aimq/providers/#aimq.providers.QueueProvider-functions","title":"Functions","text":""},{"location":"reference/aimq/providers/#aimq.providers.QueueProvider.archive","title":"<code>archive(queue_name, job_or_id)</code>  <code>abstractmethod</code>","text":"<p>Archive a message in the queue.</p> Source code in <code>src/aimq/providers/base.py</code> <pre><code>@abstractmethod\ndef archive(self, queue_name: str, job_or_id: int | Job) -&gt; bool:\n    \"\"\"Archive a message in the queue.\"\"\"\n    pass\n</code></pre>"},{"location":"reference/aimq/providers/#aimq.providers.QueueProvider.delete","title":"<code>delete(queue_name, job_or_id)</code>  <code>abstractmethod</code>","text":"<p>Delete a message from the queue.</p> Source code in <code>src/aimq/providers/base.py</code> <pre><code>@abstractmethod\ndef delete(self, queue_name: str, job_or_id: int | Job) -&gt; bool:\n    \"\"\"Delete a message from the queue.\"\"\"\n    pass\n</code></pre>"},{"location":"reference/aimq/providers/#aimq.providers.QueueProvider.pop","title":"<code>pop(queue_name)</code>  <code>abstractmethod</code>","text":"<p>Pop a message from the queue.</p> Source code in <code>src/aimq/providers/base.py</code> <pre><code>@abstractmethod\ndef pop(self, queue_name: str) -&gt; Job | None:\n    \"\"\"Pop a message from the queue.\"\"\"\n    pass\n</code></pre>"},{"location":"reference/aimq/providers/#aimq.providers.QueueProvider.read","title":"<code>read(queue_name, timeout, count)</code>  <code>abstractmethod</code>","text":"<p>Read messages from the queue.</p> Source code in <code>src/aimq/providers/base.py</code> <pre><code>@abstractmethod\ndef read(self, queue_name: str, timeout: int, count: int) -&gt; List[Job]:\n    \"\"\"Read messages from the queue.\"\"\"\n    pass\n</code></pre>"},{"location":"reference/aimq/providers/#aimq.providers.QueueProvider.send","title":"<code>send(queue_name, data, delay=None)</code>  <code>abstractmethod</code>","text":"<p>Add a message to the queue.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The ID of the added message</p> Source code in <code>src/aimq/providers/base.py</code> <pre><code>@abstractmethod\ndef send(self, queue_name: str, data: dict[str, Any], delay: int | None = None) -&gt; int:\n    \"\"\"Add a message to the queue.\n\n    Returns:\n        int: The ID of the added message\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/aimq/providers/#aimq.providers.QueueProvider.send_batch","title":"<code>send_batch(queue_name, data_list, delay=None)</code>  <code>abstractmethod</code>","text":"<p>Add a batch of messages to the queue.</p> <p>Returns:</p> Type Description <code>list[int]</code> <p>list[int]: The IDs of the added messages</p> Source code in <code>src/aimq/providers/base.py</code> <pre><code>@abstractmethod\ndef send_batch(\n    self, queue_name: str, data_list: list[dict[str, Any]], delay: int | None = None\n) -&gt; list[int]:\n    \"\"\"Add a batch of messages to the queue.\n\n    Returns:\n        list[int]: The IDs of the added messages\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/aimq/providers/#aimq.providers.SupabaseQueueProvider","title":"<code>SupabaseQueueProvider</code>","text":"<p>               Bases: <code>QueueProvider</code></p> <p>Supabase implementation of QueueProvider.</p>"},{"location":"reference/aimq/providers/#aimq.providers.SupabaseQueueProvider-functions","title":"Functions","text":""},{"location":"reference/aimq/providers/#aimq.providers.SupabaseQueueProvider.archive","title":"<code>archive(queue_name, job_or_id)</code>","text":"Source code in <code>src/aimq/providers/supabase.py</code> <pre><code>def archive(self, queue_name: str, job_or_id: int | Job) -&gt; bool:\n    msg_id = job_or_id.id if isinstance(job_or_id, Job) else job_or_id\n    data = self._rpc(\"archive\", {\"queue_name\": queue_name, \"message_id\": msg_id})\n\n    return bool(data)\n</code></pre>"},{"location":"reference/aimq/providers/#aimq.providers.SupabaseQueueProvider.delete","title":"<code>delete(queue_name, job_or_id)</code>","text":"Source code in <code>src/aimq/providers/supabase.py</code> <pre><code>def delete(self, queue_name: str, job_or_id: int | Job) -&gt; bool:\n    msg_id = job_or_id.id if isinstance(job_or_id, Job) else job_or_id\n    data = self._rpc(\"delete\", {\"queue_name\": queue_name, \"message_id\": msg_id})\n\n    return bool(data)\n</code></pre>"},{"location":"reference/aimq/providers/#aimq.providers.SupabaseQueueProvider.pop","title":"<code>pop(queue_name)</code>","text":"Source code in <code>src/aimq/providers/supabase.py</code> <pre><code>def pop(self, queue_name: str) -&gt; Job | None:\n    data = self._rpc(\"pop\", {\"queue_name\": queue_name})\n\n    return Job.from_response(data[0], queue=queue_name, popped=True) if data else None\n</code></pre>"},{"location":"reference/aimq/providers/#aimq.providers.SupabaseQueueProvider.read","title":"<code>read(queue_name, timeout, count)</code>","text":"Source code in <code>src/aimq/providers/supabase.py</code> <pre><code>def read(self, queue_name: str, timeout: int, count: int) -&gt; List[Job]:\n    data = self._rpc(\"read\", {\"queue_name\": queue_name, \"sleep_seconds\": timeout, \"n\": count})\n\n    return [Job.from_response(job, queue=queue_name) for job in data]\n</code></pre>"},{"location":"reference/aimq/providers/#aimq.providers.SupabaseQueueProvider.send","title":"<code>send(queue_name, data, delay=None)</code>","text":"Source code in <code>src/aimq/providers/supabase.py</code> <pre><code>def send(self, queue_name: str, data: dict[str, Any], delay: int | None = None) -&gt; int:\n    params: dict[str, Any] = {\"queue_name\": queue_name, \"message\": data}\n    if delay is not None:\n        params[\"sleep_seconds\"] = delay\n\n    result = self._rpc(\"send\", params)\n    return result[0]\n</code></pre>"},{"location":"reference/aimq/providers/#aimq.providers.SupabaseQueueProvider.send_batch","title":"<code>send_batch(queue_name, data_list, delay=None)</code>","text":"Source code in <code>src/aimq/providers/supabase.py</code> <pre><code>def send_batch(\n    self, queue_name: str, data_list: list[dict[str, Any]], delay: int | None = None\n) -&gt; list[int]:\n    params: dict[str, Any] = {\"queue_name\": queue_name, \"messages\": data_list}\n    if delay is not None:\n        params[\"sleep_seconds\"] = delay\n\n    result = self._rpc(\"send_batch\", params)\n    return result\n</code></pre>"},{"location":"reference/aimq/providers/base/","title":"aimq.providers.base","text":""},{"location":"reference/aimq/providers/base/#aimq.providers.base","title":"<code>aimq.providers.base</code>","text":""},{"location":"reference/aimq/providers/base/#aimq.providers.base-classes","title":"Classes","text":""},{"location":"reference/aimq/providers/base/#aimq.providers.base.QueueNotFoundError","title":"<code>QueueNotFoundError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Raised when attempting to access a queue that does not exist.</p>"},{"location":"reference/aimq/providers/base/#aimq.providers.base.QueueProvider","title":"<code>QueueProvider</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base class for queue providers.</p>"},{"location":"reference/aimq/providers/base/#aimq.providers.base.QueueProvider-functions","title":"Functions","text":""},{"location":"reference/aimq/providers/base/#aimq.providers.base.QueueProvider.archive","title":"<code>archive(queue_name, job_or_id)</code>  <code>abstractmethod</code>","text":"<p>Archive a message in the queue.</p> Source code in <code>src/aimq/providers/base.py</code> <pre><code>@abstractmethod\ndef archive(self, queue_name: str, job_or_id: int | Job) -&gt; bool:\n    \"\"\"Archive a message in the queue.\"\"\"\n    pass\n</code></pre>"},{"location":"reference/aimq/providers/base/#aimq.providers.base.QueueProvider.delete","title":"<code>delete(queue_name, job_or_id)</code>  <code>abstractmethod</code>","text":"<p>Delete a message from the queue.</p> Source code in <code>src/aimq/providers/base.py</code> <pre><code>@abstractmethod\ndef delete(self, queue_name: str, job_or_id: int | Job) -&gt; bool:\n    \"\"\"Delete a message from the queue.\"\"\"\n    pass\n</code></pre>"},{"location":"reference/aimq/providers/base/#aimq.providers.base.QueueProvider.pop","title":"<code>pop(queue_name)</code>  <code>abstractmethod</code>","text":"<p>Pop a message from the queue.</p> Source code in <code>src/aimq/providers/base.py</code> <pre><code>@abstractmethod\ndef pop(self, queue_name: str) -&gt; Job | None:\n    \"\"\"Pop a message from the queue.\"\"\"\n    pass\n</code></pre>"},{"location":"reference/aimq/providers/base/#aimq.providers.base.QueueProvider.read","title":"<code>read(queue_name, timeout, count)</code>  <code>abstractmethod</code>","text":"<p>Read messages from the queue.</p> Source code in <code>src/aimq/providers/base.py</code> <pre><code>@abstractmethod\ndef read(self, queue_name: str, timeout: int, count: int) -&gt; List[Job]:\n    \"\"\"Read messages from the queue.\"\"\"\n    pass\n</code></pre>"},{"location":"reference/aimq/providers/base/#aimq.providers.base.QueueProvider.send","title":"<code>send(queue_name, data, delay=None)</code>  <code>abstractmethod</code>","text":"<p>Add a message to the queue.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The ID of the added message</p> Source code in <code>src/aimq/providers/base.py</code> <pre><code>@abstractmethod\ndef send(self, queue_name: str, data: dict[str, Any], delay: int | None = None) -&gt; int:\n    \"\"\"Add a message to the queue.\n\n    Returns:\n        int: The ID of the added message\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/aimq/providers/base/#aimq.providers.base.QueueProvider.send_batch","title":"<code>send_batch(queue_name, data_list, delay=None)</code>  <code>abstractmethod</code>","text":"<p>Add a batch of messages to the queue.</p> <p>Returns:</p> Type Description <code>list[int]</code> <p>list[int]: The IDs of the added messages</p> Source code in <code>src/aimq/providers/base.py</code> <pre><code>@abstractmethod\ndef send_batch(\n    self, queue_name: str, data_list: list[dict[str, Any]], delay: int | None = None\n) -&gt; list[int]:\n    \"\"\"Add a batch of messages to the queue.\n\n    Returns:\n        list[int]: The IDs of the added messages\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/aimq/providers/supabase/","title":"aimq.providers.supabase","text":""},{"location":"reference/aimq/providers/supabase/#aimq.providers.supabase","title":"<code>aimq.providers.supabase</code>","text":""},{"location":"reference/aimq/providers/supabase/#aimq.providers.supabase-attributes","title":"Attributes","text":""},{"location":"reference/aimq/providers/supabase/#aimq.providers.supabase-classes","title":"Classes","text":""},{"location":"reference/aimq/providers/supabase/#aimq.providers.supabase.SupabaseQueueProvider","title":"<code>SupabaseQueueProvider</code>","text":"<p>               Bases: <code>QueueProvider</code></p> <p>Supabase implementation of QueueProvider.</p>"},{"location":"reference/aimq/providers/supabase/#aimq.providers.supabase.SupabaseQueueProvider-functions","title":"Functions","text":""},{"location":"reference/aimq/providers/supabase/#aimq.providers.supabase.SupabaseQueueProvider.archive","title":"<code>archive(queue_name, job_or_id)</code>","text":"Source code in <code>src/aimq/providers/supabase.py</code> <pre><code>def archive(self, queue_name: str, job_or_id: int | Job) -&gt; bool:\n    msg_id = job_or_id.id if isinstance(job_or_id, Job) else job_or_id\n    data = self._rpc(\"archive\", {\"queue_name\": queue_name, \"message_id\": msg_id})\n\n    return bool(data)\n</code></pre>"},{"location":"reference/aimq/providers/supabase/#aimq.providers.supabase.SupabaseQueueProvider.delete","title":"<code>delete(queue_name, job_or_id)</code>","text":"Source code in <code>src/aimq/providers/supabase.py</code> <pre><code>def delete(self, queue_name: str, job_or_id: int | Job) -&gt; bool:\n    msg_id = job_or_id.id if isinstance(job_or_id, Job) else job_or_id\n    data = self._rpc(\"delete\", {\"queue_name\": queue_name, \"message_id\": msg_id})\n\n    return bool(data)\n</code></pre>"},{"location":"reference/aimq/providers/supabase/#aimq.providers.supabase.SupabaseQueueProvider.pop","title":"<code>pop(queue_name)</code>","text":"Source code in <code>src/aimq/providers/supabase.py</code> <pre><code>def pop(self, queue_name: str) -&gt; Job | None:\n    data = self._rpc(\"pop\", {\"queue_name\": queue_name})\n\n    return Job.from_response(data[0], queue=queue_name, popped=True) if data else None\n</code></pre>"},{"location":"reference/aimq/providers/supabase/#aimq.providers.supabase.SupabaseQueueProvider.read","title":"<code>read(queue_name, timeout, count)</code>","text":"Source code in <code>src/aimq/providers/supabase.py</code> <pre><code>def read(self, queue_name: str, timeout: int, count: int) -&gt; List[Job]:\n    data = self._rpc(\"read\", {\"queue_name\": queue_name, \"sleep_seconds\": timeout, \"n\": count})\n\n    return [Job.from_response(job, queue=queue_name) for job in data]\n</code></pre>"},{"location":"reference/aimq/providers/supabase/#aimq.providers.supabase.SupabaseQueueProvider.send","title":"<code>send(queue_name, data, delay=None)</code>","text":"Source code in <code>src/aimq/providers/supabase.py</code> <pre><code>def send(self, queue_name: str, data: dict[str, Any], delay: int | None = None) -&gt; int:\n    params: dict[str, Any] = {\"queue_name\": queue_name, \"message\": data}\n    if delay is not None:\n        params[\"sleep_seconds\"] = delay\n\n    result = self._rpc(\"send\", params)\n    return result[0]\n</code></pre>"},{"location":"reference/aimq/providers/supabase/#aimq.providers.supabase.SupabaseQueueProvider.send_batch","title":"<code>send_batch(queue_name, data_list, delay=None)</code>","text":"Source code in <code>src/aimq/providers/supabase.py</code> <pre><code>def send_batch(\n    self, queue_name: str, data_list: list[dict[str, Any]], delay: int | None = None\n) -&gt; list[int]:\n    params: dict[str, Any] = {\"queue_name\": queue_name, \"messages\": data_list}\n    if delay is not None:\n        params[\"sleep_seconds\"] = delay\n\n    result = self._rpc(\"send_batch\", params)\n    return result\n</code></pre>"},{"location":"reference/aimq/tools/","title":"aimq.tools","text":""},{"location":"reference/aimq/tools/#aimq.tools","title":"<code>aimq.tools</code>","text":""},{"location":"reference/aimq/tools/mistral/","title":"aimq.tools.mistral","text":""},{"location":"reference/aimq/tools/mistral/#aimq.tools.mistral","title":"<code>aimq.tools.mistral</code>","text":"<p>Mistral toolss.</p>"},{"location":"reference/aimq/tools/mistral/#aimq.tools.mistral-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/mistral/#aimq.tools.mistral.__all__","title":"<code>__all__ = ['DocumentOCR', 'DocumentOCRInput', 'UploadFile', 'UploadFileInput']</code>  <code>module-attribute</code>","text":""},{"location":"reference/aimq/tools/mistral/#aimq.tools.mistral-classes","title":"Classes","text":""},{"location":"reference/aimq/tools/mistral/#aimq.tools.mistral.DocumentOCR","title":"<code>DocumentOCR</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for converting PDFs to markdown.</p>"},{"location":"reference/aimq/tools/mistral/#aimq.tools.mistral.DocumentOCR-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/mistral/#aimq.tools.mistral.DocumentOCR.args_schema","title":"<code>args_schema = DocumentOCRInput</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/mistral/#aimq.tools.mistral.DocumentOCR.description","title":"<code>description = 'Convert a PDF file to markdown'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/mistral/#aimq.tools.mistral.DocumentOCR.name","title":"<code>name = 'document_ocr'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/mistral/#aimq.tools.mistral.DocumentOCRInput","title":"<code>DocumentOCRInput</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"reference/aimq/tools/mistral/#aimq.tools.mistral.DocumentOCRInput-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/mistral/#aimq.tools.mistral.DocumentOCRInput.url","title":"<code>url = Field(..., description='The URL of the PDF file to convert to markdown')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/mistral/#aimq.tools.mistral.UploadFile","title":"<code>UploadFile</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for uploading files to Mistral.</p>"},{"location":"reference/aimq/tools/mistral/#aimq.tools.mistral.UploadFile-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/mistral/#aimq.tools.mistral.UploadFile.args_schema","title":"<code>args_schema = UploadFileInput</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/mistral/#aimq.tools.mistral.UploadFile.description","title":"<code>description = 'Upload a file to Mistral'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/mistral/#aimq.tools.mistral.UploadFile.name","title":"<code>name = 'upload_file'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/mistral/#aimq.tools.mistral.UploadFileInput","title":"<code>UploadFileInput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Input for UploadFile.</p>"},{"location":"reference/aimq/tools/mistral/#aimq.tools.mistral.UploadFileInput-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/mistral/#aimq.tools.mistral.UploadFileInput.file","title":"<code>file = Field(..., description='The file to upload')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/mistral/#aimq.tools.mistral-functions","title":"Functions","text":""},{"location":"reference/aimq/tools/mistral/#aimq.tools.mistral.get_tools","title":"<code>get_tools()</code>","text":"<p>Get all Mistral tools.</p> Source code in <code>src/aimq/tools/mistral/__init__.py</code> <pre><code>def get_tools() -&gt; List[BaseTool]:\n    \"\"\"Get all Mistral tools.\"\"\"\n    tools: List[BaseTool] = [\n        DocumentOCR(),\n        UploadFile(),\n    ]\n    return tools\n</code></pre>"},{"location":"reference/aimq/tools/mistral/document_ocr/","title":"aimq.tools.mistral.document_ocr","text":""},{"location":"reference/aimq/tools/mistral/document_ocr/#aimq.tools.mistral.document_ocr","title":"<code>aimq.tools.mistral.document_ocr</code>","text":""},{"location":"reference/aimq/tools/mistral/document_ocr/#aimq.tools.mistral.document_ocr-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/mistral/document_ocr/#aimq.tools.mistral.document_ocr-classes","title":"Classes","text":""},{"location":"reference/aimq/tools/mistral/document_ocr/#aimq.tools.mistral.document_ocr.DocumentOCR","title":"<code>DocumentOCR</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for converting PDFs to markdown.</p>"},{"location":"reference/aimq/tools/mistral/document_ocr/#aimq.tools.mistral.document_ocr.DocumentOCR-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/mistral/document_ocr/#aimq.tools.mistral.document_ocr.DocumentOCR.args_schema","title":"<code>args_schema = DocumentOCRInput</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/mistral/document_ocr/#aimq.tools.mistral.document_ocr.DocumentOCR.description","title":"<code>description = 'Convert a PDF file to markdown'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/mistral/document_ocr/#aimq.tools.mistral.document_ocr.DocumentOCR.name","title":"<code>name = 'document_ocr'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/mistral/document_ocr/#aimq.tools.mistral.document_ocr.DocumentOCRInput","title":"<code>DocumentOCRInput</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"reference/aimq/tools/mistral/document_ocr/#aimq.tools.mistral.document_ocr.DocumentOCRInput-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/mistral/document_ocr/#aimq.tools.mistral.document_ocr.DocumentOCRInput.url","title":"<code>url = Field(..., description='The URL of the PDF file to convert to markdown')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/mistral/upload_file/","title":"aimq.tools.mistral.upload_file","text":""},{"location":"reference/aimq/tools/mistral/upload_file/#aimq.tools.mistral.upload_file","title":"<code>aimq.tools.mistral.upload_file</code>","text":"<p>Tool for uploading files to Mistral.</p>"},{"location":"reference/aimq/tools/mistral/upload_file/#aimq.tools.mistral.upload_file-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/mistral/upload_file/#aimq.tools.mistral.upload_file-classes","title":"Classes","text":""},{"location":"reference/aimq/tools/mistral/upload_file/#aimq.tools.mistral.upload_file.UploadFile","title":"<code>UploadFile</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for uploading files to Mistral.</p>"},{"location":"reference/aimq/tools/mistral/upload_file/#aimq.tools.mistral.upload_file.UploadFile-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/mistral/upload_file/#aimq.tools.mistral.upload_file.UploadFile.args_schema","title":"<code>args_schema = UploadFileInput</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/mistral/upload_file/#aimq.tools.mistral.upload_file.UploadFile.description","title":"<code>description = 'Upload a file to Mistral'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/mistral/upload_file/#aimq.tools.mistral.upload_file.UploadFile.name","title":"<code>name = 'upload_file'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/mistral/upload_file/#aimq.tools.mistral.upload_file.UploadFileInput","title":"<code>UploadFileInput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Input for UploadFile.</p>"},{"location":"reference/aimq/tools/mistral/upload_file/#aimq.tools.mistral.upload_file.UploadFileInput-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/mistral/upload_file/#aimq.tools.mistral.upload_file.UploadFileInput.file","title":"<code>file = Field(..., description='The file to upload')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/ocr/","title":"aimq.tools.ocr","text":""},{"location":"reference/aimq/tools/ocr/#aimq.tools.ocr","title":"<code>aimq.tools.ocr</code>","text":"<p>OCR tools package.</p>"},{"location":"reference/aimq/tools/ocr/#aimq.tools.ocr-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/ocr/#aimq.tools.ocr.__all__","title":"<code>__all__ = ['ImageOCR', 'ImageOCRInput']</code>  <code>module-attribute</code>","text":""},{"location":"reference/aimq/tools/ocr/#aimq.tools.ocr-classes","title":"Classes","text":""},{"location":"reference/aimq/tools/ocr/#aimq.tools.ocr.ImageOCR","title":"<code>ImageOCR(**kwargs)</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for performing OCR on images.</p> <p>Initialize the OCR processor.</p> Source code in <code>src/aimq/tools/ocr/image_ocr.py</code> <pre><code>def __init__(self, **kwargs):\n    \"\"\"Initialize the OCR processor.\"\"\"\n    super().__init__(**kwargs)\n</code></pre>"},{"location":"reference/aimq/tools/ocr/#aimq.tools.ocr.ImageOCR-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/ocr/#aimq.tools.ocr.ImageOCR.args_schema","title":"<code>args_schema = ImageOCRInput</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/ocr/#aimq.tools.ocr.ImageOCR.description","title":"<code>description = 'Extract text from images using OCR'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/ocr/#aimq.tools.ocr.ImageOCR.model_config","title":"<code>model_config = ConfigDict(arbitrary_types_allowed=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/ocr/#aimq.tools.ocr.ImageOCR.name","title":"<code>name = 'image_ocr'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/ocr/#aimq.tools.ocr.ImageOCR.processor","title":"<code>processor = Field(default_factory=OCRProcessor)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/ocr/#aimq.tools.ocr.ImageOCR-functions","title":"Functions","text":""},{"location":"reference/aimq/tools/ocr/#aimq.tools.ocr.ImageOCRInput","title":"<code>ImageOCRInput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Input for ImageOCR.</p>"},{"location":"reference/aimq/tools/ocr/#aimq.tools.ocr.ImageOCRInput-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/ocr/#aimq.tools.ocr.ImageOCRInput.image","title":"<code>image = Field(..., description='The image file to perform OCR on')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/ocr/#aimq.tools.ocr.ImageOCRInput.save_debug_image","title":"<code>save_debug_image = Field(default=False, description='If True, includes debug image in output showing detected text regions')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/ocr/image_ocr/","title":"aimq.tools.ocr.image_ocr","text":""},{"location":"reference/aimq/tools/ocr/image_ocr/#aimq.tools.ocr.image_ocr","title":"<code>aimq.tools.ocr.image_ocr</code>","text":"<p>Tool for performing OCR on images.</p>"},{"location":"reference/aimq/tools/ocr/image_ocr/#aimq.tools.ocr.image_ocr-classes","title":"Classes","text":""},{"location":"reference/aimq/tools/ocr/image_ocr/#aimq.tools.ocr.image_ocr.ImageOCR","title":"<code>ImageOCR(**kwargs)</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for performing OCR on images.</p> <p>Initialize the OCR processor.</p> Source code in <code>src/aimq/tools/ocr/image_ocr.py</code> <pre><code>def __init__(self, **kwargs):\n    \"\"\"Initialize the OCR processor.\"\"\"\n    super().__init__(**kwargs)\n</code></pre>"},{"location":"reference/aimq/tools/ocr/image_ocr/#aimq.tools.ocr.image_ocr.ImageOCR-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/ocr/image_ocr/#aimq.tools.ocr.image_ocr.ImageOCR.args_schema","title":"<code>args_schema = ImageOCRInput</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/ocr/image_ocr/#aimq.tools.ocr.image_ocr.ImageOCR.description","title":"<code>description = 'Extract text from images using OCR'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/ocr/image_ocr/#aimq.tools.ocr.image_ocr.ImageOCR.model_config","title":"<code>model_config = ConfigDict(arbitrary_types_allowed=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/ocr/image_ocr/#aimq.tools.ocr.image_ocr.ImageOCR.name","title":"<code>name = 'image_ocr'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/ocr/image_ocr/#aimq.tools.ocr.image_ocr.ImageOCR.processor","title":"<code>processor = Field(default_factory=OCRProcessor)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/ocr/image_ocr/#aimq.tools.ocr.image_ocr.ImageOCR-functions","title":"Functions","text":""},{"location":"reference/aimq/tools/ocr/image_ocr/#aimq.tools.ocr.image_ocr.ImageOCRInput","title":"<code>ImageOCRInput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Input for ImageOCR.</p>"},{"location":"reference/aimq/tools/ocr/image_ocr/#aimq.tools.ocr.image_ocr.ImageOCRInput-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/ocr/image_ocr/#aimq.tools.ocr.image_ocr.ImageOCRInput.image","title":"<code>image = Field(..., description='The image file to perform OCR on')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/ocr/image_ocr/#aimq.tools.ocr.image_ocr.ImageOCRInput.save_debug_image","title":"<code>save_debug_image = Field(default=False, description='If True, includes debug image in output showing detected text regions')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/ocr/processor/","title":"aimq.tools.ocr.processor","text":""},{"location":"reference/aimq/tools/ocr/processor/#aimq.tools.ocr.processor","title":"<code>aimq.tools.ocr.processor</code>","text":"<p>OCR module for text extraction and processing from images.</p> <p>This module provides functionality for extracting and processing text from images using the EasyOCR library. It includes utilities for handling text bounding boxes, merging overlapping detections, and creating debug visualizations.</p>"},{"location":"reference/aimq/tools/ocr/processor/#aimq.tools.ocr.processor-classes","title":"Classes","text":""},{"location":"reference/aimq/tools/ocr/processor/#aimq.tools.ocr.processor.OCRProcessor","title":"<code>OCRProcessor(languages=None)</code>","text":"<p>Processor for performing OCR on images using EasyOCR.</p> <p>This class provides a high-level interface for performing OCR on images. It handles initialization of the EasyOCR reader, image preprocessing, text detection, and optional debug visualization.</p> <p>Attributes:</p> Name Type Description <code>languages</code> <p>List of language codes for OCR</p> <code>_reader</code> <p>Lazy-loaded EasyOCR reader instance</p> <p>Initialize OCR processor with specified languages.</p> <p>Parameters:</p> Name Type Description Default <code>languages</code> <code>Optional[List[str]]</code> <p>List of language codes (default: ['en'])</p> <code>None</code> Source code in <code>src/aimq/tools/ocr/processor.py</code> <pre><code>def __init__(self, languages: Optional[List[str]] = None) -&gt; None:\n    \"\"\"Initialize OCR processor with specified languages.\n\n    Args:\n        languages: List of language codes (default: ['en'])\n    \"\"\"\n    self.languages = languages or [\"en\"]\n    self._reader = None\n</code></pre>"},{"location":"reference/aimq/tools/ocr/processor/#aimq.tools.ocr.processor.OCRProcessor-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/ocr/processor/#aimq.tools.ocr.processor.OCRProcessor.languages","title":"<code>languages = languages or ['en']</code>  <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/ocr/processor/#aimq.tools.ocr.processor.OCRProcessor.reader","title":"<code>reader</code>  <code>property</code>","text":"<p>Get or initialize the EasyOCR reader.</p> <p>Returns:</p> Type Description <code>Reader</code> <p>easyocr.Reader: Initialized EasyOCR reader instance</p>"},{"location":"reference/aimq/tools/ocr/processor/#aimq.tools.ocr.processor.OCRProcessor-functions","title":"Functions","text":""},{"location":"reference/aimq/tools/ocr/processor/#aimq.tools.ocr.processor.OCRProcessor.process_image","title":"<code>process_image(image, save_debug_image=False)</code>","text":"<p>Process an image and return OCR results.</p> <p>Parameters:</p> Name Type Description Default <code>image</code> <code>Union[str, Path, Image, bytes]</code> <p>The image to process. Can be one of: - Path to image file (str or Path) - PIL Image object - Bytes of image data</p> required <code>save_debug_image</code> <code>bool</code> <p>If True, includes debug image in output</p> <code>False</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: OCR results including: - processing_time: Time taken to process in seconds - text: Extracted text content - debug_image: Optional base64 encoded debug image - detections: List of text detections with coordinates</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If image format is invalid or unreadable</p> Source code in <code>src/aimq/tools/ocr/processor.py</code> <pre><code>def process_image(\n    self,\n    image: Union[str, Path, Image.Image, bytes],\n    save_debug_image: bool = False,\n) -&gt; Dict[str, Any]:\n    \"\"\"Process an image and return OCR results.\n\n    Args:\n        image: The image to process. Can be one of:\n            - Path to image file (str or Path)\n            - PIL Image object\n            - Bytes of image data\n        save_debug_image: If True, includes debug image in output\n\n    Returns:\n        Dict[str, Any]: OCR results including:\n            - processing_time: Time taken to process in seconds\n            - text: Extracted text content\n            - debug_image: Optional base64 encoded debug image\n            - detections: List of text detections with coordinates\n\n    Raises:\n        ValueError: If image format is invalid or unreadable\n    \"\"\"\n    start_time = time.time()\n\n    # Convert input to a format EasyOCR can process\n    if isinstance(image, (str, Path)):\n        image_path = str(image)\n        pil_image = Image.open(image_path)\n    elif isinstance(image, bytes):\n        image_stream = io.BytesIO(image)\n        pil_image = Image.open(image_stream)  # type: ignore[assignment]\n        image_path = None\n    elif isinstance(image, Image.Image):\n        pil_image = image  # type: ignore[assignment]\n        image_path = None\n    else:\n        raise ValueError(\"Image must be a file path, PIL Image, or bytes\")\n\n    # Convert PIL Image to numpy array for EasyOCR\n    if pil_image.mode != \"RGB\":\n        pil_image = pil_image.convert(\"RGB\")  # type: ignore[assignment]\n    np_image = np.array(pil_image)\n\n    # Read the image with optimized parameters\n    results = self.reader.readtext(\n        np_image,\n        paragraph=False,\n        min_size=20,\n        text_threshold=0.7,\n        link_threshold=0.4,\n        low_text=0.4,\n        width_ths=0.7,\n        height_ths=0.9,\n        ycenter_ths=0.9,\n    )\n\n    # Format initial results\n    detections = []\n    for result in results:\n        if len(result) == 2:\n            bbox, text = result\n            confidence = 1.0\n        else:\n            bbox, text, confidence = result\n\n        x1, y1 = int(bbox[0][0]), int(bbox[0][1])\n        x2, _ = int(bbox[1][0]), int(bbox[1][1])\n        _, y3 = int(bbox[2][0]), int(bbox[2][1])\n        _, _ = int(bbox[3][0]), int(bbox[3][1])\n\n        detections.append(\n            {\n                \"text\": str(text),\n                \"confidence\": float(round(float(confidence), 3)),\n                \"bounding_box\": {\"x\": x1, \"y\": y1, \"width\": x2 - x1, \"height\": y3 - y1},\n            }\n        )\n\n    # Group the detections\n    grouped_detections = group_text_boxes(detections, width_growth=20, height_growth=1)\n\n    end_time = time.time()\n    output = {\n        \"processing_time\": float(round(end_time - start_time, 2)),\n        \"detections\": grouped_detections,\n        \"text\": \" \".join(d[\"text\"] for d in grouped_detections),\n    }\n\n    if save_debug_image:\n        debug_image = self._create_debug_image(pil_image, grouped_detections)\n        # Convert debug image to bytes\n        debug_bytes = io.BytesIO()\n        debug_image.save(debug_bytes, format=\"PNG\")\n        output[\"debug_image\"] = debug_bytes.getvalue()\n\n    return output\n</code></pre>"},{"location":"reference/aimq/tools/ocr/processor/#aimq.tools.ocr.processor-functions","title":"Functions","text":""},{"location":"reference/aimq/tools/ocr/processor/#aimq.tools.ocr.processor.boxes_overlap","title":"<code>boxes_overlap(box1, box2)</code>","text":"<p>Check if two boxes overlap at all.</p> <p>Parameters:</p> Name Type Description Default <code>box1</code> <code>Dict[str, int]</code> <p>Dictionary with x, y, width, height</p> required <code>box2</code> <code>Dict[str, int]</code> <p>Dictionary with x, y, width, height</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if boxes overlap</p> Source code in <code>src/aimq/tools/ocr/processor.py</code> <pre><code>def boxes_overlap(box1: Dict[str, int], box2: Dict[str, int]) -&gt; bool:\n    \"\"\"\n    Check if two boxes overlap at all.\n\n    Args:\n        box1: Dictionary with x, y, width, height\n        box2: Dictionary with x, y, width, height\n\n    Returns:\n        bool: True if boxes overlap\n    \"\"\"\n    h_overlap = box1[\"x\"] &lt; box2[\"x\"] + box2[\"width\"] and box2[\"x\"] &lt; box1[\"x\"] + box1[\"width\"]\n\n    v_overlap = box1[\"y\"] &lt; box2[\"y\"] + box2[\"height\"] and box2[\"y\"] &lt; box1[\"y\"] + box1[\"height\"]\n\n    return h_overlap and v_overlap\n</code></pre>"},{"location":"reference/aimq/tools/ocr/processor/#aimq.tools.ocr.processor.group_text_boxes","title":"<code>group_text_boxes(detections, width_growth=0, height_growth=0)</code>","text":"<p>Group text boxes that are spatially related.</p> <p>This function groups text boxes that are spatially related, starting with overlapping boxes. It can optionally expand boxes horizontally and vertically before grouping to capture nearby text that may be related.</p> <p>Parameters:</p> Name Type Description Default <code>detections</code> <code>List[Dict[str, Any]]</code> <p>List of detection dictionaries containing text and bounding boxes</p> required <code>width_growth</code> <code>int</code> <p>Number of pixels to expand boxes horizontally</p> <code>0</code> <code>height_growth</code> <code>int</code> <p>Number of pixels to expand boxes vertically</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List[Dict[str, Any]]: List of grouped text detections with merged bounding boxes</p> Source code in <code>src/aimq/tools/ocr/processor.py</code> <pre><code>def group_text_boxes(\n    detections: List[Dict[str, Any]], width_growth: int = 0, height_growth: int = 0\n) -&gt; List[Dict[str, Any]]:\n    \"\"\"Group text boxes that are spatially related.\n\n    This function groups text boxes that are spatially related, starting with\n    overlapping boxes. It can optionally expand boxes horizontally and vertically\n    before grouping to capture nearby text that may be related.\n\n    Args:\n        detections: List of detection dictionaries containing text and bounding boxes\n        width_growth: Number of pixels to expand boxes horizontally\n        height_growth: Number of pixels to expand boxes vertically\n\n    Returns:\n        List[Dict[str, Any]]: List of grouped text detections with merged bounding boxes\n    \"\"\"\n    if not detections:\n        return []\n\n    def grow_box(box: Dict[str, int]) -&gt; Dict[str, int]:\n        \"\"\"Helper to expand a box by the growth parameters\"\"\"\n        return {\n            \"x\": box[\"x\"],\n            \"y\": box[\"y\"],\n            \"width\": box[\"width\"] + width_growth,\n            \"height\": box[\"height\"] + height_growth,\n        }\n\n    groups = [[det] for det in detections]\n\n    while True:\n        merged = False\n        new_groups = []\n        used = set()\n\n        for i, group1 in enumerate(groups):\n            if i in used:\n                continue\n\n            merged_group = group1.copy()\n            used.add(i)\n\n            merged_box1 = merge_boxes([det[\"bounding_box\"] for det in merged_group])\n            assert merged_box1 is not None  # Groups are never empty\n            box1 = grow_box(merged_box1)\n\n            for j, group2 in enumerate(groups):\n                if j in used:\n                    continue\n\n                box2 = merge_boxes([det[\"bounding_box\"] for det in group2])\n                assert box2 is not None  # Groups are never empty\n\n                if boxes_overlap(box1, box2):\n                    merged_group.extend(group2)\n                    used.add(j)\n                    merged_box1 = merge_boxes([det[\"bounding_box\"] for det in merged_group])\n                    assert merged_box1 is not None  # Groups are never empty\n                    box1 = grow_box(merged_box1)\n                    merged = True\n\n            new_groups.append(merged_group)\n\n        if not merged:\n            break\n\n        groups = new_groups\n\n    return [\n        {\n            \"text\": \" \".join(\n                det[\"text\"]\n                for det in sorted(\n                    group, key=lambda d: (d[\"bounding_box\"][\"y\"], d[\"bounding_box\"][\"x\"])\n                )\n            ),\n            \"confidence\": float(round(sum(det[\"confidence\"] for det in group) / len(group), 3)),\n            \"bounding_box\": merge_boxes([det[\"bounding_box\"] for det in group]),\n        }\n        for group in groups\n    ]\n</code></pre>"},{"location":"reference/aimq/tools/ocr/processor/#aimq.tools.ocr.processor.merge_boxes","title":"<code>merge_boxes(boxes)</code>","text":"<p>Merge a list of bounding boxes into a single box that encompasses all of them.</p> <p>Parameters:</p> Name Type Description Default <code>boxes</code> <code>List[Dict[str, int]]</code> <p>List of dictionaries with x, y, width, height</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>Optional[Dict[str, int]]</code> <p>Merged bounding box or None if input is empty</p> Source code in <code>src/aimq/tools/ocr/processor.py</code> <pre><code>def merge_boxes(boxes: List[Dict[str, int]]) -&gt; Optional[Dict[str, int]]:\n    \"\"\"\n    Merge a list of bounding boxes into a single box that encompasses all of them.\n\n    Args:\n        boxes: List of dictionaries with x, y, width, height\n\n    Returns:\n        dict: Merged bounding box or None if input is empty\n    \"\"\"\n    if not boxes:\n        return None\n\n    min_x = min(box[\"x\"] for box in boxes)\n    min_y = min(box[\"y\"] for box in boxes)\n    max_x = max(box[\"x\"] + box[\"width\"] for box in boxes)\n    max_y = max(box[\"y\"] + box[\"height\"] for box in boxes)\n\n    return {\n        \"x\": int(min_x),\n        \"y\": int(min_y),\n        \"width\": int(max_x - min_x),\n        \"height\": int(max_y - min_y),\n    }\n</code></pre>"},{"location":"reference/aimq/tools/pdf/","title":"aimq.tools.pdf","text":""},{"location":"reference/aimq/tools/pdf/#aimq.tools.pdf","title":"<code>aimq.tools.pdf</code>","text":"<p>PDF tools for processing and manipulating PDF files.</p>"},{"location":"reference/aimq/tools/pdf/#aimq.tools.pdf-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/pdf/#aimq.tools.pdf.__all__","title":"<code>__all__ = ['PageSplitter']</code>  <code>module-attribute</code>","text":""},{"location":"reference/aimq/tools/pdf/#aimq.tools.pdf-classes","title":"Classes","text":""},{"location":"reference/aimq/tools/pdf/#aimq.tools.pdf.PageSplitter","title":"<code>PageSplitter</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for splitting PDF into pages.</p>"},{"location":"reference/aimq/tools/pdf/#aimq.tools.pdf.PageSplitter-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/pdf/#aimq.tools.pdf.PageSplitter.args_schema","title":"<code>args_schema = PageSplitterInput</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/pdf/#aimq.tools.pdf.PageSplitter.description","title":"<code>description = 'Split a PDF file into individual pages'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/pdf/#aimq.tools.pdf.PageSplitter.name","title":"<code>name = 'pdf_page_splitter'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/pdf/#aimq.tools.pdf-functions","title":"Functions","text":""},{"location":"reference/aimq/tools/pdf/#aimq.tools.pdf.get_tools","title":"<code>get_tools()</code>","text":"<p>Get all PDF tools.</p> Source code in <code>src/aimq/tools/pdf/__init__.py</code> <pre><code>def get_tools() -&gt; List[BaseTool]:\n    \"\"\"Get all PDF tools.\"\"\"\n    tools: List[BaseTool] = [\n        PageSplitter(),\n    ]\n    return tools\n</code></pre>"},{"location":"reference/aimq/tools/pdf/page_splitter/","title":"aimq.tools.pdf.page_splitter","text":""},{"location":"reference/aimq/tools/pdf/page_splitter/#aimq.tools.pdf.page_splitter","title":"<code>aimq.tools.pdf.page_splitter</code>","text":"<p>Tool for splitting PDFs into individual pages.</p>"},{"location":"reference/aimq/tools/pdf/page_splitter/#aimq.tools.pdf.page_splitter-classes","title":"Classes","text":""},{"location":"reference/aimq/tools/pdf/page_splitter/#aimq.tools.pdf.page_splitter.PageSplitter","title":"<code>PageSplitter</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for splitting PDF into pages.</p>"},{"location":"reference/aimq/tools/pdf/page_splitter/#aimq.tools.pdf.page_splitter.PageSplitter-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/pdf/page_splitter/#aimq.tools.pdf.page_splitter.PageSplitter.args_schema","title":"<code>args_schema = PageSplitterInput</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/pdf/page_splitter/#aimq.tools.pdf.page_splitter.PageSplitter.description","title":"<code>description = 'Split a PDF file into individual pages'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/pdf/page_splitter/#aimq.tools.pdf.page_splitter.PageSplitter.name","title":"<code>name = 'pdf_page_splitter'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/pdf/page_splitter/#aimq.tools.pdf.page_splitter.PageSplitterInput","title":"<code>PageSplitterInput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Input for PageSplitter.</p>"},{"location":"reference/aimq/tools/pdf/page_splitter/#aimq.tools.pdf.page_splitter.PageSplitterInput-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/pdf/page_splitter/#aimq.tools.pdf.page_splitter.PageSplitterInput.file","title":"<code>file = Field(..., description='The PDF file to split into pages')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/","title":"aimq.tools.supabase","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase","title":"<code>aimq.tools.supabase</code>","text":"<p>Supabase tools for interacting with Supabase services.</p>"},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.__all__","title":"<code>__all__ = ['ReadRecord', 'WriteRecord', 'ReadFile', 'WriteFile', 'Enqueue']</code>  <code>module-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase-classes","title":"Classes","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.Enqueue","title":"<code>Enqueue</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for enqueueing jobs to Supabase Queue.</p>"},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.Enqueue-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.Enqueue.args_schema","title":"<code>args_schema = EnqueueInput</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.Enqueue.description","title":"<code>description = 'Send a job to a Supabase Queue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.Enqueue.formater","title":"<code>formater = Field('mustache', description='The format to use for the template')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.Enqueue.name","title":"<code>name = 'enqueue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.Enqueue.queue","title":"<code>queue = Field('{{queue}}', description='The queue template to send the job to')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.ReadFile","title":"<code>ReadFile</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for reading files from Supabase Storage.</p>"},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.ReadFile-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.ReadFile.args_schema","title":"<code>args_schema = ReadFileInput</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.ReadFile.bucket","title":"<code>bucket = Field('{{bucket}}', description='The storage bucket template to read the file from')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.ReadFile.description","title":"<code>description = 'Read a file from Supabase Storage'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.ReadFile.formater","title":"<code>formater = Field('mustache', description='The format to use for the template')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.ReadFile.name","title":"<code>name = 'read_file'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.ReadFile.path","title":"<code>path = Field('{{path}}', description='The path template to use for the file')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.ReadRecord","title":"<code>ReadRecord</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for reading records from Supabase.</p>"},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.ReadRecord-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.ReadRecord.args_schema","title":"<code>args_schema = ReadRecordInput</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.ReadRecord.description","title":"<code>description = 'Read a record from Supabase'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.ReadRecord.name","title":"<code>name = 'read_record'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.ReadRecord.select","title":"<code>select = '*'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.ReadRecord.table","title":"<code>table = 'records'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.WriteFile","title":"<code>WriteFile</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for writing files to Supabase Storage.</p>"},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.WriteFile-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.WriteFile.args_schema","title":"<code>args_schema = WriteFileInput</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.WriteFile.bucket","title":"<code>bucket = Field('{{bucket}}', description='The storage bucket template to read the file from')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.WriteFile.description","title":"<code>description = 'Write a file to Supabase Storage'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.WriteFile.formater","title":"<code>formater = Field('mustache', description='The format to use for the template')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.WriteFile.name","title":"<code>name = 'write_file'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.WriteFile.path","title":"<code>path = Field('{{path}}', description='The path template to use for the file')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.WriteRecord","title":"<code>WriteRecord</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for writing records to Supabase.</p>"},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.WriteRecord-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.WriteRecord.args_schema","title":"<code>args_schema = WriteRecordInput</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.WriteRecord.description","title":"<code>description = 'Write a record to Supabase. If an ID is provided, updates existing record; otherwise creates new record.'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.WriteRecord.name","title":"<code>name = 'write_record'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase-functions","title":"Functions","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.get_tools","title":"<code>get_tools()</code>","text":"<p>Get all Supabase tools.</p> Source code in <code>src/aimq/tools/supabase/__init__.py</code> <pre><code>def get_tools() -&gt; List[BaseTool]:\n    \"\"\"Get all Supabase tools.\"\"\"\n    tools: List[BaseTool] = [\n        ReadRecord(),\n        WriteRecord(),\n        ReadFile(),  # type: ignore[call-arg]\n        WriteFile(),  # type: ignore[call-arg]\n    ]\n    return tools\n</code></pre>"},{"location":"reference/aimq/tools/supabase/enqueue/","title":"aimq.tools.supabase.enqueue","text":""},{"location":"reference/aimq/tools/supabase/enqueue/#aimq.tools.supabase.enqueue","title":"<code>aimq.tools.supabase.enqueue</code>","text":"<p>Tool for enqueueing jobs to Supabase Queue.</p>"},{"location":"reference/aimq/tools/supabase/enqueue/#aimq.tools.supabase.enqueue-classes","title":"Classes","text":""},{"location":"reference/aimq/tools/supabase/enqueue/#aimq.tools.supabase.enqueue.Enqueue","title":"<code>Enqueue</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for enqueueing jobs to Supabase Queue.</p>"},{"location":"reference/aimq/tools/supabase/enqueue/#aimq.tools.supabase.enqueue.Enqueue-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/enqueue/#aimq.tools.supabase.enqueue.Enqueue.args_schema","title":"<code>args_schema = EnqueueInput</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/enqueue/#aimq.tools.supabase.enqueue.Enqueue.description","title":"<code>description = 'Send a job to a Supabase Queue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/enqueue/#aimq.tools.supabase.enqueue.Enqueue.formater","title":"<code>formater = Field('mustache', description='The format to use for the template')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/enqueue/#aimq.tools.supabase.enqueue.Enqueue.name","title":"<code>name = 'enqueue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/enqueue/#aimq.tools.supabase.enqueue.Enqueue.queue","title":"<code>queue = Field('{{queue}}', description='The queue template to send the job to')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/enqueue/#aimq.tools.supabase.enqueue.EnqueueInput","title":"<code>EnqueueInput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Input for Enqueue.</p>"},{"location":"reference/aimq/tools/supabase/enqueue/#aimq.tools.supabase.enqueue.EnqueueInput-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/enqueue/#aimq.tools.supabase.enqueue.EnqueueInput.data","title":"<code>data = Field(..., description='The job data to enqueue')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/enqueue/#aimq.tools.supabase.enqueue.EnqueueInput.delay","title":"<code>delay = Field(None, description='Optional delay in seconds before the job becomes available')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/enqueue/#aimq.tools.supabase.enqueue.EnqueueInput.queue","title":"<code>queue = Field(None, description='The queue name to send the job to')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/get_url/","title":"aimq.tools.supabase.get_url","text":""},{"location":"reference/aimq/tools/supabase/get_url/#aimq.tools.supabase.get_url","title":"<code>aimq.tools.supabase.get_url</code>","text":"<p>Tool for getting the signed URL of a file in Supabase Storage.</p>"},{"location":"reference/aimq/tools/supabase/get_url/#aimq.tools.supabase.get_url-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/get_url/#aimq.tools.supabase.get_url-classes","title":"Classes","text":""},{"location":"reference/aimq/tools/supabase/get_url/#aimq.tools.supabase.get_url.GetUrl","title":"<code>GetUrl</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for getting the signed URL of a file in Supabase Storage.</p>"},{"location":"reference/aimq/tools/supabase/get_url/#aimq.tools.supabase.get_url.GetUrl-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/get_url/#aimq.tools.supabase.get_url.GetUrl.args_schema","title":"<code>args_schema = GetUrlInput</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/get_url/#aimq.tools.supabase.get_url.GetUrl.bucket","title":"<code>bucket = Field('{{bucket}}', description='The storage bucket to read the file from')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/get_url/#aimq.tools.supabase.get_url.GetUrl.description","title":"<code>description = 'Get the signed URL of a file in Supabase Storage'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/get_url/#aimq.tools.supabase.get_url.GetUrl.formater","title":"<code>formater = Field('mustache', description='The format to use for the template')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/get_url/#aimq.tools.supabase.get_url.GetUrl.name","title":"<code>name = 'get_url'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/get_url/#aimq.tools.supabase.get_url.GetUrl.path","title":"<code>path = Field('{{path}}', description='The path of the file')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/get_url/#aimq.tools.supabase.get_url.GetUrlInput","title":"<code>GetUrlInput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Input for GetUrl.</p>"},{"location":"reference/aimq/tools/supabase/get_url/#aimq.tools.supabase.get_url.GetUrlInput-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/get_url/#aimq.tools.supabase.get_url.GetUrlInput.bucket","title":"<code>bucket = Field('files', description='The storage bucket to read the file from')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/get_url/#aimq.tools.supabase.get_url.GetUrlInput.metadata","title":"<code>metadata = Field(None, description='Additional metadata to attach to the file')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/get_url/#aimq.tools.supabase.get_url.GetUrlInput.path","title":"<code>path = Field(..., description='The path of the file')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/read_file/","title":"aimq.tools.supabase.read_file","text":""},{"location":"reference/aimq/tools/supabase/read_file/#aimq.tools.supabase.read_file","title":"<code>aimq.tools.supabase.read_file</code>","text":"<p>Tool for reading files from Supabase Storage.</p>"},{"location":"reference/aimq/tools/supabase/read_file/#aimq.tools.supabase.read_file-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/read_file/#aimq.tools.supabase.read_file-classes","title":"Classes","text":""},{"location":"reference/aimq/tools/supabase/read_file/#aimq.tools.supabase.read_file.ReadFile","title":"<code>ReadFile</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for reading files from Supabase Storage.</p>"},{"location":"reference/aimq/tools/supabase/read_file/#aimq.tools.supabase.read_file.ReadFile-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/read_file/#aimq.tools.supabase.read_file.ReadFile.args_schema","title":"<code>args_schema = ReadFileInput</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/read_file/#aimq.tools.supabase.read_file.ReadFile.bucket","title":"<code>bucket = Field('{{bucket}}', description='The storage bucket template to read the file from')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/read_file/#aimq.tools.supabase.read_file.ReadFile.description","title":"<code>description = 'Read a file from Supabase Storage'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/read_file/#aimq.tools.supabase.read_file.ReadFile.formater","title":"<code>formater = Field('mustache', description='The format to use for the template')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/read_file/#aimq.tools.supabase.read_file.ReadFile.name","title":"<code>name = 'read_file'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/read_file/#aimq.tools.supabase.read_file.ReadFile.path","title":"<code>path = Field('{{path}}', description='The path template to use for the file')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/read_file/#aimq.tools.supabase.read_file.ReadFileInput","title":"<code>ReadFileInput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Input for ReadFile.</p>"},{"location":"reference/aimq/tools/supabase/read_file/#aimq.tools.supabase.read_file.ReadFileInput-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/read_file/#aimq.tools.supabase.read_file.ReadFileInput.bucket","title":"<code>bucket = Field('files', description='The storage bucket to read the file from')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/read_file/#aimq.tools.supabase.read_file.ReadFileInput.metadata","title":"<code>metadata = Field(None, description='Additional metadata to attach to the file')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/read_file/#aimq.tools.supabase.read_file.ReadFileInput.path","title":"<code>path = Field(..., description='The path values to apply to the template path')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/read_record/","title":"aimq.tools.supabase.read_record","text":""},{"location":"reference/aimq/tools/supabase/read_record/#aimq.tools.supabase.read_record","title":"<code>aimq.tools.supabase.read_record</code>","text":"<p>Tool for reading records from Supabase.</p>"},{"location":"reference/aimq/tools/supabase/read_record/#aimq.tools.supabase.read_record-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/read_record/#aimq.tools.supabase.read_record-classes","title":"Classes","text":""},{"location":"reference/aimq/tools/supabase/read_record/#aimq.tools.supabase.read_record.ReadRecord","title":"<code>ReadRecord</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for reading records from Supabase.</p>"},{"location":"reference/aimq/tools/supabase/read_record/#aimq.tools.supabase.read_record.ReadRecord-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/read_record/#aimq.tools.supabase.read_record.ReadRecord.args_schema","title":"<code>args_schema = ReadRecordInput</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/read_record/#aimq.tools.supabase.read_record.ReadRecord.description","title":"<code>description = 'Read a record from Supabase'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/read_record/#aimq.tools.supabase.read_record.ReadRecord.name","title":"<code>name = 'read_record'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/read_record/#aimq.tools.supabase.read_record.ReadRecord.select","title":"<code>select = '*'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/read_record/#aimq.tools.supabase.read_record.ReadRecord.table","title":"<code>table = 'records'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/read_record/#aimq.tools.supabase.read_record.ReadRecordInput","title":"<code>ReadRecordInput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Input for ReadRecord.</p>"},{"location":"reference/aimq/tools/supabase/read_record/#aimq.tools.supabase.read_record.ReadRecordInput-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/read_record/#aimq.tools.supabase.read_record.ReadRecordInput.id","title":"<code>id = Field(..., description='The ID of the record to read')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/read_record/#aimq.tools.supabase.read_record.ReadRecordInput.select","title":"<code>select = Field(None, description='The columns to select')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/read_record/#aimq.tools.supabase.read_record.ReadRecordInput.table","title":"<code>table = Field(None, description='The table to read from')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/write_file/","title":"aimq.tools.supabase.write_file","text":""},{"location":"reference/aimq/tools/supabase/write_file/#aimq.tools.supabase.write_file","title":"<code>aimq.tools.supabase.write_file</code>","text":"<p>Tool for writing files to Supabase Storage.</p>"},{"location":"reference/aimq/tools/supabase/write_file/#aimq.tools.supabase.write_file-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/write_file/#aimq.tools.supabase.write_file-classes","title":"Classes","text":""},{"location":"reference/aimq/tools/supabase/write_file/#aimq.tools.supabase.write_file.WriteFile","title":"<code>WriteFile</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for writing files to Supabase Storage.</p>"},{"location":"reference/aimq/tools/supabase/write_file/#aimq.tools.supabase.write_file.WriteFile-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/write_file/#aimq.tools.supabase.write_file.WriteFile.args_schema","title":"<code>args_schema = WriteFileInput</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/write_file/#aimq.tools.supabase.write_file.WriteFile.bucket","title":"<code>bucket = Field('{{bucket}}', description='The storage bucket template to read the file from')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/write_file/#aimq.tools.supabase.write_file.WriteFile.description","title":"<code>description = 'Write a file to Supabase Storage'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/write_file/#aimq.tools.supabase.write_file.WriteFile.formater","title":"<code>formater = Field('mustache', description='The format to use for the template')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/write_file/#aimq.tools.supabase.write_file.WriteFile.name","title":"<code>name = 'write_file'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/write_file/#aimq.tools.supabase.write_file.WriteFile.path","title":"<code>path = Field('{{path}}', description='The path template to use for the file')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/write_file/#aimq.tools.supabase.write_file.WriteFileInput","title":"<code>WriteFileInput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Input for WriteFile.</p>"},{"location":"reference/aimq/tools/supabase/write_file/#aimq.tools.supabase.write_file.WriteFileInput-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/write_file/#aimq.tools.supabase.write_file.WriteFileInput.bucket","title":"<code>bucket = Field('files', description='The storage bucket to read the file from')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/write_file/#aimq.tools.supabase.write_file.WriteFileInput.file","title":"<code>file = Field(..., description='The file to write')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/write_file/#aimq.tools.supabase.write_file.WriteFileInput.metadata","title":"<code>metadata = Field(None, description='Additional metadata to attach to the file')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/write_file/#aimq.tools.supabase.write_file.WriteFileInput.path","title":"<code>path = Field(None, description='The path values to apply to the template path')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/write_record/","title":"aimq.tools.supabase.write_record","text":""},{"location":"reference/aimq/tools/supabase/write_record/#aimq.tools.supabase.write_record","title":"<code>aimq.tools.supabase.write_record</code>","text":"<p>Tool for writing records to Supabase.</p>"},{"location":"reference/aimq/tools/supabase/write_record/#aimq.tools.supabase.write_record-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/write_record/#aimq.tools.supabase.write_record-classes","title":"Classes","text":""},{"location":"reference/aimq/tools/supabase/write_record/#aimq.tools.supabase.write_record.WriteRecord","title":"<code>WriteRecord</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for writing records to Supabase.</p>"},{"location":"reference/aimq/tools/supabase/write_record/#aimq.tools.supabase.write_record.WriteRecord-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/write_record/#aimq.tools.supabase.write_record.WriteRecord.args_schema","title":"<code>args_schema = WriteRecordInput</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/write_record/#aimq.tools.supabase.write_record.WriteRecord.description","title":"<code>description = 'Write a record to Supabase. If an ID is provided, updates existing record; otherwise creates new record.'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/write_record/#aimq.tools.supabase.write_record.WriteRecord.name","title":"<code>name = 'write_record'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/write_record/#aimq.tools.supabase.write_record.WriteRecordInput","title":"<code>WriteRecordInput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Input for WriteRecord.</p>"},{"location":"reference/aimq/tools/supabase/write_record/#aimq.tools.supabase.write_record.WriteRecordInput-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/write_record/#aimq.tools.supabase.write_record.WriteRecordInput.data","title":"<code>data = Field(..., description='The data to write')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/write_record/#aimq.tools.supabase.write_record.WriteRecordInput.id","title":"<code>id = Field(..., description='The ID of the record to update (if updating existing record)')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/write_record/#aimq.tools.supabase.write_record.WriteRecordInput.table","title":"<code>table = Field(..., description='The table to write to')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"user-guide/document-processing/","title":"Document Processing","text":"<p>This guide covers AIMQ's document processing capabilities.</p>"},{"location":"user-guide/document-processing/#supported-document-types","title":"Supported Document Types","text":"<p>AIMQ supports processing various document types:</p> <ul> <li>Images (JPG, PNG, TIFF, etc.)</li> <li>PDFs</li> <li>Text documents</li> <li>Scanned documents</li> </ul>"},{"location":"user-guide/document-processing/#processing-pipeline","title":"Processing Pipeline","text":""},{"location":"user-guide/document-processing/#1-document-upload","title":"1. Document Upload","text":"<pre><code>from aimq.attachment import Attachment\n\n# Create attachment from file\nattachment = Attachment.from_file(\"document.pdf\")\n\n# Or from bytes\nattachment = Attachment.from_bytes(file_bytes, \"application/pdf\")\n</code></pre>"},{"location":"user-guide/document-processing/#2-document-analysis","title":"2. Document Analysis","text":"<pre><code>from aimq.tools.pdf import PDFProcessor\nfrom aimq.tools.ocr import ImageOCR\n\n# Process PDF\npdf_processor = PDFProcessor()\npdf_result = pdf_processor.process(attachment)\n\n# Process image with OCR\nocr = ImageOCR()\nocr_result = ocr.process(attachment)\n</code></pre>"},{"location":"user-guide/document-processing/#3-result-processing","title":"3. Result Processing","text":"<pre><code># Extract text\ntext = result[\"text\"]\n\n# Get metadata\nmetadata = result[\"metadata\"]\n\n# Access debug information\ndebug_info = result[\"debug\"]\n</code></pre>"},{"location":"user-guide/document-processing/#processing-tools","title":"Processing Tools","text":""},{"location":"user-guide/document-processing/#ocr-processing","title":"OCR Processing","text":"<pre><code>from aimq.tools.ocr import ImageOCR\n\nocr = ImageOCR()\n\n# Basic processing\nresult = ocr.process(image_attachment)\n\n# With debug visualization\nresult = ocr.process(image_attachment, save_debug_image=True)\ndebug_image = result[\"debug_image\"]\n</code></pre>"},{"location":"user-guide/document-processing/#pdf-processing","title":"PDF Processing","text":"<pre><code>from aimq.tools.pdf import PDFProcessor\n\nprocessor = PDFProcessor()\n\n# Process entire PDF\nresult = processor.process(pdf_attachment)\n\n# Process specific pages\nresult = processor.process(pdf_attachment, pages=[1, 3, 5])\n</code></pre>"},{"location":"user-guide/document-processing/#integration-with-queue-processing","title":"Integration with Queue Processing","text":"<pre><code>from aimq import Worker\nfrom aimq.tools.ocr import ImageOCR\n\nworker = Worker()\nworker.register_queue(\"documents\")\nocr = ImageOCR()\n\n@worker.processor(\"documents\")\nasync def process_document(job):\n    attachment = job.data[\"attachment\"]\n\n    # Process based on file type\n    if attachment.is_image():\n        return ocr.process(attachment)\n    elif attachment.is_pdf():\n        return pdf_processor.process(attachment)\n    else:\n        raise ValueError(f\"Unsupported file type: {attachment.mime_type}\")\n</code></pre>"},{"location":"user-guide/document-processing/#best-practices","title":"Best Practices","text":"<ol> <li> <p>File Type Validation <pre><code>if not attachment.is_supported():\n    raise ValueError(f\"Unsupported file type: {attachment.mime_type}\")\n</code></pre></p> </li> <li> <p>Error Handling <pre><code>try:\n    result = processor.process(attachment)\nexcept ProcessingError as e:\n    logger.error(f\"Processing failed: {e}\")\n    raise\n</code></pre></p> </li> <li> <p>Resource Management <pre><code>with attachment.open() as file:\n    result = processor.process(file)\n</code></pre></p> </li> <li> <p>Debug Mode <pre><code># Enable debug mode for more information\nprocessor.enable_debug()\nresult = processor.process(attachment)\ndebug_info = result[\"debug\"]\n</code></pre></p> </li> </ol>"},{"location":"user-guide/helpers/","title":"Helper Functions","text":"<p>AIMQ provides a set of helper functions to simplify working with LangChain runnables and task composition. These helpers are designed to make it easier to build and chain together different components of your AI workflows.</p>"},{"location":"user-guide/helpers/#available-helpers","title":"Available Helpers","text":""},{"location":"user-guide/helpers/#echo","title":"echo","text":"<pre><code>@chain\ndef echo(input: T) -&gt; T\n</code></pre> <p>Echo the input value back while also printing it to stdout. This is useful for debugging and monitoring the flow of data through your pipeline.</p> <p>Example:</p> <pre><code>from aimq.helpers import echo\n\nresult = echo(\"Testing pipeline\") | next_step\n# Prints: Testing pipeline\n# And passes \"Testing pipeline\" to next_step\n</code></pre>"},{"location":"user-guide/helpers/#select","title":"select","text":"<pre><code>def select(key: str | list[str] | dict[str, str] | None = None) -&gt; Runnable\n</code></pre> <p>Creates a runnable that selects specific keys from the input. This is particularly useful when you need to reshape or filter data between pipeline steps.</p> <p>Options:</p> <ul> <li><code>None</code>: Pass through the entire input</li> <li><code>str</code>: Select a single key</li> <li><code>list[str]</code>: Select multiple keys</li> <li><code>dict[str, str]</code>: Map old keys to new keys</li> </ul> <p>Example:</p> <pre><code>from aimq.helpers import select\n\n# Select a single key\nsingle = select(\"content\")\n\n# Select multiple keys\nmultiple = select([\"content\", \"metadata\"])\n\n# Rename keys\nrenamed = select({\"old_key\": \"new_key\"})\n</code></pre>"},{"location":"user-guide/helpers/#const","title":"const","text":"<pre><code>def const(value: T) -&gt; Callable[[Any], T]\n</code></pre> <p>Creates a function that always returns a constant value. This is useful when you need to inject constant values into your pipeline.</p> <p>Example:</p> <pre><code>from aimq.helpers import const\n\n# Add a constant model parameter\npipeline = pipeline | assign({\"model\": const(\"gpt-4\")})\n</code></pre>"},{"location":"user-guide/helpers/#assign","title":"assign","text":"<pre><code>def assign(runnables: dict[str, Any] = {}) -&gt; RunnableAssign\n</code></pre> <p>Creates a RunnableAssign from a dictionary of runnables or constant values. This helper makes it easy to add or modify data in your pipeline.</p> <p>Example:</p> <pre><code>from aimq.helpers import assign, const\n\n# Add multiple values\npipeline = pipeline | assign({\n    \"model\": const(\"gpt-4\"),\n    \"temperature\": const(0.7),\n    \"processed_text\": text_processor\n})\n</code></pre>"},{"location":"user-guide/helpers/#pick","title":"pick","text":"<pre><code>def pick(key: str | list[str]) -&gt; RunnablePick\n</code></pre> <p>Creates a RunnablePick to select specific keys from the input. Similar to <code>select</code> but more focused on simple key selection.</p> <p>Example:</p> <pre><code>from aimq.helpers import pick\n\n# Pick a single key\nresult = pipeline | pick(\"content\")\n\n# Pick multiple keys\nresult = pipeline | pick([\"content\", \"metadata\"])\n</code></pre>"},{"location":"user-guide/helpers/#orig","title":"orig","text":"<pre><code>def orig(key: str | list[str] | None = None) -&gt; Runnable[Any, dict[str, Any]]\n</code></pre> <p>Creates a runnable that retrieves the original configuration. This is useful when you need to access the initial configuration later in your pipeline.</p> <p>Example:</p> <pre><code>from aimq.helpers import orig\n\n# Get all original config\nconfig = pipeline | orig()\n\n# Get specific config keys\nmodel_config = pipeline | orig([\"model\", \"temperature\"])\n</code></pre>"},{"location":"user-guide/helpers/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Pipeline Composition</p> </li> <li> <p>Use <code>select</code> when you need to reshape data between steps</p> </li> <li>Use <code>assign</code> to add new data or transform existing data</li> <li> <p>Use <code>echo</code> for debugging complex pipelines</p> </li> <li> <p>Data Flow</p> </li> <li> <p>Keep your data transformations clear and explicit</p> </li> <li>Use type hints to ensure type safety</li> <li> <p>Document any assumptions about data structure</p> </li> <li> <p>Error Handling</p> </li> <li> <p>Handle potential errors when selecting non-existent keys</p> </li> <li>Validate input data structure before processing</li> <li>Use appropriate error messages for debugging</li> </ol>"},{"location":"user-guide/ocr/","title":"OCR (Optical Character Recognition)","text":"<p>This guide covers AIMQ's OCR capabilities for extracting text from images using EasyOCR.</p>"},{"location":"user-guide/ocr/#overview","title":"Overview","text":"<p>AIMQ provides two main interfaces for OCR:</p> <ul> <li><code>OCRProcessor</code>: Low-level processor for direct image processing</li> <li><code>ImageOCR</code>: LangChain tool for integration with AI workflows</li> </ul>"},{"location":"user-guide/ocr/#basic-usage","title":"Basic Usage","text":""},{"location":"user-guide/ocr/#using-ocrprocessor-directly","title":"Using OCRProcessor Directly","text":"<pre><code>from aimq.tools.ocr.processor import OCRProcessor\nfrom PIL import Image\n\n# Initialize processor\nprocessor = OCRProcessor(languages=[\"en\"])\n\n# Process an image (supports multiple input formats)\nresult = processor.process_image(\"image.jpg\")\nprint(result[\"text\"])\nprint(f\"Processing time: {result['processing_time']}s\")\n\n# View individual text detections\nfor detection in result[\"detections\"]:\n    print(f\"Text: {detection['text']}\")\n    print(f\"Confidence: {detection['confidence']}\")\n    print(f\"Position: {detection['bounding_box']}\")\n</code></pre>"},{"location":"user-guide/ocr/#supported-input-formats","title":"Supported Input Formats","text":"<pre><code># From file path\nresult = processor.process_image(\"image.jpg\")\n\n# From PIL Image\nfrom PIL import Image\nimg = Image.open(\"image.jpg\")\nresult = processor.process_image(img)\n\n# From bytes\nwith open(\"image.jpg\", \"rb\") as f:\n    image_bytes = f.read()\nresult = processor.process_image(image_bytes)\n</code></pre>"},{"location":"user-guide/ocr/#features","title":"Features","text":""},{"location":"user-guide/ocr/#multi-language-support","title":"Multi-language Support","text":"<pre><code># Initialize with multiple languages\nprocessor = OCRProcessor(languages=[\"en\", \"es\", \"fr\", \"de\"])\n\n# Process multilingual document\nresult = processor.process_image(\"multilingual.jpg\")\n</code></pre> <p>Supported languages (partial list): - <code>en</code>: English - <code>es</code>: Spanish - <code>fr</code>: French - <code>de</code>: German - <code>ja</code>: Japanese - <code>zh</code>: Chinese - See EasyOCR documentation for full list</p>"},{"location":"user-guide/ocr/#debug-visualization","title":"Debug Visualization","text":"<p>Get a debug image with bounding boxes drawn around detected text:</p> <pre><code>result = processor.process_image(\"document.jpg\", save_debug_image=True)\n\n# Access debug image bytes\ndebug_image_bytes = result[\"debug_image\"]\n\n# Save debug image\nfrom PIL import Image\nimport io\ndebug_img = Image.open(io.BytesIO(debug_image_bytes))\ndebug_img.save(\"debug_output.png\")\n</code></pre>"},{"location":"user-guide/ocr/#text-detection-details","title":"Text Detection Details","text":"<pre><code>result = processor.process_image(\"document.jpg\")\n\n# Full extracted text\nprint(result[\"text\"])\n\n# Individual detections with positions and confidence\nfor detection in result[\"detections\"]:\n    text = detection[\"text\"]\n    confidence = detection[\"confidence\"]  # 0.0 to 1.0\n    bbox = detection[\"bounding_box\"]  # {x, y, width, height}\n\n    print(f\"{text} ({confidence:.2%} confident)\")\n    print(f\"  Position: x={bbox['x']}, y={bbox['y']}\")\n</code></pre>"},{"location":"user-guide/ocr/#integration-with-aimq-workers","title":"Integration with AIMQ Workers","text":""},{"location":"user-guide/ocr/#using-as-a-langchain-tool","title":"Using as a LangChain Tool","text":"<pre><code>from aimq import Worker\nfrom aimq.tools.ocr import ImageOCR\nfrom aimq.attachment import Attachment\n\nworker = Worker()\n\n# ImageOCR is a LangChain BaseTool\nocr_tool = ImageOCR()\n\n@worker.task(queue=\"ocr-processing\")\ndef process_document(data):\n    \"\"\"Process document with OCR.\"\"\"\n    # Create attachment from image data\n    attachment = Attachment(data=data[\"image_bytes\"])\n\n    # Use the OCR tool (using public invoke API)\n    result = ocr_tool.invoke({\n        \"image\": attachment,\n        \"save_debug_image\": True\n    })\n\n    return {\n        \"text\": result[\"text\"],\n        \"confidence\": sum(d[\"confidence\"] for d in result[\"detections\"]) / len(result[\"detections\"]),\n        \"processing_time\": result[\"processing_time\"]\n    }\n</code></pre>"},{"location":"user-guide/ocr/#processing-from-supabase-storage","title":"Processing from Supabase Storage","text":"<pre><code>from aimq import Worker\nfrom aimq.tools.ocr.processor import OCRProcessor\nfrom aimq.tools.supabase import read_file\n\nworker = Worker()\nprocessor = OCRProcessor()\n\n@worker.task(queue=\"document-ocr\")\ndef process_stored_document(data):\n    \"\"\"Process document from Supabase storage.\"\"\"\n    # Read file from Supabase storage (returns dict with \"file\" key containing Attachment)\n    result = read_file.invoke({\n        \"bucket\": \"documents\",\n        \"path\": data[\"document_path\"]\n    })\n\n    # Process image bytes with OCR (extract bytes from Attachment)\n    ocr_result = processor.process_image(result[\"file\"].data)\n\n    return {\n        \"text\": ocr_result[\"text\"],\n        \"detections\": ocr_result[\"detections\"]\n    }\n</code></pre>"},{"location":"user-guide/ocr/#performance-optimization","title":"Performance Optimization","text":""},{"location":"user-guide/ocr/#image-quality-recommendations","title":"Image Quality Recommendations","text":"<p>For best OCR results:</p> <ol> <li>Resolution: Minimum 300 DPI for scanned documents</li> <li>Format: PNG or JPG with minimal compression</li> <li>Lighting: Clear, even lighting without shadows</li> <li>Contrast: High contrast between text and background</li> <li>Orientation: Properly oriented (not rotated or skewed)</li> </ol>"},{"location":"user-guide/ocr/#language-selection-strategy","title":"Language Selection Strategy","text":"<pre><code># Single language (fastest)\nprocessor_en = OCRProcessor(languages=[\"en\"])\n\n# Multiple languages (slower but more flexible)\nprocessor_multi = OCRProcessor(languages=[\"en\", \"es\"])\n\n# Choose based on your use case:\n# - Use single language when content is known\n# - Use multiple languages for mixed-language documents\n</code></pre>"},{"location":"user-guide/ocr/#processing-large-volumes","title":"Processing Large Volumes","text":"<p>For processing many images, consider:</p> <pre><code>from aimq import Worker\nfrom aimq.tools.ocr.processor import OCRProcessor\n\n# Reuse the processor across multiple calls\n# (the EasyOCR reader is lazy-loaded and cached)\nprocessor = OCRProcessor()\n\n@worker.task(queue=\"batch-ocr\")\ndef batch_process(data):\n    \"\"\"Process multiple images efficiently.\"\"\"\n    results = []\n    for image_path in data[\"images\"]:\n        result = processor.process_image(image_path)\n        results.append({\n            \"path\": image_path,\n            \"text\": result[\"text\"]\n        })\n    return results\n</code></pre>"},{"location":"user-guide/ocr/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/ocr/#error-handling","title":"Error Handling","text":"<pre><code>from aimq.tools.ocr.processor import OCRProcessor\n\nprocessor = OCRProcessor()\n\ntry:\n    result = processor.process_image(\"document.jpg\")\n    if not result[\"text\"].strip():\n        print(\"Warning: No text detected\")\nexcept ValueError as e:\n    print(f\"Invalid image format: {e}\")\nexcept Exception as e:\n    print(f\"OCR processing failed: {e}\")\n</code></pre>"},{"location":"user-guide/ocr/#filtering-low-confidence-results","title":"Filtering Low-Confidence Results","text":"<pre><code>result = processor.process_image(\"noisy_image.jpg\")\n\n# Filter out low-confidence detections\nhigh_confidence_text = []\nfor detection in result[\"detections\"]:\n    if detection[\"confidence\"] &gt; 0.7:  # 70% confidence threshold\n        high_confidence_text.append(detection[\"text\"])\n\nclean_text = \" \".join(high_confidence_text)\n</code></pre>"},{"location":"user-guide/ocr/#text-grouping","title":"Text Grouping","text":"<p>OCR results are automatically grouped by spatial proximity. The grouping parameters are:</p> <ul> <li><code>width_growth=20</code>: Horizontal tolerance for grouping text</li> <li><code>height_growth=1</code>: Vertical tolerance for grouping text</li> </ul> <p>This ensures text on the same line or in the same paragraph is grouped together.</p>"},{"location":"user-guide/overview/","title":"User Guide Overview","text":"<p>AIMQ is designed to make document processing with AI capabilities easy and efficient. This guide will help you understand the core concepts and features of AIMQ.</p>"},{"location":"user-guide/overview/#core-concepts","title":"Core Concepts","text":""},{"location":"user-guide/overview/#workers-and-queues","title":"Workers and Queues","text":"<p>AIMQ uses a worker-queue pattern where: - Workers manage the processing of jobs - Queues store and distribute jobs to workers - Jobs represent units of work (like documents to process)</p>"},{"location":"user-guide/overview/#document-processing","title":"Document Processing","text":"<p>AIMQ supports various document types: - Images (JPG, PNG, etc.) - PDFs - Text documents</p>"},{"location":"user-guide/overview/#ai-integration","title":"AI Integration","text":"<p>AIMQ integrates with various AI tools and services: - OCR for text extraction - Language models for text processing - Custom AI model integration</p>"},{"location":"user-guide/overview/#common-use-cases","title":"Common Use Cases","text":"<ol> <li>Document Processing Pipeline</li> <li>Upload documents to Supabase storage</li> <li>Queue documents for processing</li> <li>Extract text and metadata</li> <li> <p>Store results</p> </li> <li> <p>Batch Processing</p> </li> <li>Process multiple documents in parallel</li> <li>Handle different document types</li> <li> <p>Aggregate results</p> </li> <li> <p>Real-time Processing</p> </li> <li>Process documents as they are uploaded</li> <li>Send notifications when processing is complete</li> <li>Stream results to clients</li> </ol>"},{"location":"user-guide/overview/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Queue Processing</li> <li>Explore Document Processing</li> <li>Try out OCR capabilities</li> </ul>"},{"location":"user-guide/queue-processing/","title":"Queue Processing","text":"<p>This guide explains how to work with AIMQ's queue processing system.</p>"},{"location":"user-guide/queue-processing/#queue-basics","title":"Queue Basics","text":""},{"location":"user-guide/queue-processing/#creating-a-queue-and-task","title":"Creating a Queue and Task","text":"<pre><code>from aimq import Worker\n\nworker = Worker()\n\n@worker.task(queue=\"documents\")\ndef process_document(data):\n    # Process document based on type\n    if data.get(\"process_type\") == \"ocr\":\n        return process_ocr(data)\n    elif data.get(\"process_type\") == \"pdf\":\n        return process_pdf(data)\n</code></pre>"},{"location":"user-guide/queue-processing/#sending-jobs-to-a-queue","title":"Sending Jobs to a Queue","text":"<pre><code># Send a job directly\nworker.send(\"documents\", {\n    \"file_id\": \"123\",\n    \"process_type\": \"ocr\"\n})\n\n# Or using the queue directly\nqueue = worker.queues[\"documents\"]\nqueue.send({\n    \"file_id\": \"456\",\n    \"process_type\": \"pdf\"\n})\n</code></pre>"},{"location":"user-guide/queue-processing/#processing-jobs","title":"Processing Jobs","text":""},{"location":"user-guide/queue-processing/#basic-job-processing","title":"Basic Job Processing","text":"<pre><code>@worker.processor(\"documents\")\nasync def process_document(job):\n    # Access job data\n    file_id = job.data[\"file_id\"]\n    process_type = job.data[\"process_type\"]\n\n    # Process based on type\n    if process_type == \"ocr\":\n        return await process_ocr(file_id)\n    elif process_type == \"pdf\":\n        return await process_pdf(file_id)\n</code></pre>"},{"location":"user-guide/queue-processing/#error-handling","title":"Error Handling","text":"<pre><code>@worker.processor(\"documents\")\nasync def process_document(job):\n    try:\n        result = await process_file(job.data)\n        return {\"status\": \"success\", \"result\": result}\n    except Exception as e:\n        # Job will be retried\n        raise ProcessingError(f\"Failed to process: {str(e)}\")\n</code></pre>"},{"location":"user-guide/queue-processing/#advanced-features","title":"Advanced Features","text":""},{"location":"user-guide/queue-processing/#job-priority","title":"Job Priority","text":"<pre><code># Send high priority job\nqueue.send(data, priority=1)\n\n# Send low priority job\nqueue.send(data, priority=10)\n</code></pre>"},{"location":"user-guide/queue-processing/#delayed-processing","title":"Delayed Processing","text":"<pre><code># Process after 1 hour\nqueue.send(data, delay=3600)\n</code></pre>"},{"location":"user-guide/queue-processing/#batch-processing","title":"Batch Processing","text":"<pre><code>@worker.processor(\"documents\")\nasync def process_documents(jobs):\n    results = []\n    for job in jobs:\n        result = await process_document(job)\n        results.append(result)\n    return results\n\n# Enable batch processing\nworker.enable_batch_processing(\"documents\", batch_size=10)\n</code></pre>"},{"location":"user-guide/queue-processing/#monitoring","title":"Monitoring","text":""},{"location":"user-guide/queue-processing/#job-status","title":"Job Status","text":"<pre><code># Check job status\njob = queue.get_job(job_id)\nprint(f\"Job {job.id} status: {job.status}\")\n\n# Get queue stats\nstats = queue.get_stats()\nprint(f\"Pending jobs: {stats.pending}\")\nprint(f\"Processing jobs: {stats.processing}\")\n</code></pre>"},{"location":"user-guide/queue-processing/#logging","title":"Logging","text":"<p>```python</p>"},{"location":"user-guide/queue-processing/#enable-debug-logging","title":"Enable debug logging","text":"<p>worker.set_log_level(\"DEBUG\")</p>"},{"location":"user-guide/queue-processing/#print-logs","title":"Print logs","text":"<p>worker.print_logs()</p>"},{"location":"user-guide/worker-configuration/","title":"Worker Configuration","text":"<p>AIMQ workers can be configured through both environment variables and programmatic settings. This guide covers all available configuration options and best practices.</p>"},{"location":"user-guide/worker-configuration/#environment-variables","title":"Environment Variables","text":"<p>The following environment variables control worker behavior:</p> Variable Description Default <code>WORKER_NAME</code> Name of the worker instance <code>'peon'</code> <code>WORKER_LOG_LEVEL</code> Logging level (debug, info, warning, error) <code>'info'</code> <code>WORKER_IDLE_WAIT</code> Time to wait between queue checks (seconds) <code>10.0</code>"},{"location":"user-guide/worker-configuration/#programmatic-configuration","title":"Programmatic Configuration","text":"<p>You can configure workers programmatically when creating a Worker instance:</p> <pre><code>from aimq import Worker\n\nworker = Worker(\n    name=\"custom-worker\",      # Override worker name\n    log_level=\"debug\",        # Set logging level\n    idle_wait=5.0            # Set idle wait time\n)\n</code></pre>"},{"location":"user-guide/worker-configuration/#configuration-precedence","title":"Configuration Precedence","text":"<p>Configuration values are determined in the following order (highest to lowest priority): 1. Programmatic configuration 2. Environment variables 3. Default values</p>"},{"location":"user-guide/worker-configuration/#worker-settings","title":"Worker Settings","text":""},{"location":"user-guide/worker-configuration/#name","title":"Name","text":"<p>The worker name is used to identify the worker instance in logs and monitoring:</p> <pre><code># Via environment\nWORKER_NAME=analytics-worker\n\n# Via code\nworker = Worker(name=\"analytics-worker\")\n</code></pre>"},{"location":"user-guide/worker-configuration/#log-level","title":"Log Level","text":"<p>Control the verbosity of worker logs:</p> <pre><code># Via environment\nWORKER_LOG_LEVEL=debug\n\n# Via code\nworker = Worker(log_level=\"debug\")\n</code></pre> <p>Available log levels: - <code>debug</code>: Detailed debugging information - <code>info</code>: General operational information - <code>warning</code>: Warning messages for potential issues - <code>error</code>: Error messages for actual problems</p>"},{"location":"user-guide/worker-configuration/#idle-wait","title":"Idle Wait","text":"<p>Configure how long the worker waits between checking for new tasks:</p> <pre><code># Via environment\nWORKER_IDLE_WAIT=5.0\n\n# Via code\nworker = Worker(idle_wait=5.0)\n</code></pre>"},{"location":"user-guide/worker-configuration/#best-practices","title":"Best Practices","text":"<ol> <li>Worker Names</li> <li>Use descriptive names that indicate the worker's purpose</li> <li>Include environment or region in the name if relevant</li> <li> <p>Example: <code>prod-us-east-analytics-worker</code></p> </li> <li> <p>Log Levels</p> </li> <li>Use <code>debug</code> during development</li> <li>Use <code>info</code> in production</li> <li> <p>Use <code>warning</code> or <code>error</code> for minimal logging</p> </li> <li> <p>Idle Wait</p> </li> <li>Lower values (1-5s) for time-sensitive tasks</li> <li>Higher values (10-30s) for background tasks</li> <li>Consider queue volume when setting this value</li> </ol>"},{"location":"user-guide/worker-configuration/#example-configurations","title":"Example Configurations","text":""},{"location":"user-guide/worker-configuration/#development-environment","title":"Development Environment","text":"<pre><code># .env\nWORKER_NAME=dev-worker\nWORKER_LOG_LEVEL=debug\nWORKER_IDLE_WAIT=5.0\n</code></pre>"},{"location":"user-guide/worker-configuration/#production-environment","title":"Production Environment","text":"<pre><code># .env\nWORKER_NAME=prod-analytics\nWORKER_LOG_LEVEL=info\nWORKER_IDLE_WAIT=10.0\n</code></pre>"},{"location":"user-guide/worker-configuration/#mixed-configuration","title":"Mixed Configuration","text":"<pre><code># .env\nWORKER_NAME=prod-worker\nWORKER_LOG_LEVEL=info\n\n# code\nworker = Worker(\n    name=os.getenv(\"WORKER_NAME\"),\n    log_level=os.getenv(\"WORKER_LOG_LEVEL\"),\n    idle_wait=5.0  # Override default and env\n)\n</code></pre>"},{"location":"user-guide/worker-configuration/#monitoring-and-debugging","title":"Monitoring and Debugging","text":"<ol> <li>Log Output</li> <li>All worker operations are logged according to log_level</li> <li> <p>Logs include worker name, timestamp, and operation details</p> </li> <li> <p>Performance Tuning</p> </li> <li>Monitor worker performance with different idle_wait values</li> <li> <p>Adjust based on queue volume and task processing time</p> </li> <li> <p>Multiple Workers</p> </li> <li>Use different names for each worker instance</li> <li>Configure log levels independently for focused debugging</li> </ol>"},{"location":"user-guide/writing-tasks/","title":"Writing Tasks","text":"<p>Tasks are the fundamental building blocks in AIMQ that define how to process and transform data. This guide will help you understand how to write effective tasks that can be composed into powerful AI workflows.</p>"},{"location":"user-guide/writing-tasks/#task-structure","title":"Task Structure","text":"<p>A task in AIMQ is typically composed of:</p> <ol> <li>Input definition</li> <li>Processing logic</li> <li>Output transformation</li> <li>Error handling</li> </ol>"},{"location":"user-guide/writing-tasks/#basic-task-example","title":"Basic Task Example","text":"<pre><code>from aimq.helpers import select, assign\nfrom langchain_core.runnables import RunnablePassthrough\n\ndef create_summarization_task():\n    \"\"\"Create a task that summarizes text content.\"\"\"\n    return (\n        # 1. Select input\n        select(\"content\")\n        # 2. Process with LLM\n        | summarize_with_llm\n        # 3. Format output\n        | assign({\n            \"summary\": RunnablePassthrough(),\n            \"metadata\": const({\n                \"task\": \"summarization\",\n                \"timestamp\": datetime.now().isoformat()\n            })\n        })\n    )\n</code></pre>"},{"location":"user-guide/writing-tasks/#task-composition","title":"Task Composition","text":"<p>Tasks can be composed together using the pipeline operator (<code>|</code>). AIMQ's helper functions make it easy to transform data between tasks.</p>"},{"location":"user-guide/writing-tasks/#example-multi-step-task","title":"Example: Multi-Step Task","text":"<pre><code>def create_analysis_pipeline():\n    \"\"\"Create a pipeline that summarizes and analyzes text.\"\"\"\n    return (\n        # Extract relevant content\n        select(\"text\")\n        # Summarize the text\n        | create_summarization_task()\n        # Analyze sentiment\n        | create_sentiment_task()\n        # Combine results\n        | assign({\n            \"summary\": pick(\"summary\"),\n            \"sentiment\": pick(\"sentiment\"),\n            \"metadata\": orig(\"metadata\")\n        })\n    )\n</code></pre>"},{"location":"user-guide/writing-tasks/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/writing-tasks/#1-input-validation","title":"1. Input Validation","text":"<p>Always validate your input data at the start of your task:</p> <pre><code>def validate_input(input_data):\n    if \"content\" not in input_data:\n        raise ValueError(\"Input must contain 'content' key\")\n    if not isinstance(input_data[\"content\"], str):\n        raise TypeError(\"Content must be a string\")\n</code></pre>"},{"location":"user-guide/writing-tasks/#2-error-handling","title":"2. Error Handling","text":"<p>Implement proper error handling to make debugging easier:</p> <pre><code>def create_robust_task():\n    return (\n        # Validate input\n        RunnableLambda(validate_input)\n        # Process data with error handling\n        | handle_errors(process_data)\n        # Format output\n        | format_output\n    )\n</code></pre>"},{"location":"user-guide/writing-tasks/#3-type-safety","title":"3. Type Safety","text":"<p>Use type hints and ensure type safety throughout your task:</p> <pre><code>from typing import TypedDict, Optional\n\nclass TaskInput(TypedDict):\n    content: str\n    metadata: Optional[dict]\n\nclass TaskOutput(TypedDict):\n    result: str\n    error: Optional[str]\n\ndef process_task(input_data: TaskInput) -&gt; TaskOutput:\n    ...\n</code></pre>"},{"location":"user-guide/writing-tasks/#4-documentation","title":"4. Documentation","text":"<p>Document your tasks thoroughly:</p> <pre><code>def create_classification_task():\n    \"\"\"Create a task for text classification.\n\n    This task processes input text and classifies it into predefined categories\n    using a specified classification model.\n\n    Returns:\n        A runnable pipeline that:\n        1. Validates input text\n        2. Preprocesses text for classification\n        3. Applies classification model\n        4. Formats results with confidence scores\n\n    Example:\n        ```python\n        classifier = create_classification_task()\n        result = classifier.invoke({\n            \"text\": \"Sample text to classify\",\n            \"categories\": [\"A\", \"B\", \"C\"]\n        })\n        ```\n    \"\"\"\n    ...\n</code></pre>"},{"location":"user-guide/writing-tasks/#testing-tasks","title":"Testing Tasks","text":""},{"location":"user-guide/writing-tasks/#1-unit-tests","title":"1. Unit Tests","text":"<p>Write unit tests for individual components:</p> <pre><code>def test_summarization_task():\n    task = create_summarization_task()\n    result = task.invoke({\"content\": \"Test content\"})\n\n    assert \"summary\" in result\n    assert isinstance(result[\"summary\"], str)\n</code></pre>"},{"location":"user-guide/writing-tasks/#2-integration-tests","title":"2. Integration Tests","text":"<p>Test task composition and data flow:</p> <pre><code>def test_analysis_pipeline():\n    pipeline = create_analysis_pipeline()\n    result = pipeline.invoke({\n        \"text\": \"Test content\",\n        \"metadata\": {\"source\": \"test\"}\n    })\n\n    assert \"summary\" in result\n    assert \"sentiment\" in result\n    assert result[\"metadata\"][\"source\"] == \"test\"\n</code></pre>"},{"location":"user-guide/writing-tasks/#common-patterns","title":"Common Patterns","text":""},{"location":"user-guide/writing-tasks/#1-data-transformation","title":"1. Data Transformation","text":"<p>Use helpers to transform data between tasks:</p> <pre><code># Transform output format\nresult = task | assign({\n    \"data\": pick(\"result\"),\n    \"metadata\": orig(\"metadata\")\n})\n</code></pre>"},{"location":"user-guide/writing-tasks/#2-conditional-processing","title":"2. Conditional Processing","text":"<p>Implement conditional logic in your tasks:</p> <pre><code>def conditional_process(input_data):\n    if input_data.get(\"skip_summary\"):\n        return select(\"content\")\n    return create_summarization_task()\n</code></pre>"},{"location":"user-guide/writing-tasks/#3-parallel-processing","title":"3. Parallel Processing","text":"<p>Run tasks in parallel when possible:</p> <pre><code>def parallel_analysis():\n    return RunnableParallel({\n        \"summary\": create_summarization_task(),\n        \"sentiment\": create_sentiment_task(),\n        \"categories\": create_classification_task()\n    })\n</code></pre>"},{"location":"user-guide/writing-tasks/#debugging-tasks","title":"Debugging Tasks","text":"<ol> <li>Use the <code>echo</code> helper to inspect data flow:</li> </ol> <pre><code>pipeline = (\n    select(\"content\")\n    | echo  # Print content\n    | process_data\n    | echo  # Print processed data\n)\n</code></pre> <ol> <li>Add logging for complex operations:</li> </ol> <p>```python def log_step(name):     def _log(data):         logger.debug(f\"Step {name}: {data}\")         return data     return RunnableLambda(_log)</p> <p>pipeline = (     select(\"content\")     | log_step(\"input\")     | process_data     | log_step(\"output\") )</p>"}]}