{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AIMQ Documentation","text":"<p>AIMQ (AI Message Queue) is a Python library designed to simplify working with Supabase's queue system, which is built on top of pgmq. It provides an elegant way to process queued jobs using LangChain Runnables, making it perfect for AI-powered task processing and background job handling.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Simple Task Definition: Define queue processors using the <code>@worker.task</code> decorator to transform functions into LangChain RunnableLambda processors</li> <li>Supabase Integration: Built on Supabase's queue system (pgmq) for reliable and scalable message queuing</li> <li>LangChain Compatibility: Native support for LangChain Runnables, making it easy to integrate AI workflows</li> <li>Type Safety: Full type hints and runtime validation using Pydantic</li> <li>Flexible Job Processing: Support for delayed jobs, job timeouts, and customizable job completion handling</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<ol> <li>Enable Supabase Queue Integration:</li> <li>In your Supabase project, enable the Queue integration</li> <li>Make sure \"Expose Queues via PostgREST\" is turned on</li> <li> <p>Create your queues through the Supabase interface</p> </li> <li> <p>Configure Environment:    <pre><code>SUPABASE_URL=your-project-url\nSUPABASE_KEY=your-service-role-key\n</code></pre></p> </li> <li> <p>Create Tasks:    <pre><code>from aimq import Worker\n\nworker = Worker()\n\n@worker.task(queue=\"process_text\")\ndef process_text(job_data):\n    # Process job_data using LangChain\n    return {\"result\": \"processed\"}\n\nworker.start()\n</code></pre></p> </li> </ol>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Installation</li> <li>Quick Start Guide</li> <li>API Reference</li> <li>Contributing Guide</li> </ul>"},{"location":"#project-status","title":"Project Status","text":"<p>AIMQ is currently in beta. While it is being used in production environments, the API may still undergo changes as we gather feedback from users.</p>"},{"location":"#license","title":"License","text":"<p>AIMQ is released under the MIT License. See the LICENSE file for more details.</p>"},{"location":"api/overview/","title":"API Reference","text":"<p>This section provides detailed documentation for AIMQ's API.</p>"},{"location":"api/overview/#core-components","title":"Core Components","text":""},{"location":"api/overview/#worker","title":"Worker","text":"<p>The <code>Worker</code> class is the main entry point for AIMQ. It manages queues and processes jobs:</p> <pre><code>from aimq import Worker\n\nworker = Worker()\n\n@worker.task(queue=\"my_queue\")\ndef process_data(data):\n    # Process data here\n    return {\"status\": \"processed\"}\n</code></pre>"},{"location":"api/overview/#queue","title":"Queue","text":"<p>The <code>Queue</code> class handles message queue operations:</p> <pre><code>from aimq import Queue\n\nqueue = Queue(\"my_queue\")\nqueue.send({\"data\": \"to process\"})\n</code></pre>"},{"location":"api/overview/#job","title":"Job","text":"<p>The <code>Job</code> class represents a unit of work:</p> <pre><code>from aimq import Job\n\n# Jobs are usually created from queue messages\njob = Job.from_response(response_data)\nprint(f\"Processing job {job.id}\")\n</code></pre>"},{"location":"api/overview/#tools","title":"Tools","text":"<p>AIMQ provides several built-in tools for document processing:</p>"},{"location":"api/overview/#ocr-tools","title":"OCR Tools","text":"<ul> <li>Image OCR: Extract text from images</li> <li>PDF Processor: Process PDF documents</li> </ul>"},{"location":"api/overview/#storage-tools","title":"Storage Tools","text":""},{"location":"api/overview/#supabase-storage","title":"Supabase Storage","text":"<ul> <li>Read and write files to Supabase Storage</li> <li>Manage file metadata and access control</li> </ul>"},{"location":"api/overview/#supabase-database","title":"Supabase Database","text":"<ul> <li>Read and write records to Supabase Database</li> <li>Manage database records and relationships</li> </ul>"},{"location":"api/overview/#error-handling","title":"Error Handling","text":"<p>AIMQ provides several exception classes for error handling:</p> <p>```python from aimq.exceptions import QueueError, ProcessingError</p> <p>try:     result = queue.work() except QueueError as e:     print(f\"Queue error: {e}\") except ProcessingError as e:     print(f\"Processing error: {e}\")</p>"},{"location":"api/tools/","title":"Tools API Reference","text":"<p>AIMQ provides a set of built-in tools for document processing and storage operations.</p>"},{"location":"api/tools/#ocr-tools","title":"OCR Tools","text":""},{"location":"api/tools/#image-ocr-image-ocr","title":"Image OCR {#image-ocr}","text":""},{"location":"api/tools/#aimq.tools.ocr.image_ocr","title":"<code>aimq.tools.ocr.image_ocr</code>","text":"<p>Tool for performing OCR on images.</p>"},{"location":"api/tools/#aimq.tools.ocr.image_ocr-classes","title":"Classes","text":""},{"location":"api/tools/#aimq.tools.ocr.image_ocr.ImageOCR","title":"<code>ImageOCR(**kwargs)</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for performing OCR on images.</p> <p>Initialize the OCR processor.</p> Source code in <code>src/aimq/tools/ocr/image_ocr.py</code> <pre><code>def __init__(self, **kwargs):\n    \"\"\"Initialize the OCR processor.\"\"\"\n    super().__init__(**kwargs)\n    self.processor = OCRProcessor()\n</code></pre>"},{"location":"api/tools/#aimq.tools.ocr.image_ocr.ImageOCR-attributes","title":"Attributes","text":""},{"location":"api/tools/#aimq.tools.ocr.image_ocr.ImageOCR.args_schema","title":"<code>args_schema = ImageOCRInput</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/tools/#aimq.tools.ocr.image_ocr.ImageOCR.description","title":"<code>description = 'Extract text from images using OCR'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/tools/#aimq.tools.ocr.image_ocr.ImageOCR.name","title":"<code>name = 'image_ocr'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/tools/#aimq.tools.ocr.image_ocr.ImageOCR.processor","title":"<code>processor = OCRProcessor()</code>  <code>instance-attribute</code>","text":""},{"location":"api/tools/#aimq.tools.ocr.image_ocr.ImageOCR-functions","title":"Functions","text":""},{"location":"api/tools/#aimq.tools.ocr.image_ocr.ImageOCRInput","title":"<code>ImageOCRInput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Input for ImageOCR.</p>"},{"location":"api/tools/#aimq.tools.ocr.image_ocr.ImageOCRInput-attributes","title":"Attributes","text":""},{"location":"api/tools/#aimq.tools.ocr.image_ocr.ImageOCRInput.image","title":"<code>image = Field(..., description='The image file to perform OCR on')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/tools/#aimq.tools.ocr.image_ocr.ImageOCRInput.save_debug_image","title":"<code>save_debug_image = Field(default=False, description='If True, includes debug image in output showing detected text regions')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/tools/#pdf-processor-pdf-processor","title":"PDF Processor {#pdf-processor}","text":""},{"location":"api/tools/#aimq.tools.ocr.processor","title":"<code>aimq.tools.ocr.processor</code>","text":"<p>OCR module for text extraction and processing from images.</p> <p>This module provides functionality for extracting and processing text from images using the EasyOCR library. It includes utilities for handling text bounding boxes, merging overlapping detections, and creating debug visualizations.</p>"},{"location":"api/tools/#aimq.tools.ocr.processor-classes","title":"Classes","text":""},{"location":"api/tools/#aimq.tools.ocr.processor.OCRProcessor","title":"<code>OCRProcessor(languages=None)</code>","text":"<p>Processor for performing OCR on images using EasyOCR.</p> <p>This class provides a high-level interface for performing OCR on images. It handles initialization of the EasyOCR reader, image preprocessing, text detection, and optional debug visualization.</p> <p>Attributes:</p> Name Type Description <code>languages</code> <p>List of language codes for OCR</p> <code>_reader</code> <p>Lazy-loaded EasyOCR reader instance</p> <p>Initialize OCR processor with specified languages.</p> <p>Parameters:</p> Name Type Description Default <code>languages</code> <code>Optional[List[str]]</code> <p>List of language codes (default: ['en'])</p> <code>None</code> Source code in <code>src/aimq/tools/ocr/processor.py</code> <pre><code>def __init__(self, languages: Optional[List[str]] = None) -&gt; None:\n    \"\"\"Initialize OCR processor with specified languages.\n\n    Args:\n        languages: List of language codes (default: ['en'])\n    \"\"\"\n    self.languages = languages or ['en']\n    self._reader = None\n</code></pre>"},{"location":"api/tools/#aimq.tools.ocr.processor.OCRProcessor-attributes","title":"Attributes","text":""},{"location":"api/tools/#aimq.tools.ocr.processor.OCRProcessor.languages","title":"<code>languages = languages or ['en']</code>  <code>instance-attribute</code>","text":""},{"location":"api/tools/#aimq.tools.ocr.processor.OCRProcessor.reader","title":"<code>reader</code>  <code>property</code>","text":"<p>Get or initialize the EasyOCR reader.</p> <p>Returns:</p> Type Description <code>Reader</code> <p>easyocr.Reader: Initialized EasyOCR reader instance</p>"},{"location":"api/tools/#aimq.tools.ocr.processor.OCRProcessor-functions","title":"Functions","text":""},{"location":"api/tools/#aimq.tools.ocr.processor.OCRProcessor.process_image","title":"<code>process_image(image, save_debug_image=False)</code>","text":"<p>Process an image and return OCR results.</p> <p>Parameters:</p> Name Type Description Default <code>image</code> <code>Union[str, Path, Image, bytes]</code> <p>The image to process. Can be one of: - Path to image file (str or Path) - PIL Image object - Bytes of image data</p> required <code>save_debug_image</code> <code>bool</code> <p>If True, includes debug image in output</p> <code>False</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: OCR results including: - processing_time: Time taken to process in seconds - text: Extracted text content - debug_image: Optional base64 encoded debug image - detections: List of text detections with coordinates</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If image format is invalid or unreadable</p> Source code in <code>src/aimq/tools/ocr/processor.py</code> <pre><code>def process_image(\n    self, \n    image: Union[str, Path, Image.Image, bytes], \n    save_debug_image: bool = False,\n) -&gt; Dict[str, Any]:\n    \"\"\"Process an image and return OCR results.\n\n    Args:\n        image: The image to process. Can be one of:\n            - Path to image file (str or Path)\n            - PIL Image object\n            - Bytes of image data\n        save_debug_image: If True, includes debug image in output\n\n    Returns:\n        Dict[str, Any]: OCR results including:\n            - processing_time: Time taken to process in seconds\n            - text: Extracted text content\n            - debug_image: Optional base64 encoded debug image\n            - detections: List of text detections with coordinates\n\n    Raises:\n        ValueError: If image format is invalid or unreadable\n    \"\"\"\n    start_time = time.time()\n\n    # Convert input to a format EasyOCR can process\n    if isinstance(image, (str, Path)):\n        image_path = str(image)\n        pil_image = Image.open(image_path)\n    elif isinstance(image, bytes):\n        image_stream = io.BytesIO(image)\n        pil_image = Image.open(image_stream)\n        image_path = None\n    elif isinstance(image, Image.Image):\n        pil_image = image\n        image_path = None\n    else:\n        raise ValueError(\"Image must be a file path, PIL Image, or bytes\")\n\n    # Convert PIL Image to numpy array for EasyOCR\n    if pil_image.mode != 'RGB':\n        pil_image = pil_image.convert('RGB')\n    np_image = np.array(pil_image)\n\n    # Read the image with optimized parameters\n    results = self.reader.readtext(\n        np_image,\n        paragraph=False,\n        min_size=20,\n        text_threshold=0.7,\n        link_threshold=0.4,\n        low_text=0.4,\n        width_ths=0.7,\n        height_ths=0.9,\n        ycenter_ths=0.9,\n    )\n\n    # Format initial results\n    detections = []\n    for result in results:\n        if len(result) == 2:\n            bbox, text = result\n            confidence = 1.0\n        else:\n            bbox, text, confidence = result\n\n        x1, y1 = int(bbox[0][0]), int(bbox[0][1])\n        x2, y2 = int(bbox[1][0]), int(bbox[1][1])\n        x3, y3 = int(bbox[2][0]), int(bbox[2][1])\n        x4, y4 = int(bbox[3][0]), int(bbox[3][1])\n\n        detections.append({\n            \"text\": str(text),\n            \"confidence\": float(round(float(confidence), 3)),\n            \"bounding_box\": {\n                \"x\": x1,\n                \"y\": y1,\n                \"width\": x2 - x1,\n                \"height\": y3 - y1\n            }\n        })\n\n    # Group the detections\n    grouped_detections = group_text_boxes(\n        detections,\n        width_growth=20,\n        height_growth=1\n    )\n\n    end_time = time.time()\n    output = {\n        \"processing_time\": float(round(end_time - start_time, 2)),\n        \"detections\": grouped_detections,\n        \"text\": \" \".join(d[\"text\"] for d in grouped_detections)\n    }\n\n    if save_debug_image:\n        debug_image = self._create_debug_image(pil_image, grouped_detections)\n        # Convert debug image to bytes\n        debug_bytes = io.BytesIO()\n        debug_image.save(debug_bytes, format='PNG')\n        output[\"debug_image\"] = debug_bytes.getvalue()\n\n    return output\n</code></pre>"},{"location":"api/tools/#aimq.tools.ocr.processor-functions","title":"Functions","text":""},{"location":"api/tools/#aimq.tools.ocr.processor.boxes_overlap","title":"<code>boxes_overlap(box1, box2)</code>","text":"<p>Check if two boxes overlap at all.</p> <p>Parameters:</p> Name Type Description Default <code>box1</code> <code>Dict[str, int]</code> <p>Dictionary with x, y, width, height</p> required <code>box2</code> <code>Dict[str, int]</code> <p>Dictionary with x, y, width, height</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if boxes overlap</p> Source code in <code>src/aimq/tools/ocr/processor.py</code> <pre><code>def boxes_overlap(box1: Dict[str, int], box2: Dict[str, int]) -&gt; bool:\n    \"\"\"\n    Check if two boxes overlap at all.\n\n    Args:\n        box1: Dictionary with x, y, width, height\n        box2: Dictionary with x, y, width, height\n\n    Returns:\n        bool: True if boxes overlap\n    \"\"\"\n    h_overlap = (\n        box1['x'] &lt; box2['x'] + box2['width'] and\n        box2['x'] &lt; box1['x'] + box1['width']\n    )\n\n    v_overlap = (\n        box1['y'] &lt; box2['y'] + box2['height'] and\n        box2['y'] &lt; box1['y'] + box1['height']\n    )\n\n    return h_overlap and v_overlap\n</code></pre>"},{"location":"api/tools/#aimq.tools.ocr.processor.group_text_boxes","title":"<code>group_text_boxes(detections, width_growth=0, height_growth=0)</code>","text":"<p>Group text boxes that are spatially related.</p> <p>This function groups text boxes that are spatially related, starting with overlapping boxes. It can optionally expand boxes horizontally and vertically before grouping to capture nearby text that may be related.</p> <p>Parameters:</p> Name Type Description Default <code>detections</code> <code>List[Dict[str, Any]]</code> <p>List of detection dictionaries containing text and bounding boxes</p> required <code>width_growth</code> <code>int</code> <p>Number of pixels to expand boxes horizontally</p> <code>0</code> <code>height_growth</code> <code>int</code> <p>Number of pixels to expand boxes vertically</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List[Dict[str, Any]]: List of grouped text detections with merged bounding boxes</p> Source code in <code>src/aimq/tools/ocr/processor.py</code> <pre><code>def group_text_boxes(\n    detections: List[Dict[str, Any]], \n    width_growth: int = 0, \n    height_growth: int = 0\n) -&gt; List[Dict[str, Any]]:\n    \"\"\"Group text boxes that are spatially related.\n\n    This function groups text boxes that are spatially related, starting with\n    overlapping boxes. It can optionally expand boxes horizontally and vertically\n    before grouping to capture nearby text that may be related.\n\n    Args:\n        detections: List of detection dictionaries containing text and bounding boxes\n        width_growth: Number of pixels to expand boxes horizontally\n        height_growth: Number of pixels to expand boxes vertically\n\n    Returns:\n        List[Dict[str, Any]]: List of grouped text detections with merged bounding boxes\n    \"\"\"\n    if not detections:\n        return []\n\n    def grow_box(box: Dict[str, int]) -&gt; Dict[str, int]:\n        \"\"\"Helper to expand a box by the growth parameters\"\"\"\n        return {\n            'x': box['x'],\n            'y': box['y'],\n            'width': box['width'] + width_growth,\n            'height': box['height'] + height_growth\n        }\n\n    groups = [[det] for det in detections]\n\n    while True:\n        merged = False\n        new_groups = []\n        used = set()\n\n        for i, group1 in enumerate(groups):\n            if i in used:\n                continue\n\n            merged_group = group1.copy()\n            used.add(i)\n\n            box1 = grow_box(merge_boxes([det['bounding_box'] for det in merged_group]))\n\n            for j, group2 in enumerate(groups):\n                if j in used:\n                    continue\n\n                box2 = merge_boxes([det['bounding_box'] for det in group2])\n\n                if boxes_overlap(box1, box2):\n                    merged_group.extend(group2)\n                    used.add(j)\n                    box1 = grow_box(merge_boxes([det['bounding_box'] for det in merged_group]))\n                    merged = True\n\n            new_groups.append(merged_group)\n\n        if not merged:\n            break\n\n        groups = new_groups\n\n    return [{\n        \"text\": ' '.join(det['text'] for det in sorted(\n            group,\n            key=lambda d: (d['bounding_box']['y'], d['bounding_box']['x'])\n        )),\n        \"confidence\": float(round(\n            sum(det['confidence'] for det in group) / len(group),\n            3\n        )),\n        \"bounding_box\": merge_boxes([det['bounding_box'] for det in group])\n    } for group in groups]\n</code></pre>"},{"location":"api/tools/#aimq.tools.ocr.processor.merge_boxes","title":"<code>merge_boxes(boxes)</code>","text":"<p>Merge a list of bounding boxes into a single box that encompasses all of them.</p> <p>Parameters:</p> Name Type Description Default <code>boxes</code> <code>List[Dict[str, int]]</code> <p>List of dictionaries with x, y, width, height</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>Optional[Dict[str, int]]</code> <p>Merged bounding box or None if input is empty</p> Source code in <code>src/aimq/tools/ocr/processor.py</code> <pre><code>def merge_boxes(boxes: List[Dict[str, int]]) -&gt; Optional[Dict[str, int]]:\n    \"\"\"\n    Merge a list of bounding boxes into a single box that encompasses all of them.\n\n    Args:\n        boxes: List of dictionaries with x, y, width, height\n\n    Returns:\n        dict: Merged bounding box or None if input is empty\n    \"\"\"\n    if not boxes:\n        return None\n\n    min_x = min(box['x'] for box in boxes)\n    min_y = min(box['y'] for box in boxes)\n    max_x = max(box['x'] + box['width'] for box in boxes)\n    max_y = max(box['y'] + box['height'] for box in boxes)\n\n    return {\n        'x': int(min_x),\n        'y': int(min_y),\n        'width': int(max_x - min_x),\n        'height': int(max_y - min_y)\n    }\n</code></pre>"},{"location":"api/tools/#storage-tools","title":"Storage Tools","text":""},{"location":"api/tools/#supabase-storage","title":"Supabase Storage","text":""},{"location":"api/tools/#aimq.tools.supabase.read_file","title":"<code>aimq.tools.supabase.read_file</code>","text":"<p>Tool for reading files from Supabase Storage.</p>"},{"location":"api/tools/#aimq.tools.supabase.read_file-attributes","title":"Attributes","text":""},{"location":"api/tools/#aimq.tools.supabase.read_file-classes","title":"Classes","text":""},{"location":"api/tools/#aimq.tools.supabase.read_file.ReadFile","title":"<code>ReadFile</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for reading files from Supabase Storage.</p>"},{"location":"api/tools/#aimq.tools.supabase.read_file.ReadFile-attributes","title":"Attributes","text":""},{"location":"api/tools/#aimq.tools.supabase.read_file.ReadFile.args_schema","title":"<code>args_schema = ReadFileInput</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/tools/#aimq.tools.supabase.read_file.ReadFile.bucket","title":"<code>bucket = Field('{{bucket}}', description='The storage bucket template to read the file from')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/tools/#aimq.tools.supabase.read_file.ReadFile.description","title":"<code>description = 'Read a file from Supabase Storage'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/tools/#aimq.tools.supabase.read_file.ReadFile.formater","title":"<code>formater = Field('mustache', description='The format to use for the template')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/tools/#aimq.tools.supabase.read_file.ReadFile.name","title":"<code>name = 'read_file'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/tools/#aimq.tools.supabase.read_file.ReadFile.path","title":"<code>path = Field('{{path}}', description='The path template to use for the file')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/tools/#aimq.tools.supabase.read_file.ReadFileInput","title":"<code>ReadFileInput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Input for ReadFile.</p>"},{"location":"api/tools/#aimq.tools.supabase.read_file.ReadFileInput-attributes","title":"Attributes","text":""},{"location":"api/tools/#aimq.tools.supabase.read_file.ReadFileInput.bucket","title":"<code>bucket = Field('files', description='The storage bucket to read the file from')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/tools/#aimq.tools.supabase.read_file.ReadFileInput.metadata","title":"<code>metadata = Field(None, description='Additional metadata to attach to the file')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/tools/#aimq.tools.supabase.read_file.ReadFileInput.path","title":"<code>path = Field(..., description='The path values to apply to the template path')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/tools/#aimq.tools.supabase.write_file","title":"<code>aimq.tools.supabase.write_file</code>","text":"<p>Tool for writing files to Supabase Storage.</p>"},{"location":"api/tools/#aimq.tools.supabase.write_file-attributes","title":"Attributes","text":""},{"location":"api/tools/#aimq.tools.supabase.write_file-classes","title":"Classes","text":""},{"location":"api/tools/#aimq.tools.supabase.write_file.WriteFile","title":"<code>WriteFile</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for writing files to Supabase Storage.</p>"},{"location":"api/tools/#aimq.tools.supabase.write_file.WriteFile-attributes","title":"Attributes","text":""},{"location":"api/tools/#aimq.tools.supabase.write_file.WriteFile.args_schema","title":"<code>args_schema = WriteFileInput</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/tools/#aimq.tools.supabase.write_file.WriteFile.bucket","title":"<code>bucket = Field('{{bucket}}', description='The storage bucket template to read the file from')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/tools/#aimq.tools.supabase.write_file.WriteFile.description","title":"<code>description = 'Write a file to Supabase Storage'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/tools/#aimq.tools.supabase.write_file.WriteFile.formater","title":"<code>formater = Field('mustache', description='The format to use for the template')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/tools/#aimq.tools.supabase.write_file.WriteFile.name","title":"<code>name = 'write_file'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/tools/#aimq.tools.supabase.write_file.WriteFile.path","title":"<code>path = Field('{{path}}', description='The path template to use for the file')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/tools/#aimq.tools.supabase.write_file.WriteFileInput","title":"<code>WriteFileInput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Input for WriteFile.</p>"},{"location":"api/tools/#aimq.tools.supabase.write_file.WriteFileInput-attributes","title":"Attributes","text":""},{"location":"api/tools/#aimq.tools.supabase.write_file.WriteFileInput.bucket","title":"<code>bucket = Field('files', description='The storage bucket to read the file from')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/tools/#aimq.tools.supabase.write_file.WriteFileInput.file","title":"<code>file = Field(..., description='The file to write')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/tools/#aimq.tools.supabase.write_file.WriteFileInput.metadata","title":"<code>metadata = Field(None, description='Additional metadata to attach to the file')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/tools/#aimq.tools.supabase.write_file.WriteFileInput.path","title":"<code>path = Field(None, description='The path values to apply to the template path')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/tools/#supabase-database","title":"Supabase Database","text":""},{"location":"api/tools/#aimq.tools.supabase.read_record","title":"<code>aimq.tools.supabase.read_record</code>","text":"<p>Tool for reading records from Supabase.</p>"},{"location":"api/tools/#aimq.tools.supabase.read_record-attributes","title":"Attributes","text":""},{"location":"api/tools/#aimq.tools.supabase.read_record-classes","title":"Classes","text":""},{"location":"api/tools/#aimq.tools.supabase.read_record.ReadRecord","title":"<code>ReadRecord</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for reading records from Supabase.</p>"},{"location":"api/tools/#aimq.tools.supabase.read_record.ReadRecord-attributes","title":"Attributes","text":""},{"location":"api/tools/#aimq.tools.supabase.read_record.ReadRecord.args_schema","title":"<code>args_schema = ReadRecordInput</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/tools/#aimq.tools.supabase.read_record.ReadRecord.description","title":"<code>description = 'Read a record from Supabase'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/tools/#aimq.tools.supabase.read_record.ReadRecord.name","title":"<code>name = 'read_record'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/tools/#aimq.tools.supabase.read_record.ReadRecord.select","title":"<code>select = '*'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/tools/#aimq.tools.supabase.read_record.ReadRecord.table","title":"<code>table = 'records'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/tools/#aimq.tools.supabase.read_record.ReadRecordInput","title":"<code>ReadRecordInput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Input for ReadRecord.</p>"},{"location":"api/tools/#aimq.tools.supabase.read_record.ReadRecordInput-attributes","title":"Attributes","text":""},{"location":"api/tools/#aimq.tools.supabase.read_record.ReadRecordInput.id","title":"<code>id = Field(..., description='The ID of the record to read')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/tools/#aimq.tools.supabase.read_record.ReadRecordInput.select","title":"<code>select = Field(None, description='The columns to select')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/tools/#aimq.tools.supabase.read_record.ReadRecordInput.table","title":"<code>table = Field(None, description='The table to read from')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/tools/#aimq.tools.supabase.write_record","title":"<code>aimq.tools.supabase.write_record</code>","text":"<p>Tool for writing records to Supabase.</p>"},{"location":"api/tools/#aimq.tools.supabase.write_record-attributes","title":"Attributes","text":""},{"location":"api/tools/#aimq.tools.supabase.write_record-classes","title":"Classes","text":""},{"location":"api/tools/#aimq.tools.supabase.write_record.WriteRecord","title":"<code>WriteRecord</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for writing records to Supabase.</p>"},{"location":"api/tools/#aimq.tools.supabase.write_record.WriteRecord-attributes","title":"Attributes","text":""},{"location":"api/tools/#aimq.tools.supabase.write_record.WriteRecord.args_schema","title":"<code>args_schema = WriteRecordInput</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/tools/#aimq.tools.supabase.write_record.WriteRecord.description","title":"<code>description = 'Write a record to Supabase. If an ID is provided, updates existing record; otherwise creates new record.'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/tools/#aimq.tools.supabase.write_record.WriteRecord.name","title":"<code>name = 'write_record'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/tools/#aimq.tools.supabase.write_record.WriteRecordInput","title":"<code>WriteRecordInput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Input for WriteRecord.</p>"},{"location":"api/tools/#aimq.tools.supabase.write_record.WriteRecordInput-attributes","title":"Attributes","text":""},{"location":"api/tools/#aimq.tools.supabase.write_record.WriteRecordInput.data","title":"<code>data = Field(..., description='The data to write')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/tools/#aimq.tools.supabase.write_record.WriteRecordInput.id","title":"<code>id = Field(..., description='The ID of the record to update (if updating existing record)')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/tools/#aimq.tools.supabase.write_record.WriteRecordInput.table","title":"<code>table = Field(..., description='The table to write to')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"development/contributing/","title":"Contributing to AIMQ","text":"<p>We love your input! We want to make contributing to AIMQ as easy and transparent as possible, whether it's:</p> <ul> <li>Reporting a bug</li> <li>Discussing the current state of the code</li> <li>Submitting a fix</li> <li>Proposing new features</li> <li>Becoming a maintainer</li> </ul>"},{"location":"development/contributing/#development-process","title":"Development Process","text":"<p>We use GitHub to host code, to track issues and feature requests, as well as accept pull requests.</p> <ol> <li>Fork the repo and create your branch from <code>main</code></li> <li>If you've added code that should be tested, add tests</li> <li>If you've changed APIs, update the documentation</li> <li>Ensure the test suite passes</li> <li>Make sure your code follows our coding conventions</li> <li>Issue that pull request!</li> </ol>"},{"location":"development/contributing/#local-development-setup","title":"Local Development Setup","text":"<ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/yourusername/aimq.git\ncd aimq\n</code></pre></p> </li> <li> <p>Install dependencies:    <pre><code>poetry install\n</code></pre></p> </li> <li> <p>Set up pre-commit hooks:    <pre><code>poetry run pre-commit install\n</code></pre></p> </li> </ol>"},{"location":"development/contributing/#running-tests","title":"Running Tests","text":"<p>We use pytest for our test suite:</p> <pre><code>poetry run pytest\n</code></pre> <p>For coverage report:</p> <pre><code>poetry run pytest --cov=src\n</code></pre>"},{"location":"development/contributing/#code-style","title":"Code Style","text":"<p>We follow these coding conventions:</p> <ol> <li>Type Hints</li> <li>All function parameters and return values must have type hints</li> <li>Use <code>Optional</code> for parameters that can be None</li> <li> <p>Use <code>Union</code> for parameters that can be multiple types</p> </li> <li> <p>Docstrings</p> </li> <li>All public functions, classes, and modules must have docstrings</li> <li>Use Google style docstrings</li> <li> <p>Include Args, Returns, and Raises sections</p> </li> <li> <p>Naming Conventions</p> </li> <li>Classes: PascalCase</li> <li>Functions/Methods: snake_case</li> <li>Variables: snake_case</li> <li>Constants: SCREAMING_SNAKE_CASE</li> </ol>"},{"location":"development/contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Update the README.md with details of changes to the interface</li> <li>Update the documentation with any new features or changes</li> <li>The PR will be merged once you have the sign-off of at least one maintainer</li> </ol>"},{"location":"development/contributing/#license","title":"License","text":"<p>By contributing, you agree that your contributions will be licensed under its MIT License.</p>"},{"location":"development/release-process/","title":"Release Process","text":"<p>This document outlines the process for creating and publishing new releases of AIMQ.</p>"},{"location":"development/release-process/#version-numbering","title":"Version Numbering","text":"<p>We follow Semantic Versioning:</p> <ul> <li>MAJOR version for incompatible API changes</li> <li>MINOR version for new functionality in a backward compatible manner</li> <li>PATCH version for backward compatible bug fixes</li> </ul>"},{"location":"development/release-process/#release-checklist","title":"Release Checklist","text":"<ol> <li>Update Version</li> <li>Update version in <code>pyproject.toml</code></li> <li>Update CHANGELOG.md</li> <li> <p>Commit changes: <code>git commit -m \"Bump version to X.Y.Z\"</code></p> </li> <li> <p>Run Tests <pre><code>poetry run pytest\npoetry run pytest --cov=src\n</code></pre></p> </li> <li> <p>Build Documentation <pre><code>poetry run mkdocs build\n</code></pre></p> </li> <li> <p>Create Release Branch <pre><code>git checkout -b release/vX.Y.Z\ngit push origin release/vX.Y.Z\n</code></pre></p> </li> <li> <p>Create Pull Request</p> </li> <li>Title: \"Release vX.Y.Z\"</li> <li>Include changelog in description</li> <li> <p>Get required approvals</p> </li> <li> <p>Merge and Tag <pre><code>git checkout main\ngit pull origin main\ngit tag -a vX.Y.Z -m \"Release vX.Y.Z\"\ngit push origin vX.Y.Z\n</code></pre></p> </li> <li> <p>Build and Publish <pre><code>poetry build\npoetry publish\n</code></pre></p> </li> <li> <p>Deploy Documentation <pre><code>poetry run mkdocs gh-deploy\n</code></pre></p> </li> </ol>"},{"location":"development/release-process/#post-release","title":"Post-Release","text":"<ol> <li>Update version to next development version in <code>pyproject.toml</code></li> <li>Create new section in CHANGELOG.md for unreleased changes</li> <li>Announce release in appropriate channels</li> </ol>"},{"location":"development/release-process/#hotfix-process","title":"Hotfix Process","text":"<p>For critical bugs in production:</p> <ol> <li>Create hotfix branch from the release tag</li> <li>Fix the bug and update patch version</li> <li>Create PR back to both <code>main</code> and the release branch</li> <li>Follow steps 6-8 from the release checklist</li> </ol>"},{"location":"development/testing/","title":"Testing Guide","text":"<p>This guide covers the testing practices and requirements for AIMQ.</p>"},{"location":"development/testing/#test-structure","title":"Test Structure","text":"<p>Tests are organized to mirror the source code structure:</p> <pre><code>tests/\n\u251c\u2500\u2500 aimq/\n\u2502   \u251c\u2500\u2500 test_worker.py\n\u2502   \u251c\u2500\u2500 test_queue.py\n\u2502   \u251c\u2500\u2500 test_job.py\n\u2502   \u251c\u2500\u2500 clients/\n\u2502   \u2502   \u2514\u2500\u2500 test_supabase_client.py\n\u2502   \u2514\u2500\u2500 tools/\n\u2502       \u251c\u2500\u2500 ocr/\n\u2502       \u2502   \u2514\u2500\u2500 test_image_ocr.py\n\u2502       \u2514\u2500\u2500 pdf/\n\u2502           \u2514\u2500\u2500 test_pdf_processor.py\n\u2514\u2500\u2500 conftest.py\n</code></pre>"},{"location":"development/testing/#running-tests","title":"Running Tests","text":"<p>Run all tests: <pre><code>poetry run pytest\n</code></pre></p> <p>Run with coverage: <pre><code>poetry run pytest --cov=src\n</code></pre></p> <p>Run specific test file: <pre><code>poetry run pytest tests/aimq/test_worker.py\n</code></pre></p> <p>Run tests matching a pattern: <pre><code>poetry run pytest -k \"test_process\"\n</code></pre></p>"},{"location":"development/testing/#writing-tests","title":"Writing Tests","text":""},{"location":"development/testing/#test-requirements","title":"Test Requirements","text":"<ol> <li>Coverage Requirements</li> <li>Minimum 80% code coverage for new code</li> <li>Critical components require 90%+ coverage</li> <li> <p>Integration tests required for public APIs</p> </li> <li> <p>Test Types</p> </li> <li>Unit Tests: Test individual components in isolation</li> <li>Integration Tests: Test component interactions</li> <li>Functional Tests: Test complete features</li> <li>Async Tests: Use pytest-asyncio for async code</li> </ol>"},{"location":"development/testing/#test-structure_1","title":"Test Structure","text":"<p>Use pytest fixtures for test setup:</p> <pre><code>import pytest\nfrom aimq import Worker\n\n@pytest.fixture\ndef worker():\n    worker = Worker()\n    worker.register_queue(\"test_queue\")\n    return worker\n\ndef test_process_job(worker):\n    result = worker.process({\"data\": \"test\"})\n    assert result[\"status\"] == \"success\"\n</code></pre>"},{"location":"development/testing/#mocking","title":"Mocking","text":"<p>Use pytest's monkeypatch for mocking:</p> <pre><code>def test_supabase_client(monkeypatch):\n    mock_client = MockSupabaseClient()\n    monkeypatch.setattr(\"aimq.clients.supabase.client\", mock_client)\n    # Test code here\n</code></pre>"},{"location":"development/testing/#cicd-pipeline","title":"CI/CD Pipeline","text":"<p>Our GitHub Actions pipeline runs tests on:</p> <ul> <li>Pull requests to main branch</li> <li>Push to main branch</li> <li>Release tags</li> </ul> <p>The pipeline:</p> <ol> <li>Runs all tests</li> <li>Generates coverage report</li> <li>Checks code style</li> <li>Builds documentation</li> </ol>"},{"location":"getting-started/configuration/","title":"Configuration","text":"<p>AIMQ can be configured through environment variables and requires proper Supabase queue setup.</p>"},{"location":"getting-started/configuration/#supabase-queue-setup","title":"Supabase Queue Setup","text":"<ol> <li>Enable Queue Integration:</li> <li>Go to your Supabase project dashboard</li> <li>Navigate to Database \u2192 Extensions</li> <li>Enable the \"pg_net\" and \"pg_cron\" extensions if not already enabled</li> <li>Navigate to Database \u2192 Queues (Beta)</li> <li>Click \"Enable Queue\"</li> <li> <p>Make sure to enable \"Expose Queues via PostgREST\"</p> </li> <li> <p>Create Queues:</p> </li> <li>In the Queues interface, click \"Create a new queue\"</li> <li>Give your queue a name (this will be referenced in your <code>@worker.task</code> decorators)</li> <li>Configure queue settings as needed</li> </ol> <p>For more details, see the Supabase Queue Documentation.</p>"},{"location":"getting-started/configuration/#environment-variables","title":"Environment Variables","text":"<p>The following environment variables are supported:</p> <pre><code># Required Supabase Configuration\nSUPABASE_URL=your-project-url\nSUPABASE_KEY=your-service-role-key  # Must be service role key, not anon key\n\n# Worker Configuration (Optional)\nWORKER_NAME=my-worker  # Default: 'peon'\nWORKER_LOG_LEVEL=info  # Default: 'info'\nWORKER_IDLE_WAIT=10.0  # Default: 10.0 seconds\n\n# LangChain Configuration (Optional)\nLANGCHAIN_TRACING_V2=true  # Enable LangChain tracing\nLANGCHAIN_ENDPOINT=https://api.smith.langchain.com\nLANGCHAIN_API_KEY=your-langchain-api-key\nLANGCHAIN_PROJECT=your-project-name\n\n# OpenAI Configuration (If using OpenAI)\nOPENAI_API_KEY=your-openai-api-key\n</code></pre>"},{"location":"getting-started/configuration/#configuration-file","title":"Configuration File","text":"<p>You can create a <code>.env</code> file in your project root:</p> <pre><code># .env\nSUPABASE_URL=your-project-url\nSUPABASE_KEY=your-service-role-key\nWORKER_NAME=my-worker\n</code></pre>"},{"location":"getting-started/configuration/#using-poetry","title":"Using Poetry","text":"<p>Since this project uses Poetry for dependency management, you can:</p> <ol> <li> <p>Install dependencies: <pre><code>poetry install\n</code></pre></p> </li> <li> <p>Run with environment variables: <pre><code>poetry run python -m aimq.worker\n</code></pre></p> </li> </ol> <p>Or use your <code>.env</code> file: <pre><code>poetry run python -m aimq.worker\n</code></pre></p>"},{"location":"getting-started/configuration/#configuration-in-code","title":"Configuration in Code","text":"<p>Access configuration in your code:</p> <pre><code>from aimq.config import config\n\n# Access configuration values\nsupabase_url = config.supabase_url\nworker_name = config.worker_name\n\n# Create a worker with custom configuration\nfrom aimq import Worker\n\nworker = Worker(\n    name=\"custom-worker\",\n    log_level=\"debug\",\n    idle_wait=5.0\n)\n</code></pre>"},{"location":"getting-started/configuration/#next-steps","title":"Next Steps","text":"<ul> <li>See the Quick Start Guide for usage examples</li> <li>Learn about Worker Configuration for advanced settings</li> </ul>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>AIMQ can be installed using pip or poetry. We recommend using poetry for development.</p>"},{"location":"getting-started/installation/#using-poetry-recommended","title":"Using Poetry (Recommended)","text":"<pre><code>poetry add aimq\n</code></pre> <p>Or clone the repository and install in development mode:</p> <pre><code>git clone https://github.com/bldxio/aimq.git\ncd aimq\npoetry install\n</code></pre>"},{"location":"getting-started/installation/#using-pip","title":"Using pip","text":"<pre><code>pip install aimq\n</code></pre>"},{"location":"getting-started/installation/#dependencies","title":"Dependencies","text":"<p>AIMQ requires Python 3.11 or later and has the following main dependencies:</p> <ul> <li>easyocr: For OCR capabilities</li> <li>supabase: For queue and storage management</li> <li>langchain: For AI model integration</li> <li>pydantic: For data validation and settings management</li> </ul> <p>These dependencies will be automatically installed when you install AIMQ.</p>"},{"location":"getting-started/installation/#configuration","title":"Configuration","text":"<p>After installation, you'll need to configure your Supabase credentials. Create a <code>.env</code> file in your project root:</p> <pre><code>SUPABASE_URL=your-project-url\nSUPABASE_KEY=your-api-key\n</code></pre> <p>Or set them as environment variables:</p> <pre><code>export SUPABASE_URL=your-project-url\nexport SUPABASE_KEY=your-api-key\n</code></pre>"},{"location":"getting-started/installation/#verifying-installation","title":"Verifying Installation","text":"<p>You can verify your installation by running:</p> <pre><code>poetry run aimq --version\n</code></pre> <p>This should display the version number of your AIMQ installation.</p>"},{"location":"getting-started/quickstart/","title":"Quick Start Guide","text":"<p>This guide will help you get started with AIMQ (AI Message Queue) quickly.</p>"},{"location":"getting-started/quickstart/#prerequisites","title":"Prerequisites","text":"<ol> <li>A Supabase project with Queue integration enabled</li> <li>\"Expose Queues via PostgREST\" setting turned on</li> <li>At least one queue created in your Supabase project</li> </ol>"},{"location":"getting-started/quickstart/#environment-setup","title":"Environment Setup","text":"<p>Configure your environment variables:</p> <pre><code>SUPABASE_URL=your-project-url\nSUPABASE_KEY=your-service-role-key\nWORKER_NAME=my-worker  # Optional, defaults to 'peon'\n</code></pre>"},{"location":"getting-started/quickstart/#using-workers-recommended","title":"Using Workers (Recommended)","text":"<p>The Worker class provides a convenient way to define and manage queue processors using decorators.</p> <ol> <li>Create a <code>tasks.py</code> file to define your queue processors:</li> </ol> <pre><code>\"\"\"\nExample tasks.py file demonstrating queue processors using AIMQ.\n\"\"\"\nfrom aimq import Worker\nfrom langchain.prompts import ChatPromptTemplate\nfrom langchain.chat_models import ChatOpenAI\n\n# Initialize the worker\nworker = Worker()\n\n# Define a simple task\n@worker.task(queue=\"hello_world\")\ndef hello_world(data):\n    \"\"\"Simple task that returns a greeting message.\"\"\"\n    return {\"message\": f\"Hello {data.get('name', 'World')}!\"}\n\n# Define a LangChain-powered task\n@worker.task(queue=\"ai_processor\", timeout=300)\ndef process_with_ai(data):\n    \"\"\"Process text using LangChain.\"\"\"\n    # Create a LangChain runnable\n    prompt = ChatPromptTemplate.from_template(\"Summarize this text: {text}\")\n    model = ChatOpenAI()\n    chain = prompt | model\n\n    # Process the input\n    return chain.with_config({\"text\": data.get(\"text\", \"\")})\n\nif __name__ == \"__main__\":\n    # This allows the file to be run directly with: python tasks.py\n    worker.start()\n</code></pre> <ol> <li>Run your worker:</li> </ol> <p>Option 1: Using the <code>aimq start</code> command: <pre><code># Run tasks.py with default settings\naimq start tasks.py\n\n# Run with debug logging\naimq start tasks.py --debug\n\n# Run with specific log level\naimq start tasks.py --log-level debug\n</code></pre></p> <p>Option 2: Running the file directly: <pre><code># Run tasks.py directly\npython tasks.py\n</code></pre></p> <ol> <li>Send jobs to your queues:</li> </ol> <pre><code>from aimq import Worker\n\n# Create a worker instance (make sure tasks are defined first)\nworker = Worker()\n\n# Send a job to the hello_world queue\nworker.send(\"hello_world\", {\"name\": \"Alice\"})\n\n# Send a job to the ai_processor queue\nworker.send(\"ai_processor\", {\n    \"text\": \"LangChain is a framework for developing applications powered by language models.\"\n})\n</code></pre>"},{"location":"getting-started/quickstart/#using-queues-directly","title":"Using Queues Directly","text":"<p>You can also use the Queue class directly if you want more control or don't need the Worker abstraction.</p> <pre><code>from aimq.queue import Queue\nfrom langchain.prompts import ChatPromptTemplate\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain_core.runnables import RunnableLambda\n\n# Create a processor function\ndef process_text(data):\n    prompt = ChatPromptTemplate.from_template(\"Summarize this text: {text}\")\n    model = ChatOpenAI()\n    chain = prompt | model\n    result = chain.invoke({\"text\": data.get(\"text\", \"\")})\n    return {\"summary\": result.content}\n\n# Create a queue with a runnable\nqueue = Queue(\n    runnable=RunnableLambda(process_text, name=\"text_processor\"),\n    timeout=300,\n    delete_on_finish=True,\n    tags=[\"ai\", \"text\"]\n)\n\n# Send a job to the queue\njob_id = queue.send({\n    \"text\": \"LangChain is a framework for developing applications powered by language models.\"\n})\n\n# Process a single job\nresult = queue.work()\n</code></pre>"},{"location":"getting-started/quickstart/#advanced-features","title":"Advanced Features","text":""},{"location":"getting-started/quickstart/#delayed-jobs","title":"Delayed Jobs","text":"<pre><code># Using Worker\nworker.send(\"hello_world\", {\"name\": \"Bob\"}, delay=60)\n\n# Using Queue directly\nqueue.send({\"text\": \"Process this later\"}, delay=60)\n</code></pre>"},{"location":"getting-started/quickstart/#task-configuration","title":"Task Configuration","text":"<pre><code>@worker.task(\n    queue=\"important_task\",\n    timeout=600,  # 10 minute timeout\n    delete_on_finish=True,  # Delete instead of archive completed jobs\n    tags=[\"production\", \"high-priority\"]  # Add metadata tags\n)\ndef process_important_task(data):\n    # Process important task\n    return {\"status\": \"completed\"}\n</code></pre>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Learn more about configuration options</li> <li>Explore the API Reference</li> </ul>"},{"location":"reference/aimq/","title":"aimq","text":""},{"location":"reference/aimq/#aimq","title":"<code>aimq</code>","text":"<p>AIMQ - AI Message Queue</p>"},{"location":"reference/aimq/#aimq-attributes","title":"Attributes","text":""},{"location":"reference/aimq/#aimq.__version__","title":"<code>__version__ = '0.1.0'</code>  <code>module-attribute</code>","text":""},{"location":"reference/aimq/attachment/","title":"aimq.attachment","text":""},{"location":"reference/aimq/attachment/#aimq.attachment","title":"<code>aimq.attachment</code>","text":""},{"location":"reference/aimq/attachment/#aimq.attachment-classes","title":"Classes","text":""},{"location":"reference/aimq/attachment/#aimq.attachment.Attachment","title":"<code>Attachment</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"reference/aimq/attachment/#aimq.attachment.Attachment-attributes","title":"Attributes","text":""},{"location":"reference/aimq/attachment/#aimq.attachment.Attachment.data","title":"<code>data = Field(..., description='The bytes of the attachment', exclude=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/attachment/#aimq.attachment.Attachment.extension","title":"<code>extension</code>  <code>property</code>","text":""},{"location":"reference/aimq/attachment/#aimq.attachment.Attachment.mimetype","title":"<code>mimetype</code>  <code>property</code>","text":""},{"location":"reference/aimq/attachment/#aimq.attachment.Attachment.model_config","title":"<code>model_config = ConfigDict(arbitrary_types_allowed=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/attachment/#aimq.attachment.Attachment-functions","title":"Functions","text":""},{"location":"reference/aimq/attachment/#aimq.attachment.Attachment.__repr_args__","title":"<code>__repr_args__()</code>","text":"Source code in <code>src/aimq/attachment.py</code> <pre><code>def __repr_args__(self) -&gt; typing.Iterable[tuple[str | None, Any]]:\n    attrs = self.model_dump(exclude={'data', '_mimetype', '_extension'}).items()\n    return [(a, v) for a, v in attrs if v is not None]\n</code></pre>"},{"location":"reference/aimq/attachment/#aimq.attachment.Attachment.get","title":"<code>get(key, default=None)</code>","text":"Source code in <code>src/aimq/attachment.py</code> <pre><code>def get(self, key: str, default=None):\n    if hasattr(self, key):\n        return getattr(self, key, default)\n    return default\n</code></pre>"},{"location":"reference/aimq/attachment/#aimq.attachment.Attachment.model_post_init","title":"<code>model_post_init(__context)</code>","text":"Source code in <code>src/aimq/attachment.py</code> <pre><code>def model_post_init(self, __context: Any) -&gt; None:\n    kind = filetype.guess(self.data)\n    if kind: \n        self._mimetype = kind.mime\n        self._extension = kind.extension\n</code></pre>"},{"location":"reference/aimq/attachment/#aimq.attachment.Attachment.size","title":"<code>size()</code>","text":"Source code in <code>src/aimq/attachment.py</code> <pre><code>@computed_field\ndef size(self) -&gt; str:\n    return humanize.naturalsize(len(self.data))\n</code></pre>"},{"location":"reference/aimq/attachment/#aimq.attachment.Attachment.to_file","title":"<code>to_file()</code>","text":"Source code in <code>src/aimq/attachment.py</code> <pre><code>def to_file(self):\n    if not self.data or not self.mimetype:\n        raise ValueError(\"Data or mimetype not provided\")\n\n    if self.mimetype.startswith('image/'):\n        return Image.open(io.BytesIO(self.data))\n    raise ValueError(\"Not an image file\")\n</code></pre>"},{"location":"reference/aimq/config/","title":"aimq.config","text":""},{"location":"reference/aimq/config/#aimq.config","title":"<code>aimq.config</code>","text":""},{"location":"reference/aimq/config/#aimq.config-attributes","title":"Attributes","text":""},{"location":"reference/aimq/config/#aimq.config.config","title":"<code>config = get_config()</code>  <code>module-attribute</code>","text":""},{"location":"reference/aimq/config/#aimq.config-classes","title":"Classes","text":""},{"location":"reference/aimq/config/#aimq.config.Config","title":"<code>Config</code>","text":"<p>               Bases: <code>BaseSettings</code></p> <p>Configuration class for the application.</p>"},{"location":"reference/aimq/config/#aimq.config.Config-attributes","title":"Attributes","text":""},{"location":"reference/aimq/config/#aimq.config.Config.langchain_api_key","title":"<code>langchain_api_key = Field(default='', alias='LANGCHAIN_API_KEY')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/config/#aimq.config.Config.langchain_endpoint","title":"<code>langchain_endpoint = Field(default='https://api.smith.langchain.com', alias='LANGCHAIN_ENDPOINT')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/config/#aimq.config.Config.langchain_project","title":"<code>langchain_project = Field(default='', alias='LANGCHAIN_PROJECT')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/config/#aimq.config.Config.langchain_tracing_v2","title":"<code>langchain_tracing_v2 = Field(default=False, alias='LANGCHAIN_TRACING_V2')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/config/#aimq.config.Config.model_config","title":"<code>model_config = {'case_sensitive': False, 'env_file': '.env', 'use_enum_values': True, 'extra': 'ignore'}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/config/#aimq.config.Config.openai_api_key","title":"<code>openai_api_key = Field(default='', alias='OPENAI_API_KEY')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/config/#aimq.config.Config.supabase_key","title":"<code>supabase_key = Field(default='', alias='SUPABASE_KEY')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/config/#aimq.config.Config.supabase_url","title":"<code>supabase_url = Field(default='', alias='SUPABASE_URL')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/config/#aimq.config.Config.worker_idle_wait","title":"<code>worker_idle_wait = Field(default=10.0, alias='WORKER_IDLE_WAIT')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/config/#aimq.config.Config.worker_log_level","title":"<code>worker_log_level = Field(default='info', alias='WORKER_LOG_LEVEL')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/config/#aimq.config.Config.worker_name","title":"<code>worker_name = Field(default='peon', alias='WORKER_NAME')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/config/#aimq.config-functions","title":"Functions","text":""},{"location":"reference/aimq/config/#aimq.config.get_config","title":"<code>get_config()</code>  <code>cached</code>","text":"<p>Get the configuration singleton.</p> Source code in <code>src/aimq/config.py</code> <pre><code>@lru_cache()\ndef get_config() -&gt; Config:\n    \"\"\"Get the configuration singleton.\"\"\"\n    return Config()\n</code></pre>"},{"location":"reference/aimq/helpers/","title":"aimq.helpers","text":""},{"location":"reference/aimq/helpers/#aimq.helpers","title":"<code>aimq.helpers</code>","text":"<p>Helper functions for building and composing runnables in the AIMQ framework.</p> <p>This module provides utility functions for working with LangChain runnables, including functions for chaining, selecting, and transforming data through the runnable pipeline.</p>"},{"location":"reference/aimq/helpers/#aimq.helpers-attributes","title":"Attributes","text":""},{"location":"reference/aimq/helpers/#aimq.helpers.T","title":"<code>T = TypeVar('T')</code>  <code>module-attribute</code>","text":""},{"location":"reference/aimq/helpers/#aimq.helpers-functions","title":"Functions","text":""},{"location":"reference/aimq/helpers/#aimq.helpers.assign","title":"<code>assign(runnables={})</code>","text":"<p>Create a RunnableAssign from a dictionary of runnables or constant values.</p> <p>Parameters:</p> Name Type Description Default <code>runnables</code> <code>dict[str, Any]</code> <p>Dictionary mapping keys to either runnables or constant values. Constant values will be wrapped in a const function.</p> <code>{}</code> <p>Returns:</p> Type Description <code>RunnableAssign</code> <p>A RunnableAssign that assigns the results of the runnables to their respective keys.</p> Source code in <code>src/aimq/helpers.py</code> <pre><code>def assign(runnables: dict[str, Any] = {}) -&gt; RunnableAssign:\n    \"\"\"Create a RunnableAssign from a dictionary of runnables or constant values.\n\n    Args:\n        runnables: Dictionary mapping keys to either runnables or constant values.\n            Constant values will be wrapped in a const function.\n\n    Returns:\n        A RunnableAssign that assigns the results of the runnables to their respective keys.\n    \"\"\"\n    for k, v in runnables.items():\n        if not isinstance(v, RunnableAssign):\n            runnables[k] = const(v)\n    return RunnableAssign(RunnableParallel(runnables))\n</code></pre>"},{"location":"reference/aimq/helpers/#aimq.helpers.const","title":"<code>const(value)</code>","text":"<p>Create a function that always returns a constant value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>T</code> <p>The constant value to be returned.</p> required <p>Returns:</p> Type Description <code>Callable[[Any], T]</code> <p>A function that takes any input and returns the constant value.</p> Source code in <code>src/aimq/helpers.py</code> <pre><code>def const(value: T) -&gt; Callable[[Any], T]:\n    \"\"\"Create a function that always returns a constant value.\n\n    Args:\n        value: The constant value to be returned.\n\n    Returns:\n        A function that takes any input and returns the constant value.\n    \"\"\"\n    return lambda x: value\n</code></pre>"},{"location":"reference/aimq/helpers/#aimq.helpers.echo","title":"<code>echo(input)</code>","text":"<p>Echo the input value back while also printing it to stdout.</p> <p>Parameters:</p> Name Type Description Default <code>input</code> <code>T</code> <p>Any value to be echoed.</p> required <p>Returns:</p> Type Description <code>T</code> <p>The same value that was passed in.</p> Source code in <code>src/aimq/helpers.py</code> <pre><code>@chain\ndef echo(input: T) -&gt; T:\n    \"\"\"Echo the input value back while also printing it to stdout.\n\n    Args:\n        input: Any value to be echoed.\n\n    Returns:\n        The same value that was passed in.\n    \"\"\"\n    print(input)\n    return input\n</code></pre>"},{"location":"reference/aimq/helpers/#aimq.helpers.orig","title":"<code>orig(key=None)</code>","text":"<p>Create a runnable that retrieves the original configuration.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str | list[str] | None</code> <p>Optional key or list of keys to select from the configuration. If None, returns the entire configuration.</p> <code>None</code> <p>Returns:</p> Type Description <code>Runnable[Any, dict[str, Any]]</code> <p>A runnable that returns the selected configuration values.</p> Source code in <code>src/aimq/helpers.py</code> <pre><code>def orig(key: str | list[str] | None = None) -&gt; Runnable[Any, dict[str, Any]]:\n    \"\"\"Create a runnable that retrieves the original configuration.\n\n    Args:\n        key: Optional key or list of keys to select from the configuration.\n            If None, returns the entire configuration.\n\n    Returns:\n        A runnable that returns the selected configuration values.\n    \"\"\"\n    def _orig(input: Any, config: RunnableConfig) -&gt; dict[str, Any]:\n        return config.get(\"configurable\", {})\n    runnable = RunnableLambda(_orig)\n\n    if key is not None:\n        runnable = runnable | pick(key) # type: ignore\n    return runnable\n</code></pre>"},{"location":"reference/aimq/helpers/#aimq.helpers.pick","title":"<code>pick(key)</code>","text":"<p>Create a RunnablePick to select specific keys from the input.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str | list[str]</code> <p>Either a single key or list of keys to select from the input.</p> required <p>Returns:</p> Type Description <code>RunnablePick</code> <p>A RunnablePick configured to select the specified key(s).</p> Source code in <code>src/aimq/helpers.py</code> <pre><code>def pick(key: str | list[str]) -&gt; RunnablePick:\n    \"\"\"Create a RunnablePick to select specific keys from the input.\n\n    Args:\n        key: Either a single key or list of keys to select from the input.\n\n    Returns:\n        A RunnablePick configured to select the specified key(s).\n    \"\"\"\n    return RunnablePick(key)\n</code></pre>"},{"location":"reference/aimq/helpers/#aimq.helpers.select","title":"<code>select(key=None)</code>","text":"<p>Create a runnable that selects specific keys from the input.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str | list[str] | dict[str, str] | None</code> <p>Specifies what to select from the input: - None: Pass through the entire input - str: Select a single key - list[str]: Select multiple keys - dict[str, str]: Map old keys to new keys</p> <code>None</code> <p>Returns:</p> Type Description <code>Runnable</code> <p>A runnable that performs the selection operation.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the key type is not one of the supported types.</p> Source code in <code>src/aimq/helpers.py</code> <pre><code>def select(key: str | list[str] | dict[str, str] | None = None) -&gt; Runnable:\n    \"\"\"Create a runnable that selects specific keys from the input.\n\n    Args:\n        key: Specifies what to select from the input:\n            - None: Pass through the entire input\n            - str: Select a single key\n            - list[str]: Select multiple keys\n            - dict[str, str]: Map old keys to new keys\n\n    Returns:\n        A runnable that performs the selection operation.\n\n    Raises:\n        ValueError: If the key type is not one of the supported types.\n    \"\"\"\n    if key is None:\n        return RunnablePassthrough()\n    elif isinstance(key, str):\n        return RunnableParallel({key: RunnablePassthrough()})\n    elif isinstance(key, list):\n        return RunnablePick(key)\n    elif isinstance(key, dict):\n        return RunnableParallel({\n            new_key: RunnablePassthrough() if old_key == \"*\" else RunnablePick(old_key)\n            for old_key, new_key in key.items()\n        })\n    else:\n        raise ValueError(f\"Invalid key type: {type(key)}\")\n</code></pre>"},{"location":"reference/aimq/job/","title":"aimq.job","text":""},{"location":"reference/aimq/job/#aimq.job","title":"<code>aimq.job</code>","text":""},{"location":"reference/aimq/job/#aimq.job-classes","title":"Classes","text":""},{"location":"reference/aimq/job/#aimq.job.Job","title":"<code>Job</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A job in the queue.</p> <p>This class represents a job that can be processed by a worker. Each job has a unique identifier, metadata about its processing status, and the actual data to be processed.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Unique identifier for the job (aliased as msg_id)</p> <code>attempt</code> <code>int</code> <p>Number of times this job has been attempted (aliased as read_ct)</p> <code>updated_at</code> <code>datetime</code> <p>Timestamp of last update</p> <code>enqueued_at</code> <code>datetime</code> <p>Timestamp when job was added to queue</p> <code>expires_at</code> <code>datetime</code> <p>Timestamp when job expires (aliased as vt)</p> <code>data</code> <code>dict[str, Any]</code> <p>The actual job data to process (aliased as message)</p> <code>status</code> <code>str</code> <p>Current status of the job</p> <code>queue</code> <code>Optional[str]</code> <p>Optional name of the queue this job belongs to</p>"},{"location":"reference/aimq/job/#aimq.job.Job-attributes","title":"Attributes","text":""},{"location":"reference/aimq/job/#aimq.job.Job.attempt","title":"<code>attempt = Field(alias='read_ct')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/job/#aimq.job.Job.data","title":"<code>data = Field(alias='message')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/job/#aimq.job.Job.enqueued_at","title":"<code>enqueued_at</code>  <code>instance-attribute</code>","text":""},{"location":"reference/aimq/job/#aimq.job.Job.expires_at","title":"<code>expires_at = Field(alias='vt')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/job/#aimq.job.Job.id","title":"<code>id = Field(alias='msg_id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/job/#aimq.job.Job.popped","title":"<code>popped</code>  <code>property</code>","text":"<p>Check if the job has been popped from the queue.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the job has been popped, False otherwise</p>"},{"location":"reference/aimq/job/#aimq.job.Job.queue","title":"<code>queue = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/job/#aimq.job.Job.status","title":"<code>status = Field(default='pending')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/job/#aimq.job.Job.updated_at","title":"<code>updated_at = Field(default_factory=datetime.now)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/job/#aimq.job.Job-functions","title":"Functions","text":""},{"location":"reference/aimq/job/#aimq.job.Job.from_response","title":"<code>from_response(response_data, queue=None, popped=False)</code>  <code>classmethod</code>","text":"<p>Create a Job instance from API response data.</p> <p>Parameters:</p> Name Type Description Default <code>response_data</code> <code>dict</code> <p>Raw response data from the API</p> required <code>queue</code> <code>Optional[str]</code> <p>Optional name of the queue this job belongs to</p> <code>None</code> <code>popped</code> <code>bool</code> <p>Whether this job has been popped from the queue</p> <code>False</code> <p>Returns:</p> Name Type Description <code>Job</code> <code>Job</code> <p>A new Job instance initialized with the response data</p> Source code in <code>src/aimq/job.py</code> <pre><code>@classmethod\ndef from_response(cls, response_data: dict, queue: Optional[str] = None, popped: bool = False) -&gt; 'Job':\n    \"\"\"Create a Job instance from API response data.\n\n    Args:\n        response_data: Raw response data from the API\n        queue: Optional name of the queue this job belongs to\n        popped: Whether this job has been popped from the queue\n\n    Returns:\n        Job: A new Job instance initialized with the response data\n    \"\"\"\n    job = cls(**response_data)\n    job._popped = popped\n    job.queue = queue\n    return job\n</code></pre>"},{"location":"reference/aimq/logger/","title":"aimq.logger","text":""},{"location":"reference/aimq/logger/#aimq.logger","title":"<code>aimq.logger</code>","text":""},{"location":"reference/aimq/logger/#aimq.logger-attributes","title":"Attributes","text":""},{"location":"reference/aimq/logger/#aimq.logger.console","title":"<code>console = Console()</code>  <code>module-attribute</code>","text":""},{"location":"reference/aimq/logger/#aimq.logger-classes","title":"Classes","text":""},{"location":"reference/aimq/logger/#aimq.logger.LogEvent","title":"<code>LogEvent</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"reference/aimq/logger/#aimq.logger.LogEvent-attributes","title":"Attributes","text":""},{"location":"reference/aimq/logger/#aimq.logger.LogEvent.data","title":"<code>data = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/logger/#aimq.logger.LogEvent.level","title":"<code>level</code>  <code>instance-attribute</code>","text":""},{"location":"reference/aimq/logger/#aimq.logger.LogEvent.msg","title":"<code>msg</code>  <code>instance-attribute</code>","text":""},{"location":"reference/aimq/logger/#aimq.logger.LogEvent.styles","title":"<code>styles = Field(default_factory=lambda: {LogLevel.DEBUG: LogStyle('\ud83d\udd0d DEBUG', 'blue'), LogLevel.INFO: LogStyle('\u2139\ufe0f INFO', 'green'), LogLevel.WARNING: LogStyle('\u26a0\ufe0f WARNING', 'yellow'), LogLevel.ERROR: LogStyle('\u274c ERROR', 'red'), LogLevel.CRITICAL: LogStyle('\ud83d\udea8 CRITICAL', 'red bold')})</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/logger/#aimq.logger.LogEvent-functions","title":"Functions","text":""},{"location":"reference/aimq/logger/#aimq.logger.LogEvent.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>src/aimq/logger.py</code> <pre><code>def __repr__(self) -&gt; str:\n    return f\"LogEvent(level={self.level!r}, msg={self.msg!r}, data={self.data!r})\"\n</code></pre>"},{"location":"reference/aimq/logger/#aimq.logger.LogEvent.__rich__","title":"<code>__rich__()</code>","text":"Source code in <code>src/aimq/logger.py</code> <pre><code>def __rich__(self) -&gt; Text:\n    style = self.styles[self.level]\n    text = Text()\n    text.append(f\"{style.template}: \", style=f\"{style.color}\")\n    text.append(self.msg, style=f\"dim {style.color}\")\n\n    if self.data:\n        text.append(\"\\nData: \", style=f\"{style.color} bold\")\n        text.append(str(self.data), style=f\"dim {style.color}\")\n\n    return text\n</code></pre>"},{"location":"reference/aimq/logger/#aimq.logger.LogEvent.__str__","title":"<code>__str__()</code>","text":"Source code in <code>src/aimq/logger.py</code> <pre><code>def __str__(self) -&gt; str:\n    style = self.styles[self.level]\n    result = f\"{style.template}: {self.msg}\"\n    if self.data:\n        result += f\"\\nData: {self.data}\"\n    return result\n</code></pre>"},{"location":"reference/aimq/logger/#aimq.logger.LogEvent.print","title":"<code>print()</code>","text":"Source code in <code>src/aimq/logger.py</code> <pre><code>def print(self):\n    style = self.styles[self.level]\n    console.print(Panel(self.__rich__(), border_style=style.color))\n</code></pre>"},{"location":"reference/aimq/logger/#aimq.logger.LogLevel","title":"<code>LogLevel</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p>"},{"location":"reference/aimq/logger/#aimq.logger.LogLevel-attributes","title":"Attributes","text":""},{"location":"reference/aimq/logger/#aimq.logger.LogLevel.CRITICAL","title":"<code>CRITICAL = 'critical'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/logger/#aimq.logger.LogLevel.DEBUG","title":"<code>DEBUG = 'debug'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/logger/#aimq.logger.LogLevel.ERROR","title":"<code>ERROR = 'error'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/logger/#aimq.logger.LogLevel.INFO","title":"<code>INFO = 'info'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/logger/#aimq.logger.LogLevel.WARNING","title":"<code>WARNING = 'warning'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/logger/#aimq.logger.LogLevel-functions","title":"Functions","text":""},{"location":"reference/aimq/logger/#aimq.logger.LogLevel.__ge__","title":"<code>__ge__(other)</code>","text":"Source code in <code>src/aimq/logger.py</code> <pre><code>def __ge__(self, other: Union[\"LogLevel\", str]) -&gt; bool:\n    if isinstance(other, str):\n        other = LogLevel(other)\n    levels = list(LogLevel)\n    return levels.index(self) &gt;= levels.index(other)\n</code></pre>"},{"location":"reference/aimq/logger/#aimq.logger.LogStyle","title":"<code>LogStyle</code>","text":"<p>               Bases: <code>NamedTuple</code></p>"},{"location":"reference/aimq/logger/#aimq.logger.LogStyle-attributes","title":"Attributes","text":""},{"location":"reference/aimq/logger/#aimq.logger.LogStyle.color","title":"<code>color</code>  <code>instance-attribute</code>","text":""},{"location":"reference/aimq/logger/#aimq.logger.LogStyle.template","title":"<code>template</code>  <code>instance-attribute</code>","text":""},{"location":"reference/aimq/logger/#aimq.logger.Logger","title":"<code>Logger()</code>","text":"Source code in <code>src/aimq/logger.py</code> <pre><code>def __init__(self):\n    self._queue = queue.Queue()\n</code></pre>"},{"location":"reference/aimq/logger/#aimq.logger.Logger-functions","title":"Functions","text":""},{"location":"reference/aimq/logger/#aimq.logger.Logger.critical","title":"<code>critical(msg, data=None)</code>","text":"Source code in <code>src/aimq/logger.py</code> <pre><code>def critical(self, msg: str, data: Any = None):\n    self.log_event(LogEvent(level=LogLevel.CRITICAL, msg=msg, data=data))\n</code></pre>"},{"location":"reference/aimq/logger/#aimq.logger.Logger.debug","title":"<code>debug(msg, data=None)</code>","text":"Source code in <code>src/aimq/logger.py</code> <pre><code>def debug(self, msg: str, data: Any = None):\n    self.log_event(LogEvent(level=LogLevel.DEBUG, msg=msg, data=data))\n</code></pre>"},{"location":"reference/aimq/logger/#aimq.logger.Logger.error","title":"<code>error(msg, data=None)</code>","text":"Source code in <code>src/aimq/logger.py</code> <pre><code>def error(self, msg: str, data: Any = None):\n    self.log_event(LogEvent(level=LogLevel.ERROR, msg=msg, data=data))\n</code></pre>"},{"location":"reference/aimq/logger/#aimq.logger.Logger.events","title":"<code>events(block=True)</code>","text":"Source code in <code>src/aimq/logger.py</code> <pre><code>def events(self, block=True):\n    while True:\n        try:\n            event = self._queue.get(block=block)\n            if event is None:\n                break\n            yield event\n        except queue.Empty:\n            break\n</code></pre>"},{"location":"reference/aimq/logger/#aimq.logger.Logger.info","title":"<code>info(msg, data=None)</code>","text":"Source code in <code>src/aimq/logger.py</code> <pre><code>def info(self, msg: str, data: Any = None):\n    self.log_event(LogEvent(level=LogLevel.INFO, msg=msg, data=data))\n</code></pre>"},{"location":"reference/aimq/logger/#aimq.logger.Logger.log_event","title":"<code>log_event(event)</code>","text":"Source code in <code>src/aimq/logger.py</code> <pre><code>def log_event(self, event: LogEvent):\n    self._queue.put(event)\n</code></pre>"},{"location":"reference/aimq/logger/#aimq.logger.Logger.print","title":"<code>print(block=True, level=LogLevel.INFO)</code>","text":"Source code in <code>src/aimq/logger.py</code> <pre><code>def print(self, block=True, level: Union[LogLevel, str] = LogLevel.INFO):\n    if isinstance(level, str):\n        level = LogLevel(level)\n    [event.print() for event in self.events(block=block) if event.level &gt;= level]\n</code></pre>"},{"location":"reference/aimq/logger/#aimq.logger.Logger.stop","title":"<code>stop()</code>","text":"Source code in <code>src/aimq/logger.py</code> <pre><code>def stop(self):\n    self._queue.put(None)\n</code></pre>"},{"location":"reference/aimq/logger/#aimq.logger.Logger.warning","title":"<code>warning(msg, data=None)</code>","text":"Source code in <code>src/aimq/logger.py</code> <pre><code>def warning(self, msg: str, data: Any = None):\n    self.log_event(LogEvent(level=LogLevel.WARNING, msg=msg, data=data))\n</code></pre>"},{"location":"reference/aimq/queue/","title":"aimq.queue","text":""},{"location":"reference/aimq/queue/#aimq.queue","title":"<code>aimq.queue</code>","text":""},{"location":"reference/aimq/queue/#aimq.queue-classes","title":"Classes","text":""},{"location":"reference/aimq/queue/#aimq.queue.Queue","title":"<code>Queue</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A queue class that manages workflows with configurable parameters.</p>"},{"location":"reference/aimq/queue/#aimq.queue.Queue-attributes","title":"Attributes","text":""},{"location":"reference/aimq/queue/#aimq.queue.Queue.delay","title":"<code>delay = Field(default=0, ge=0, description='Delay in seconds between processing tasks')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/queue/#aimq.queue.Queue.delete_on_finish","title":"<code>delete_on_finish = Field(default=False, description='Whether to delete (True) or archive (False) jobs after processing')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/queue/#aimq.queue.Queue.logger","title":"<code>logger = Field(default_factory=Logger, description='Logger instance to use for queue events')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/queue/#aimq.queue.Queue.model_config","title":"<code>model_config = ConfigDict(arbitrary_types_allowed=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/queue/#aimq.queue.Queue.name","title":"<code>name</code>  <code>property</code>","text":"<p>Get the queue name from the runnable.</p>"},{"location":"reference/aimq/queue/#aimq.queue.Queue.provider","title":"<code>provider = Field(default_factory=SupabaseQueueProvider, description='Queue provider implementation')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/queue/#aimq.queue.Queue.runnable","title":"<code>runnable = Field(description='Langchain runnable to process jobs')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/queue/#aimq.queue.Queue.tags","title":"<code>tags = Field(default_factory=list, description='List of tags associated with the queue')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/queue/#aimq.queue.Queue.timeout","title":"<code>timeout = Field(default=300, description='Maximum time in seconds for a task to complete. If 0, messages will be popped instead of read.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/queue/#aimq.queue.Queue.worker_name","title":"<code>worker_name = Field(default='peon', description='Name of the worker processing this queue')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/queue/#aimq.queue.Queue-functions","title":"Functions","text":""},{"location":"reference/aimq/queue/#aimq.queue.Queue.finish","title":"<code>finish(job)</code>","text":"<p>Finish processing a job.</p> <p>If the job was popped, do nothing. Otherwise, either archive or delete based on delete_on_finish setting.</p> <p>Parameters:</p> Name Type Description Default <code>job</code> <code>Job</code> <p>The job to finish</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the operation was successful</p> Source code in <code>src/aimq/queue.py</code> <pre><code>def finish(self, job: Job) -&gt; bool:\n    \"\"\"Finish processing a job.\n\n    If the job was popped, do nothing.\n    Otherwise, either archive or delete based on delete_on_finish setting.\n\n    Args:\n        job: The job to finish\n\n    Returns:\n        bool: True if the operation was successful\n    \"\"\"\n    if job._popped:\n        self.logger.debug(f\"Job {job.id} was popped, no cleanup needed\")\n        return True\n\n    try:\n        if self.delete_on_finish:\n            self.provider.delete(self.name, job.id)\n            self.logger.info(f\"Deleted job {job.id} from queue {self.name}\")\n        else:\n            self.provider.archive(self.name, job.id)\n            self.logger.info(f\"Archived job {job.id} from queue {self.name}\")\n        return True\n    except Exception as e:\n        self.logger.error(f\"Error finishing job {job.id}: {str(e)}\")\n        return False\n</code></pre>"},{"location":"reference/aimq/queue/#aimq.queue.Queue.get_runtime_config","title":"<code>get_runtime_config(job)</code>","text":"<p>Create a runtime configuration for the job.</p> <p>Parameters:</p> Name Type Description Default <code>job</code> <code>Job</code> <p>The job to create configuration for</p> required <p>Returns:</p> Name Type Description <code>RunnableConfig</code> <code>RunnableConfig</code> <p>Configuration for running the job</p> Source code in <code>src/aimq/queue.py</code> <pre><code>def get_runtime_config(self, job: Job) -&gt; RunnableConfig:\n    \"\"\"Create a runtime configuration for the job.\n\n    Args:\n        job: The job to create configuration for\n\n    Returns:\n        RunnableConfig: Configuration for running the job\n    \"\"\"\n    return RunnableConfig(\n        metadata={\n            \"worker\": self.worker_name,\n            \"queue\": self.name, \n            \"job\": job.id, \n        }, \n        tags=self.tags,\n        configurable=job.data\n    )\n</code></pre>"},{"location":"reference/aimq/queue/#aimq.queue.Queue.next","title":"<code>next()</code>","text":"<p>Check for new jobs in the queue.</p> <p>Returns:</p> Type Description <code>Job | None</code> <p>Optional[Job]: Next job if available, None otherwise</p> Source code in <code>src/aimq/queue.py</code> <pre><code>def next(self) -&gt; Job | None:\n    \"\"\"Check for new jobs in the queue.\n\n    Returns:\n        Optional[Job]: Next job if available, None otherwise\n    \"\"\"\n    try:\n        if self.timeout == 0:\n            job = self.provider.pop(self.name)\n        else:\n            jobs = self.provider.read(self.name, self.timeout, 1)\n            job = jobs[0] if jobs else None\n        if job:\n            self.logger.debug(f\"Retrieved job {job.id} from queue {self.name}\")\n        return job\n    except QueueNotFoundError as e:\n        self.logger.error(f\"Queue {self.name} not found\", str(e))\n        return None\n</code></pre>"},{"location":"reference/aimq/queue/#aimq.queue.Queue.run","title":"<code>run(job)</code>","text":"<p>Process a  specific job using the configured runnable.</p> Source code in <code>src/aimq/queue.py</code> <pre><code>def run(self, job: Job) -&gt; Any:\n    \"\"\"Process a  specific job using the configured runnable.\"\"\"\n    runtime_config = self.get_runtime_config(job)\n    return self.runnable.invoke(job.data, runtime_config)\n</code></pre>"},{"location":"reference/aimq/queue/#aimq.queue.Queue.send","title":"<code>send(data, delay=None)</code>","text":"<p>Add a message to the queue.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict[str, Any]</code> <p>Data payload to send</p> required <code>delay</code> <code>int | None</code> <p>Optional delay in seconds before the message becomes visible</p> <code>None</code> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The ID of the added message</p> Source code in <code>src/aimq/queue.py</code> <pre><code>def send(self, data: dict[str, Any], delay: int | None = None) -&gt; int:\n    \"\"\"Add a message to the queue.\n\n    Args:\n        data: Data payload to send\n        delay: Optional delay in seconds before the message becomes visible\n\n    Returns:\n        int: The ID of the added message\n    \"\"\"\n    job_id = self.provider.send(self.name, data, delay)\n    self.logger.info(f\"Sent job {job_id} to queue {self.name}\", data)\n    return job_id\n</code></pre>"},{"location":"reference/aimq/queue/#aimq.queue.Queue.send_batch","title":"<code>send_batch(data_list, delay=None)</code>","text":"<p>Add a batch of messages to the queue.</p> <p>Parameters:</p> Name Type Description Default <code>data_list</code> <code>list[dict[str, Any]]</code> <p>List of data payloads to send</p> required <code>delay</code> <code>int | None</code> <p>Optional delay in seconds before the messages become visible</p> <code>None</code> <p>Returns:</p> Type Description <code>List[int]</code> <p>List[int]: List of IDs of added messages</p> Source code in <code>src/aimq/queue.py</code> <pre><code>def send_batch(self, data_list: list[dict[str, Any]], delay: int | None = None) -&gt; List[int]:\n    \"\"\"Add a batch of messages to the queue.\n\n    Args:\n        data_list: List of data payloads to send\n        delay: Optional delay in seconds before the messages become visible\n\n    Returns:\n        List[int]: List of IDs of added messages\n    \"\"\"\n    job_ids = self.provider.send_batch(self.name, data_list, delay)\n    self.logger.info(f\"Sent batch of {len(job_ids)} jobs to queue {self.name}\")\n    return job_ids\n</code></pre>"},{"location":"reference/aimq/queue/#aimq.queue.Queue.work","title":"<code>work()</code>","text":"<p>Process jobs in the queue using the configured runnable.</p> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>Result from processing each job</p> Source code in <code>src/aimq/queue.py</code> <pre><code>def work(self) -&gt; Any:\n    \"\"\"Process jobs in the queue using the configured runnable.\n\n    Returns:\n        Any: Result from processing each job\n    \"\"\"\n    job = self.next()\n    if job is None:\n        return None\n\n    self.logger.info(f\"Processing job {job.id} in queue {self.name}\", job.data)\n    try:\n        result = self.run(job)\n        self.logger.info(f\"Job {job.id} processed successfully\", result)\n        self.finish(job)\n        return result\n    except Exception as e:\n        self.logger.error(f\"Error processing job {job.id}: {str(e)}\", job.data)\n        raise\n</code></pre>"},{"location":"reference/aimq/queue/#aimq.queue.QueueNotFoundError","title":"<code>QueueNotFoundError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Raised when attempting to access a queue that does not exist.</p>"},{"location":"reference/aimq/utils/","title":"aimq.utils","text":""},{"location":"reference/aimq/utils/#aimq.utils","title":"<code>aimq.utils</code>","text":"<p>Utility functions for the core package.</p>"},{"location":"reference/aimq/utils/#aimq.utils-functions","title":"Functions","text":""},{"location":"reference/aimq/utils/#aimq.utils.add_to_path","title":"<code>add_to_path(path)</code>","text":"<p>Temporarily add a directory to sys.path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Directory to add to sys.path</p> required <p>Yields:</p> Type Description <code>None</code> <p>None</p> Source code in <code>src/aimq/utils.py</code> <pre><code>@contextmanager\ndef add_to_path(path: str) -&gt; Generator[None, None, None]:\n    \"\"\"Temporarily add a directory to sys.path.\n\n    Args:\n        path: Directory to add to sys.path\n\n    Yields:\n        None\n    \"\"\"\n    sys.path.insert(0, path)\n    try:\n        yield\n    finally:\n        sys.path.pop(0)\n</code></pre>"},{"location":"reference/aimq/utils/#aimq.utils.encode_image","title":"<code>encode_image(image)</code>","text":"<p>Encode a PIL Image as a base64 string.</p> <p>Parameters:</p> Name Type Description Default <code>image</code> <code>Image</code> <p>PIL Image to encode</p> required <p>Returns:</p> Type Description <code>str</code> <p>Base64 encoded string of the image in PNG format</p> Source code in <code>src/aimq/utils.py</code> <pre><code>def encode_image(image: Image.Image) -&gt; str:\n    \"\"\"\n    Encode a PIL Image as a base64 string.\n\n    Args:\n        image: PIL Image to encode\n\n    Returns:\n        Base64 encoded string of the image in PNG format\n    \"\"\"\n    buffered = BytesIO()\n    image.save(buffered, format=\"PNG\")\n    return base64.b64encode(buffered.getvalue()).decode('utf-8')\n</code></pre>"},{"location":"reference/aimq/utils/#aimq.utils.load_module","title":"<code>load_module(module_path, *, add_to_sys_path=True)</code>","text":"<p>Load a Python module from a file path.</p> <p>Parameters:</p> Name Type Description Default <code>module_path</code> <code>Path</code> <p>Path to the Python file to load</p> required <code>add_to_sys_path</code> <code>bool</code> <p>Whether to add the module's parent directory to sys.path</p> <code>True</code> <p>Returns:</p> Type Description <code>Any</code> <p>The loaded module</p> <p>Raises:</p> Type Description <code>ImportError</code> <p>If the module cannot be loaded</p> Source code in <code>src/aimq/utils.py</code> <pre><code>def load_module(module_path: Path, *, add_to_sys_path: bool = True) -&gt; Any:\n    \"\"\"Load a Python module from a file path.\n\n    Args:\n        module_path: Path to the Python file to load\n        add_to_sys_path: Whether to add the module's parent directory to sys.path\n\n    Returns:\n        The loaded module\n\n    Raises:\n        ImportError: If the module cannot be loaded\n    \"\"\"\n    if add_to_sys_path:\n        # Add the parent directory to Python path\n        module_dir = module_path.parent\n        sys.path.insert(0, str(module_dir.parent))\n\n    try:\n        # Import the module using the package name\n        package_name = module_path.parent.name\n        module_name = module_path.stem\n        full_module_name = f\"{package_name}.{module_name}\"\n\n        # Import the module\n        spec = importlib.util.spec_from_file_location(full_module_name, module_path)\n        if spec is None or spec.loader is None:\n            raise ImportError(f\"Could not load module from {module_path}\")\n\n        module = importlib.util.module_from_spec(spec)\n        sys.modules[full_module_name] = module  # Register the module in sys.modules\n        spec.loader.exec_module(module)\n\n        return module\n    finally:\n        if add_to_sys_path:\n            # Remove the added path to avoid polluting sys.path\n            sys.path.pop(0)\n</code></pre>"},{"location":"reference/aimq/worker/","title":"aimq.worker","text":""},{"location":"reference/aimq/worker/#aimq.worker","title":"<code>aimq.worker</code>","text":""},{"location":"reference/aimq/worker/#aimq.worker-attributes","title":"Attributes","text":""},{"location":"reference/aimq/worker/#aimq.worker-classes","title":"Classes","text":""},{"location":"reference/aimq/worker/#aimq.worker.Worker","title":"<code>Worker</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Main worker class that manages job processing across multiple queues.</p> <p>The Worker class is responsible for managing multiple queues and their associated processing threads. It handles queue registration, thread management, and provides a clean interface for starting and stopping job processing.</p> <p>Attributes:</p> Name Type Description <code>queues</code> <code>OrderedDict[str, Queue]</code> <p>Ordered dictionary of registered queues</p> <code>logger</code> <code>Logger</code> <p>Logger instance for recording worker activities</p> <code>log_level</code> <code>LogLevel | str</code> <p>Current logging level</p> <code>running</code> <code>LogLevel | str</code> <p>Threading event controlling worker execution</p> <code>thread</code> <code>Optional[WorkerThread]</code> <p>Worker thread instance</p>"},{"location":"reference/aimq/worker/#aimq.worker.Worker-attributes","title":"Attributes","text":""},{"location":"reference/aimq/worker/#aimq.worker.Worker.idle_wait","title":"<code>idle_wait = Field(default_factory=lambda: config.worker_idle_wait)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/worker/#aimq.worker.Worker.is_running","title":"<code>is_running = Field(default_factory=threading.Event)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/worker/#aimq.worker.Worker.log_level","title":"<code>log_level = Field(default_factory=lambda: config.worker_log_level)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/worker/#aimq.worker.Worker.logger","title":"<code>logger = Field(default_factory=Logger)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/worker/#aimq.worker.Worker.model_config","title":"<code>model_config = ConfigDict(arbitrary_types_allowed=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/worker/#aimq.worker.Worker.name","title":"<code>name = Field(default_factory=lambda: config.worker_name, description='Name of this worker')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/worker/#aimq.worker.Worker.queues","title":"<code>queues = Field(default_factory=OrderedDict)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/worker/#aimq.worker.Worker.thread","title":"<code>thread = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/worker/#aimq.worker.Worker-functions","title":"Functions","text":""},{"location":"reference/aimq/worker/#aimq.worker.Worker.assign","title":"<code>assign(runnable, *, queue=None, timeout=300, delete_on_finish=False, tags=None)</code>","text":"<p>Register a task with a queue name and runnable instance.</p> <p>Parameters:</p> Name Type Description Default <code>runnable</code> <code>Runnable</code> <p>Langchain Runnable instance to process jobs</p> required <code>queue</code> <code>str | None</code> <p>Queue name to assign the task to</p> <code>None</code> <code>timeout</code> <code>int</code> <p>Maximum time in seconds for a task to complete. If 0, messages will be popped instead of read.</p> <code>300</code> <code>delete_on_finish</code> <code>bool</code> <p>Whether to delete (True) or archive (False) jobs after processing</p> <code>False</code> <code>tags</code> <code>List[str] | None</code> <p>Optional list of tags to associate with the queue</p> <code>None</code> Source code in <code>src/aimq/worker.py</code> <pre><code>def assign(\n    self,\n    runnable: Runnable,\n    *,\n    queue: str | None = None,\n    timeout: int = 300,\n    delete_on_finish: bool = False,\n    tags: List[str] | None = None\n) -&gt; None:\n    \"\"\"Register a task with a queue name and runnable instance.\n\n    Args:\n        runnable: Langchain Runnable instance to process jobs\n        queue: Queue name to assign the task to\n        timeout: Maximum time in seconds for a task to complete. If 0, messages will be popped instead of read.\n        delete_on_finish: Whether to delete (True) or archive (False) jobs after processing\n        tags: Optional list of tags to associate with the queue\n    \"\"\"\n\n    runnable.name = queue or runnable.name\n    if runnable.name is None:\n        raise ValueError(\"Queue name is required\")\n\n    self.queues[runnable.name] = Queue(\n        runnable=runnable,\n        timeout=timeout,\n        tags=tags or [],\n        delete_on_finish=delete_on_finish,\n        logger=self.logger,\n        worker_name=self.name\n    )\n    self.logger.info(f\"Registered task {runnable.name}\")\n</code></pre>"},{"location":"reference/aimq/worker/#aimq.worker.Worker.load","title":"<code>load(worker_path)</code>  <code>classmethod</code>","text":"<p>Load a worker instance from a Python file.</p> <p>Parameters:</p> Name Type Description Default <code>worker_path</code> <code>Path</code> <p>Path to the Python file containing the worker instance</p> required <p>Returns:</p> Type Description <code>Worker</code> <p>Worker instance exported as 'worker' from the module</p> <p>Raises:</p> Type Description <code>ImportError</code> <p>If the module cannot be loaded</p> <code>AttributeError</code> <p>If the module does not export a 'worker' attribute</p> Source code in <code>src/aimq/worker.py</code> <pre><code>@classmethod\ndef load(cls, worker_path: Path) -&gt; \"Worker\":\n    \"\"\"Load a worker instance from a Python file.\n\n    Args:\n        worker_path: Path to the Python file containing the worker instance\n\n    Returns:\n        Worker instance exported as 'worker' from the module\n\n    Raises:\n        ImportError: If the module cannot be loaded\n        AttributeError: If the module does not export a 'worker' attribute\n    \"\"\"\n    module = load_module(worker_path)\n\n    if not hasattr(module, \"worker\"):\n        raise AttributeError(f\"Module {worker_path} does not export a 'worker' attribute\")\n\n    worker: Worker = module.worker\n    worker.logger.info(f\"Tasks loaded from file {worker_path}\")\n\n    return worker\n</code></pre>"},{"location":"reference/aimq/worker/#aimq.worker.Worker.log","title":"<code>log(block=True)</code>","text":"<p>Print log events from the logger.</p> <p>Parameters:</p> Name Type Description Default <code>block</code> <code>bool</code> <p>If True, block until events are available</p> <code>True</code> Source code in <code>src/aimq/worker.py</code> <pre><code>def log(self, block: bool = True) -&gt; None:\n    \"\"\"Print log events from the logger.\n\n    Args:\n        block: If True, block until events are available\n    \"\"\"\n    self.logger.print(block=block, level=self.log_level)\n</code></pre>"},{"location":"reference/aimq/worker/#aimq.worker.Worker.send","title":"<code>send(queue, data, delay=None)</code>","text":"<p>Send data to a queue.</p> <p>Parameters:</p> Name Type Description Default <code>queue</code> <code>str</code> <p>Name of the queue to send data to</p> required <code>data</code> <code>dict[str, Any]</code> <p>Data to send</p> required <code>delay</code> <code>int | None</code> <p>Optional delay in seconds before sending the data</p> <code>None</code> Source code in <code>src/aimq/worker.py</code> <pre><code>def send(self, queue: str, data: dict[str, Any], delay: int | None = None) -&gt; int:\n    \"\"\"Send data to a queue.\n\n    Args:\n        queue: Name of the queue to send data to\n        data: Data to send\n        delay: Optional delay in seconds before sending the data\n    \"\"\"\n    return self.queues[queue].send(data, delay)\n</code></pre>"},{"location":"reference/aimq/worker/#aimq.worker.Worker.start","title":"<code>start(block=True)</code>","text":"<p>Start processing tasks in an endless loop.</p> <p>Parameters:</p> Name Type Description Default <code>block</code> <code>bool</code> <p>If True, block until events are available</p> <code>True</code> Source code in <code>src/aimq/worker.py</code> <pre><code>def start(self, block: bool = True) -&gt; None:\n    \"\"\"Start processing tasks in an endless loop.\n\n    Args:\n        block: If True, block until events are available\n    \"\"\"\n    if self.thread and self.thread.is_alive():\n        return\n\n    self.is_running.set()\n    self.thread = WorkerThread(self.queues, self.logger, self.is_running, idle_wait=self.idle_wait)\n    self.thread.start()\n\n    if block:\n        self.log(block=block)\n</code></pre>"},{"location":"reference/aimq/worker/#aimq.worker.Worker.stop","title":"<code>stop()</code>","text":"<p>Stop processing tasks and clear job history.</p> Source code in <code>src/aimq/worker.py</code> <pre><code>def stop(self) -&gt; None:\n    \"\"\"Stop processing tasks and clear job history.\"\"\"\n    if self.is_running.is_set():\n        self.is_running.clear()\n        if self.thread:\n            self.thread.join()\n            self.thread = None\n        self.logger.info(\"Worker stopped\")\n</code></pre>"},{"location":"reference/aimq/worker/#aimq.worker.Worker.task","title":"<code>task(*, queue=None, timeout=300, tags=None, delete_on_finish=False)</code>","text":"<p>Decorator to register a function that returns a Runnable with a queue.</p> <p>Parameters:</p> Name Type Description Default <code>queue</code> <code>str | None</code> <p>Name of the queue to get jobs from</p> <code>None</code> <code>timeout</code> <code>int</code> <p>Maximum time in seconds for a task to complete. If 0, messages will be popped instead of read</p> <code>300</code> <code>delete_on_finish</code> <code>bool</code> <p>Whether to delete (True) or archive (False) jobs after processing</p> <code>False</code> <code>tags</code> <code>List[str] | None</code> <p>Optional list of tags to associate with the queue</p> <code>None</code> Source code in <code>src/aimq/worker.py</code> <pre><code>def task(\n    self,\n    *,\n    queue: str | None = None,\n    timeout: int = 300,\n    tags: List[str] | None = None,\n    delete_on_finish: bool = False,\n) -&gt; Callable:\n    \"\"\"Decorator to register a function that returns a Runnable with a queue.\n\n    Args:\n        queue: Name of the queue to get jobs from\n        timeout: Maximum time in seconds for a task to complete. If 0, messages will be popped instead of read\n        delete_on_finish: Whether to delete (True) or archive (False) jobs after processing\n        tags: Optional list of tags to associate with the queue\n    \"\"\"\n    def decorator(func: Callable) -&gt; Callable:\n        @wraps(func)\n        def wrapper(*args: Any, **kwargs: Any) -&gt; Any:\n            return func(*args, **kwargs)\n\n        self.assign(\n            RunnableLambda(func, name=(queue or func.__name__)),\n            timeout=timeout,\n            delete_on_finish=delete_on_finish,\n            tags=tags\n        )\n        return wrapper\n    return decorator\n</code></pre>"},{"location":"reference/aimq/worker/#aimq.worker.Worker.work","title":"<code>work(queue)</code>","text":"<p>Process a job from a queue.</p> <p>Parameters:</p> Name Type Description Default <code>queue</code> <code>str</code> <p>Name of the queue to process a job from</p> required Source code in <code>src/aimq/worker.py</code> <pre><code>def work(self, queue: str) -&gt; Any:\n    \"\"\"Process a job from a queue.\n\n    Args:\n        queue: Name of the queue to process a job from\n    \"\"\"\n    return self.queues[queue].work()\n</code></pre>"},{"location":"reference/aimq/worker/#aimq.worker.WorkerThread","title":"<code>WorkerThread(queues, logger, running, idle_wait=1.0)</code>","text":"<p>               Bases: <code>Thread</code></p> <p>A thread that processes jobs from multiple queues.</p> <p>Parameters:</p> Name Type Description Default <code>queues</code> <code>OrderedDict[str, Queue]</code> <p>Ordered dictionary of queue name to Queue instance mappings</p> required <code>logger</code> <code>Logger</code> <p>Logger instance for recording worker activities</p> required <code>running</code> <code>Event</code> <p>Threading event to control the worker's execution</p> required <code>idle_wait</code> <code>float</code> <p>Time in seconds to wait when no jobs are found</p> <code>1.0</code> <p>Attributes:</p> Name Type Description <code>queues</code> <p>The queues to process jobs from</p> <code>logger</code> <p>Logger instance</p> <code>running</code> <p>Threading event controlling execution</p> <code>idle_wait</code> <p>Sleep duration when idle</p> Source code in <code>src/aimq/worker.py</code> <pre><code>def __init__(self, queues: OrderedDict[str, Queue], logger: Logger, running: threading.Event, idle_wait: float = 1.0):\n    super().__init__()\n    self.queues = queues\n    self.logger = logger\n    self.running = running\n    self.idle_wait = idle_wait\n</code></pre>"},{"location":"reference/aimq/worker/#aimq.worker.WorkerThread-attributes","title":"Attributes","text":""},{"location":"reference/aimq/worker/#aimq.worker.WorkerThread.idle_wait","title":"<code>idle_wait = idle_wait</code>  <code>instance-attribute</code>","text":""},{"location":"reference/aimq/worker/#aimq.worker.WorkerThread.logger","title":"<code>logger = logger</code>  <code>instance-attribute</code>","text":""},{"location":"reference/aimq/worker/#aimq.worker.WorkerThread.queues","title":"<code>queues = queues</code>  <code>instance-attribute</code>","text":""},{"location":"reference/aimq/worker/#aimq.worker.WorkerThread.running","title":"<code>running = running</code>  <code>instance-attribute</code>","text":""},{"location":"reference/aimq/worker/#aimq.worker.WorkerThread-functions","title":"Functions","text":""},{"location":"reference/aimq/worker/#aimq.worker.WorkerThread.run","title":"<code>run()</code>","text":"<p>Start the worker thread.</p> Source code in <code>src/aimq/worker.py</code> <pre><code>def run(self) -&gt; None:\n    \"\"\"Start the worker thread.\"\"\"\n    self.logger.info(\"Worker thread started\")\n\n    while self.running.is_set():\n        try:\n            found_jobs = False\n            for queue in self.queues.values():\n                if not self.running.is_set():\n                    break\n\n                # work next job in queue\n                try:\n                    found_jobs = found_jobs or bool(queue.work())\n                except RuntimeError as e:\n                    self.logger.error(f\"Runtime error in queue {queue.name}\", {\"error\": str(e)})\n\n            if not found_jobs:\n                self.logger.debug(\"No jobs found, waiting...\")\n                time.sleep(self.idle_wait)\n\n        except Exception as e:\n            self.logger.critical(\"Worker thread encountered an unhandled error\", {\"error\": str(e)})\n            self.running.clear()\n</code></pre>"},{"location":"reference/aimq/worker/#aimq.worker-functions","title":"Functions","text":""},{"location":"reference/aimq/clients/","title":"aimq.clients","text":""},{"location":"reference/aimq/clients/#aimq.clients","title":"<code>aimq.clients</code>","text":""},{"location":"reference/aimq/clients/supabase/","title":"aimq.clients.supabase","text":""},{"location":"reference/aimq/clients/supabase/#aimq.clients.supabase","title":"<code>aimq.clients.supabase</code>","text":""},{"location":"reference/aimq/clients/supabase/#aimq.clients.supabase-attributes","title":"Attributes","text":""},{"location":"reference/aimq/clients/supabase/#aimq.clients.supabase.supabase","title":"<code>supabase = SupabaseClient()</code>  <code>module-attribute</code>","text":""},{"location":"reference/aimq/clients/supabase/#aimq.clients.supabase-classes","title":"Classes","text":""},{"location":"reference/aimq/clients/supabase/#aimq.clients.supabase.SupabaseClient","title":"<code>SupabaseClient()</code>","text":"<p>A wrapper class for Supabase operations.</p> <p>Initialize the Supabase client.</p> Source code in <code>src/aimq/clients/supabase.py</code> <pre><code>def __init__(self):\n    \"\"\"Initialize the Supabase client.\"\"\"\n    self._client: Optional[Client] = None\n</code></pre>"},{"location":"reference/aimq/clients/supabase/#aimq.clients.supabase.SupabaseClient-attributes","title":"Attributes","text":""},{"location":"reference/aimq/clients/supabase/#aimq.clients.supabase.SupabaseClient.client","title":"<code>client</code>  <code>property</code>","text":"<p>Get or create the Supabase client.</p> <p>Returns:</p> Name Type Description <code>Client</code> <code>Client</code> <p>Configured Supabase client</p> <p>Raises:</p> Type Description <code>SupabaseError</code> <p>If Supabase is not properly configured</p>"},{"location":"reference/aimq/clients/supabase/#aimq.clients.supabase.SupabaseClient-functions","title":"Functions","text":""},{"location":"reference/aimq/clients/supabase/#aimq.clients.supabase.SupabaseError","title":"<code>SupabaseError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception for Supabase-related errors.</p>"},{"location":"reference/aimq/commands/","title":"aimq.commands","text":""},{"location":"reference/aimq/commands/#aimq.commands","title":"<code>aimq.commands</code>","text":"<p>AIMQ command line interface.</p>"},{"location":"reference/aimq/commands/#aimq.commands-attributes","title":"Attributes","text":""},{"location":"reference/aimq/commands/#aimq.commands.app","title":"<code>app = typer.Typer(no_args_is_help=True)</code>  <code>module-attribute</code>","text":""},{"location":"reference/aimq/commands/disable/","title":"aimq.commands.disable","text":""},{"location":"reference/aimq/commands/disable/#aimq.commands.disable","title":"<code>aimq.commands.disable</code>","text":"<p>Command for disabling PGMQ in Supabase.</p>"},{"location":"reference/aimq/commands/disable/#aimq.commands.disable-classes","title":"Classes","text":""},{"location":"reference/aimq/commands/disable/#aimq.commands.disable-functions","title":"Functions","text":""},{"location":"reference/aimq/commands/disable/#aimq.commands.disable.disable","title":"<code>disable()</code>","text":"<p>Disable PGMQ in Supabase by removing pgmq_public from API schemas.</p> Source code in <code>src/aimq/commands/disable.py</code> <pre><code>def disable() -&gt; None:\n    \"\"\"Disable PGMQ in Supabase by removing pgmq_public from API schemas.\"\"\"\n    try:\n        config = SupabaseConfig(ProjectPath())\n        config.disable()\n        typer.echo(\"Successfully disabled PGMQ in Supabase config\")\n    except Exception as e:\n        typer.echo(f\"Failed to disable PGMQ: {str(e)}\", err=True)\n        raise typer.Exit(1)\n</code></pre>"},{"location":"reference/aimq/commands/enable/","title":"aimq.commands.enable","text":""},{"location":"reference/aimq/commands/enable/#aimq.commands.enable","title":"<code>aimq.commands.enable</code>","text":"<p>Command for enabling PGMQ in Supabase.</p>"},{"location":"reference/aimq/commands/enable/#aimq.commands.enable-classes","title":"Classes","text":""},{"location":"reference/aimq/commands/enable/#aimq.commands.enable-functions","title":"Functions","text":""},{"location":"reference/aimq/commands/enable/#aimq.commands.enable.enable","title":"<code>enable()</code>","text":"<p>Enable PGMQ in Supabase by adding pgmq_public to API schemas.</p> Source code in <code>src/aimq/commands/enable.py</code> <pre><code>def enable() -&gt; None:\n    \"\"\"Enable PGMQ in Supabase by adding pgmq_public to API schemas.\"\"\"\n    try:\n        config = SupabaseConfig(ProjectPath())\n        config.enable()\n        typer.echo(\"Successfully enabled PGMQ in Supabase config\")\n    except Exception as e:\n        typer.echo(f\"Failed to enable PGMQ: {str(e)}\", err=True)\n        raise typer.Exit(1)\n</code></pre>"},{"location":"reference/aimq/commands/init/","title":"aimq.commands.init","text":""},{"location":"reference/aimq/commands/init/#aimq.commands.init","title":"<code>aimq.commands.init</code>","text":"<p>Command for initializing a new AIMQ project.</p> <p>This module provides functionality to initialize a new AIMQ project with the required directory structure and configuration files.</p>"},{"location":"reference/aimq/commands/init/#aimq.commands.init-classes","title":"Classes","text":""},{"location":"reference/aimq/commands/init/#aimq.commands.init-functions","title":"Functions","text":""},{"location":"reference/aimq/commands/init/#aimq.commands.init.init","title":"<code>init(directory=typer.Argument(None, help='Directory to initialize AIMQ project in'))</code>","text":"<p>Initialize a new AIMQ project in the specified directory.</p> <p>Creates the required directory structure and configuration files for a new AIMQ project. If no directory is specified, initializes in the current directory.</p> <p>Parameters:</p> Name Type Description Default <code>directory</code> <code>Optional[str]</code> <p>Optional directory path to initialize project in. Defaults to current directory.</p> <code>Argument(None, help='Directory to initialize AIMQ project in')</code> <p>Raises:</p> Type Description <code>Exit</code> <p>If project initialization fails, exits with status code 1.</p> <code>FileNotFoundError</code> <p>If template files cannot be found.</p> <code>PermissionError</code> <p>If directory creation or file operations fail due to permissions.</p> Source code in <code>src/aimq/commands/init.py</code> <pre><code>def init(directory: Optional[str] = typer.Argument(None, help=\"Directory to initialize AIMQ project in\")) -&gt; None:\n    \"\"\"Initialize a new AIMQ project in the specified directory.\n\n    Creates the required directory structure and configuration files for a new AIMQ project.\n    If no directory is specified, initializes in the current directory.\n\n    Args:\n        directory: Optional directory path to initialize project in. Defaults to current directory.\n\n    Raises:\n        typer.Exit: If project initialization fails, exits with status code 1.\n        FileNotFoundError: If template files cannot be found.\n        PermissionError: If directory creation or file operations fail due to permissions.\n    \"\"\"\n    try:\n        # Convert directory to absolute Path\n        project_dir = Path(directory or \".\").resolve()\n        typer.echo(f\"Initializing project in directory: {project_dir}\")\n\n        # Create all required directories\n        project_dir.mkdir(parents=True, exist_ok=True)\n        (project_dir / \"supabase\").mkdir(exist_ok=True)\n        (project_dir / \"supabase\" / \"migrations\").mkdir(exist_ok=True)\n\n        # Initialize project path with the target directory\n        project_path = ProjectPath(project_dir)\n        typer.echo(f\"Created ProjectPath with root: {project_path.root}\")\n\n        # Create and configure Supabase\n        config = SupabaseConfig(project_path)\n        config.enable()  # Ensure pgmq_public is enabled\n\n        # Create setup migration\n        migrations = SupabaseMigrations(project_path)\n        migrations.setup_aimq_migration()\n\n        # Copy template tasks.py file if it doesn't exist\n        tasks_file = project_path.root / \"tasks.py\"\n        if not tasks_file.exists():\n            template_tasks = Path(__file__).parent / \"shared\" / \"templates\" / \"tasks.py\"\n            tasks_file.write_text(template_tasks.read_text())\n\n        typer.echo(f\"Successfully initialized AIMQ project in {project_path.root}\")\n    except Exception as e:\n        typer.echo(f\"Failed to initialize AIMQ project: {str(e)}\", err=True)\n        raise typer.Exit(1)\n</code></pre>"},{"location":"reference/aimq/commands/send/","title":"aimq.commands.send","text":""},{"location":"reference/aimq/commands/send/#aimq.commands.send","title":"<code>aimq.commands.send</code>","text":"<p>Command for sending jobs to a queue.</p>"},{"location":"reference/aimq/commands/send/#aimq.commands.send-classes","title":"Classes","text":""},{"location":"reference/aimq/commands/send/#aimq.commands.send.Provider","title":"<code>Provider</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p>"},{"location":"reference/aimq/commands/send/#aimq.commands.send.Provider-attributes","title":"Attributes","text":""},{"location":"reference/aimq/commands/send/#aimq.commands.send.Provider.SUPABASE","title":"<code>SUPABASE = 'supabase'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/commands/send/#aimq.commands.send-functions","title":"Functions","text":""},{"location":"reference/aimq/commands/send/#aimq.commands.send.send","title":"<code>send(queue_name=typer.Argument(..., help='Name of the queue to send the job to'), data=typer.Argument(..., help='JSON data to send as the job payload'), delay=typer.Option(None, '--delay', '-d', help='Delay in seconds before the job becomes visible'), provider=typer.Option(Provider.SUPABASE, '--provider', '-p', help='Queue provider to use', case_sensitive=False))</code>","text":"<p>Send a job to a queue with JSON data.</p> Source code in <code>src/aimq/commands/send.py</code> <pre><code>def send(\n    queue_name: str = typer.Argument(\n        ...,\n        help=\"Name of the queue to send the job to\",\n    ),\n    data: str = typer.Argument(\n        ...,\n        help=\"JSON data to send as the job payload\",\n    ),\n    delay: Optional[int] = typer.Option(\n        None,\n        \"--delay\",\n        \"-d\",\n        help=\"Delay in seconds before the job becomes visible\",\n    ),\n    provider: Provider = typer.Option(\n        Provider.SUPABASE,\n        \"--provider\",\n        \"-p\",\n        help=\"Queue provider to use\",\n        case_sensitive=False,\n    ),\n) -&gt; None:\n    \"\"\"Send a job to a queue with JSON data.\"\"\"\n    try:\n        # Parse the JSON data\n        job_data = json.loads(data)\n\n        # Create provider instance based on selection\n        if provider == Provider.SUPABASE:\n            queue_provider = SupabaseQueueProvider()\n        else:\n            raise ValueError(f\"Unsupported provider: {provider}\")\n\n        # Send the job\n        job_id = queue_provider.send(queue_name, job_data, delay=delay)\n\n        typer.echo(f\"Successfully sent job {job_id} to queue '{queue_name}' using {provider} provider\")\n\n    except json.JSONDecodeError:\n        typer.echo(\"Error: Invalid JSON data\", err=True)\n        raise typer.Exit(1)\n    except Exception as e:\n        typer.echo(f\"Error: {str(e)}\", err=True)\n        raise typer.Exit(1)\n</code></pre>"},{"location":"reference/aimq/commands/start/","title":"aimq.commands.start","text":""},{"location":"reference/aimq/commands/start/#aimq.commands.start","title":"<code>aimq.commands.start</code>","text":"<p>Command for starting the AIMQ worker.</p>"},{"location":"reference/aimq/commands/start/#aimq.commands.start-classes","title":"Classes","text":""},{"location":"reference/aimq/commands/start/#aimq.commands.start-functions","title":"Functions","text":""},{"location":"reference/aimq/commands/start/#aimq.commands.start.start","title":"<code>start(worker_path=typer.Argument(None, help='Path to the Python file containing worker definitions'), log_level=typer.Option(LogLevel.INFO, '--log-level', '-l', help='Set the log level (debug, info, warning, error, critical)', case_sensitive=False), debug=typer.Option(False, '--debug', '-d', help='Enable debug logging (shortcut for --log-level debug)'))</code>","text":"<p>Start the AIMQ worker with the specified tasks.</p> Source code in <code>src/aimq/commands/start.py</code> <pre><code>def start(\n    worker_path: Optional[Path] = typer.Argument(\n        None,\n        help=\"Path to the Python file containing worker definitions\",\n    ),\n    log_level: LogLevel = typer.Option(\n        LogLevel.INFO,\n        \"--log-level\",\n        \"-l\",\n        help=\"Set the log level (debug, info, warning, error, critical)\",\n        case_sensitive=False,\n    ),\n    debug: bool = typer.Option(\n        False,\n        \"--debug\",\n        \"-d\",\n        help=\"Enable debug logging (shortcut for --log-level debug)\",\n    ),\n):\n    \"\"\"Start the AIMQ worker with the specified tasks.\"\"\"\n    if worker_path:\n        worker = Worker.load(worker_path)\n    else:\n        worker = Worker()\n\n    worker.log_level = LogLevel.DEBUG if debug else log_level\n\n    def signal_handler(signum, frame):\n        \"\"\"Handle shutdown signals gracefully.\"\"\"\n        print('')\n        worker.logger.info(\"Shutting down...\")\n        worker.log(block=False)\n        worker.stop()\n        worker.log(block=False)\n        sys.exit(0)\n\n    # Set up signal handlers\n    signal.signal(signal.SIGINT, signal_handler)\n    signal.signal(signal.SIGTERM, signal_handler)\n\n    try:\n        worker.start()\n    except Exception as e:\n        worker.logger.error(f\"Error: {e}\")\n        worker.log(block=False)\n        worker.stop()\n        worker.log(block=False)\n        sys.exit(1)\n</code></pre>"},{"location":"reference/aimq/commands/shared/","title":"aimq.commands.shared","text":""},{"location":"reference/aimq/commands/shared/#aimq.commands.shared","title":"<code>aimq.commands.shared</code>","text":""},{"location":"reference/aimq/commands/shared/config/","title":"aimq.commands.shared.config","text":""},{"location":"reference/aimq/commands/shared/config/#aimq.commands.shared.config","title":"<code>aimq.commands.shared.config</code>","text":""},{"location":"reference/aimq/commands/shared/config/#aimq.commands.shared.config-classes","title":"Classes","text":""},{"location":"reference/aimq/commands/shared/config/#aimq.commands.shared.config.SupabaseConfig","title":"<code>SupabaseConfig(project_path)</code>","text":"<p>Initialize SupabaseConfig with a ProjectPath instance.</p> <p>Parameters:</p> Name Type Description Default <code>project_path</code> <code>ProjectPath</code> <p>Instance of ProjectPath for path management</p> required Source code in <code>src/aimq/commands/shared/config.py</code> <pre><code>def __init__(self, project_path: ProjectPath):\n    \"\"\"\n    Initialize SupabaseConfig with a ProjectPath instance.\n\n    Args:\n        project_path (ProjectPath): Instance of ProjectPath for path management\n    \"\"\"\n    self.project_path = project_path\n    self._config: TOMLDocument = tomlkit.document()\n</code></pre>"},{"location":"reference/aimq/commands/shared/config/#aimq.commands.shared.config.SupabaseConfig-attributes","title":"Attributes","text":""},{"location":"reference/aimq/commands/shared/config/#aimq.commands.shared.config.SupabaseConfig.config","title":"<code>config</code>  <code>property</code>","text":"<p>Get the config, loading it if not already loaded.</p> <p>Returns:</p> Name Type Description <code>TOMLDocument</code> <code>TOMLDocument</code> <p>The loaded configuration</p>"},{"location":"reference/aimq/commands/shared/config/#aimq.commands.shared.config.SupabaseConfig.project_path","title":"<code>project_path = project_path</code>  <code>instance-attribute</code>","text":""},{"location":"reference/aimq/commands/shared/config/#aimq.commands.shared.config.SupabaseConfig-functions","title":"Functions","text":""},{"location":"reference/aimq/commands/shared/config/#aimq.commands.shared.config.SupabaseConfig.disable","title":"<code>disable()</code>","text":"<p>Disable PGMQ in Supabase by removing pgmq_public from API schemas</p> Source code in <code>src/aimq/commands/shared/config.py</code> <pre><code>def disable(self) -&gt; None:\n    \"\"\"Disable PGMQ in Supabase by removing pgmq_public from API schemas\"\"\"\n    schemas: items.Array = self.config[\"api\"][\"schemas\"]  # type: ignore\n    if \"pgmq_public\" in schemas:\n        schemas.remove(\"pgmq_public\")\n        self.save()\n</code></pre>"},{"location":"reference/aimq/commands/shared/config/#aimq.commands.shared.config.SupabaseConfig.enable","title":"<code>enable()</code>","text":"<p>Enable PGMQ in Supabase by adding pgmq_public to API schemas</p> Source code in <code>src/aimq/commands/shared/config.py</code> <pre><code>def enable(self) -&gt; None:\n    \"\"\"Enable PGMQ in Supabase by adding pgmq_public to API schemas\"\"\"\n    schemas: items.Array = self.config[\"api\"][\"schemas\"]  # type: ignore\n    if \"pgmq_public\" not in schemas:\n        schemas.append(\"pgmq_public\")\n        self.save()\n</code></pre>"},{"location":"reference/aimq/commands/shared/config/#aimq.commands.shared.config.SupabaseConfig.load","title":"<code>load()</code>","text":"<p>Load the Supabase config from config.toml file. Creates config from template if it doesn't exist. Ensures api.schemas exists in the config.</p> <p>Returns:</p> Name Type Description <code>TOMLDocument</code> <code>TOMLDocument</code> <p>Loaded configuration</p> Source code in <code>src/aimq/commands/shared/config.py</code> <pre><code>def load(self) -&gt; TOMLDocument:\n    \"\"\"\n    Load the Supabase config from config.toml file.\n    Creates config from template if it doesn't exist.\n    Ensures api.schemas exists in the config.\n\n    Returns:\n        TOMLDocument: Loaded configuration\n    \"\"\"\n    if not self.project_path.supabase_config.exists():\n        self._create_from_template()\n\n    with open(self.project_path.supabase_config, \"r\") as f:\n        self._config = tomlkit.load(f)\n\n    # Ensure api.schemas exists\n    if \"api\" not in self._config:\n        self._config.add(\"api\", tomlkit.table())\n\n    api_table: items.Table = self._config[\"api\"]  # type: ignore\n    if \"schemas\" not in api_table:\n        api_table.add(\"schemas\", tomlkit.array())\n\n    return self._config\n</code></pre>"},{"location":"reference/aimq/commands/shared/config/#aimq.commands.shared.config.SupabaseConfig.save","title":"<code>save()</code>","text":"<p>Save the current configuration back to config.toml</p> Source code in <code>src/aimq/commands/shared/config.py</code> <pre><code>def save(self) -&gt; None:\n    \"\"\"Save the current configuration back to config.toml\"\"\"\n    with open(self.project_path.supabase_config, \"w\") as f:\n        tomlkit.dump(self.config, f)\n</code></pre>"},{"location":"reference/aimq/commands/shared/migration/","title":"aimq.commands.shared.migration","text":""},{"location":"reference/aimq/commands/shared/migration/#aimq.commands.shared.migration","title":"<code>aimq.commands.shared.migration</code>","text":""},{"location":"reference/aimq/commands/shared/migration/#aimq.commands.shared.migration-classes","title":"Classes","text":""},{"location":"reference/aimq/commands/shared/migration/#aimq.commands.shared.migration.SupabaseMigrations","title":"<code>SupabaseMigrations(project_path)</code>","text":"<p>Initialize Migration with a ProjectPath instance.</p> <p>Parameters:</p> Name Type Description Default <code>project_path</code> <code>ProjectPath</code> <p>Instance of ProjectPath for file operations</p> required Source code in <code>src/aimq/commands/shared/migration.py</code> <pre><code>def __init__(self, project_path: ProjectPath):\n    \"\"\"\n    Initialize Migration with a ProjectPath instance.\n\n    Args:\n        project_path (ProjectPath): Instance of ProjectPath for file operations\n    \"\"\"\n    self.project_path = project_path\n    self.template_dir = Path(__file__).parent / \"templates\"\n</code></pre>"},{"location":"reference/aimq/commands/shared/migration/#aimq.commands.shared.migration.SupabaseMigrations-attributes","title":"Attributes","text":""},{"location":"reference/aimq/commands/shared/migration/#aimq.commands.shared.migration.SupabaseMigrations.project_path","title":"<code>project_path = project_path</code>  <code>instance-attribute</code>","text":""},{"location":"reference/aimq/commands/shared/migration/#aimq.commands.shared.migration.SupabaseMigrations.template_dir","title":"<code>template_dir = Path(__file__).parent / 'templates'</code>  <code>instance-attribute</code>","text":""},{"location":"reference/aimq/commands/shared/migration/#aimq.commands.shared.migration.SupabaseMigrations-functions","title":"Functions","text":""},{"location":"reference/aimq/commands/shared/migration/#aimq.commands.shared.migration.SupabaseMigrations.create_migration","title":"<code>create_migration(name, template_name, context=None)</code>","text":"<p>Create a new migration file from a template.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the migration</p> required <code>template_name</code> <code>str</code> <p>Name of the template file to use</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Context data to apply to the template</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Path</code> <code>Path</code> <p>Path to the created migration file</p> Source code in <code>src/aimq/commands/shared/migration.py</code> <pre><code>def create_migration(self, name: str, template_name: str, context: Optional[Dict[str, Any]] = None) -&gt; Path:\n    \"\"\"\n    Create a new migration file from a template.\n\n    Args:\n        name (str): Name of the migration\n        template_name (str): Name of the template file to use\n        context (Optional[Dict[str, Any]]): Context data to apply to the template\n\n    Returns:\n        Path: Path to the created migration file\n    \"\"\"\n    context = context or {}\n\n    # Check for existing migration using ProjectPath\n    existing = self.project_path.find_existing_migration(name)\n    if existing:\n        return existing\n\n    # Get template from library\n    template_path = self._get_template(template_name)\n\n    # Generate migration path using ProjectPath\n    migration_path = self.project_path.migration_path(name)\n\n    # Ensure migrations directory exists\n    os.makedirs(self.project_path.migrations, exist_ok=True)\n\n    # Load and render template\n    with open(template_path, 'r') as f:\n        template_content = f.read()\n\n    content = render(template_content, context)\n\n    # Write migration file\n    with open(migration_path, 'w') as f:\n        f.write(content)\n\n    return migration_path\n</code></pre>"},{"location":"reference/aimq/commands/shared/migration/#aimq.commands.shared.migration.SupabaseMigrations.create_queue_migration","title":"<code>create_queue_migration(queue_name)</code>","text":"<p>Create a queue-specific migration. This migration sets up a new queue with the specified name.</p> <p>Parameters:</p> Name Type Description Default <code>queue_name</code> <code>str</code> <p>Name of the queue to create</p> required <p>Returns:</p> Name Type Description <code>Path</code> <code>Path</code> <p>Path to the created migration file</p> Source code in <code>src/aimq/commands/shared/migration.py</code> <pre><code>def create_queue_migration(self, queue_name: str) -&gt; Path:\n    \"\"\"\n    Create a queue-specific migration.\n    This migration sets up a new queue with the specified name.\n\n    Args:\n        queue_name (str): Name of the queue to create\n\n    Returns:\n        Path: Path to the created migration file\n    \"\"\"\n    return self.create_migration(\n        name=f\"create_queue_{queue_name}\",\n        template_name=\"create_queue.sql\",\n        context={\"queue_name\": queue_name}\n    )\n</code></pre>"},{"location":"reference/aimq/commands/shared/migration/#aimq.commands.shared.migration.SupabaseMigrations.setup_aimq_migration","title":"<code>setup_aimq_migration()</code>","text":"<p>Create the enable AIMQ migration using the static template. This migration enables the necessary Supabase configuration for AIMQ.</p> <p>Returns:</p> Name Type Description <code>Path</code> <code>Path</code> <p>Path to the created migration file</p> Source code in <code>src/aimq/commands/shared/migration.py</code> <pre><code>def setup_aimq_migration(self) -&gt; Path:\n    \"\"\"\n    Create the enable AIMQ migration using the static template.\n    This migration enables the necessary Supabase configuration for AIMQ.\n\n    Returns:\n        Path: Path to the created migration file\n    \"\"\"\n    return self.create_migration(\n        name=\"setup_aimq\",\n        template_name=\"setup_aimq.sql\"\n    )\n</code></pre>"},{"location":"reference/aimq/commands/shared/paths/","title":"aimq.commands.shared.paths","text":""},{"location":"reference/aimq/commands/shared/paths/#aimq.commands.shared.paths","title":"<code>aimq.commands.shared.paths</code>","text":""},{"location":"reference/aimq/commands/shared/paths/#aimq.commands.shared.paths-attributes","title":"Attributes","text":""},{"location":"reference/aimq/commands/shared/paths/#aimq.commands.shared.paths.default_paths","title":"<code>default_paths = ProjectPath()</code>  <code>module-attribute</code>","text":""},{"location":"reference/aimq/commands/shared/paths/#aimq.commands.shared.paths-classes","title":"Classes","text":""},{"location":"reference/aimq/commands/shared/paths/#aimq.commands.shared.paths.ProjectPath","title":"<code>ProjectPath(root=None)</code>","text":"<p>Initialize ProjectPath with a root directory.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>Optional[Path]</code> <p>Root directory path. Defaults to current working directory.</p> <code>None</code> Source code in <code>src/aimq/commands/shared/paths.py</code> <pre><code>def __init__(self, root: Optional[Path] = None):\n    \"\"\"\n    Initialize ProjectPath with a root directory.\n\n    Args:\n        root (Optional[Path]): Root directory path. Defaults to current working directory.\n    \"\"\"\n    self.root = root or Path.cwd()\n</code></pre>"},{"location":"reference/aimq/commands/shared/paths/#aimq.commands.shared.paths.ProjectPath-attributes","title":"Attributes","text":""},{"location":"reference/aimq/commands/shared/paths/#aimq.commands.shared.paths.ProjectPath.migrations","title":"<code>migrations</code>  <code>property</code>","text":"<p>Get the migrations directory path.</p>"},{"location":"reference/aimq/commands/shared/paths/#aimq.commands.shared.paths.ProjectPath.root","title":"<code>root = root or Path.cwd()</code>  <code>instance-attribute</code>","text":""},{"location":"reference/aimq/commands/shared/paths/#aimq.commands.shared.paths.ProjectPath.supabase","title":"<code>supabase</code>  <code>property</code>","text":"<p>Get the Supabase directory path.</p>"},{"location":"reference/aimq/commands/shared/paths/#aimq.commands.shared.paths.ProjectPath.supabase_config","title":"<code>supabase_config</code>  <code>property</code>","text":"<p>Get the Supabase config file path.</p>"},{"location":"reference/aimq/commands/shared/paths/#aimq.commands.shared.paths.ProjectPath-functions","title":"Functions","text":""},{"location":"reference/aimq/commands/shared/paths/#aimq.commands.shared.paths.ProjectPath.find_existing_migration","title":"<code>find_existing_migration(name)</code>","text":"<p>Check if there is an existing migration file with the given name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the migration to search for.</p> required <p>Returns:</p> Type Description <code>Optional[Path]</code> <p>Optional[Path]: Path to the existing migration if found, None otherwise.</p> Source code in <code>src/aimq/commands/shared/paths.py</code> <pre><code>def find_existing_migration(self, name: str) -&gt; Optional[Path]:\n    \"\"\"\n    Check if there is an existing migration file with the given name.\n\n    Args:\n        name (str): The name of the migration to search for.\n\n    Returns:\n        Optional[Path]: Path to the existing migration if found, None otherwise.\n    \"\"\"\n    if not self.migrations.exists():\n        return None\n\n    for file in self.migrations.glob(f\"*_{name}.sql\"):\n        return file\n    return None\n</code></pre>"},{"location":"reference/aimq/commands/shared/paths/#aimq.commands.shared.paths.ProjectPath.get_current_timestamp","title":"<code>get_current_timestamp()</code>  <code>staticmethod</code>","text":"<p>Get the current UTC timestamp as a string. Format: YYYYMMDDHHMMSS (equivalent to Go's 20060102150405)</p> Source code in <code>src/aimq/commands/shared/paths.py</code> <pre><code>@staticmethod\ndef get_current_timestamp() -&gt; str:\n    \"\"\"\n    Get the current UTC timestamp as a string.\n    Format: YYYYMMDDHHMMSS (equivalent to Go's 20060102150405)\n    \"\"\"\n    return datetime.now(timezone.utc).strftime(\"%Y%m%d%H%M%S\")\n</code></pre>"},{"location":"reference/aimq/commands/shared/paths/#aimq.commands.shared.paths.ProjectPath.migration_path","title":"<code>migration_path(name)</code>","text":"<p>Generate a path for a new migration file.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the migration.</p> required <p>Returns:</p> Name Type Description <code>Path</code> <code>Path</code> <p>The path to the new migration file.</p> Source code in <code>src/aimq/commands/shared/paths.py</code> <pre><code>def migration_path(self, name: str) -&gt; Path:\n    \"\"\"\n    Generate a path for a new migration file.\n\n    Args:\n        name (str): The name of the migration.\n\n    Returns:\n        Path: The path to the new migration file.\n    \"\"\"\n    timestamp = self.get_current_timestamp()\n    migration_file = f\"{timestamp}_{name}.sql\"\n    return self.migrations / migration_file\n</code></pre>"},{"location":"reference/aimq/commands/shared/templates/","title":"aimq.commands.shared.templates","text":""},{"location":"reference/aimq/commands/shared/templates/#aimq.commands.shared.templates","title":"<code>aimq.commands.shared.templates</code>","text":"<p>Template modules for AIMQ commands.</p>"},{"location":"reference/aimq/commands/shared/templates/#aimq.commands.shared.templates-attributes","title":"Attributes","text":""},{"location":"reference/aimq/commands/shared/templates/#aimq.commands.shared.templates.__all__","title":"<code>__all__ = ['tasks']</code>  <code>module-attribute</code>","text":""},{"location":"reference/aimq/commands/shared/templates/tasks/","title":"aimq.commands.shared.templates.tasks","text":""},{"location":"reference/aimq/commands/shared/templates/tasks/#aimq.commands.shared.templates.tasks","title":"<code>aimq.commands.shared.templates.tasks</code>","text":"<p>Template task definitions for AIMQ.</p> <p>This module provides example task definitions that demonstrate how to create and use worker tasks in AIMQ. These templates can be used as starting points for creating your own task definitions.</p>"},{"location":"reference/aimq/commands/shared/templates/tasks/#aimq.commands.shared.templates.tasks-attributes","title":"Attributes","text":""},{"location":"reference/aimq/commands/shared/templates/tasks/#aimq.commands.shared.templates.tasks.worker","title":"<code>worker = Worker()</code>  <code>module-attribute</code>","text":""},{"location":"reference/aimq/commands/shared/templates/tasks/#aimq.commands.shared.templates.tasks-classes","title":"Classes","text":""},{"location":"reference/aimq/commands/shared/templates/tasks/#aimq.commands.shared.templates.tasks-functions","title":"Functions","text":""},{"location":"reference/aimq/commands/shared/templates/tasks/#aimq.commands.shared.templates.tasks.example","title":"<code>example(data)</code>","text":"<p>Example task that converts input text to uppercase.</p> <p>This is a simple example task that demonstrates the basic pattern for creating worker tasks in AIMQ. It takes a dictionary with a 'text' key and returns a dictionary with the uppercase version of that text.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Dict[str, Any]</code> <p>Dictionary containing task data with a 'text' key.</p> required <p>Returns:</p> Type Description <code>Dict[str, str]</code> <p>Dictionary with 'result' key containing the uppercase text.</p> Example <pre><code>result = await worker.enqueue('example', {'text': 'hello'})\nassert result['result'] == 'HELLO'\n</code></pre> Source code in <code>src/aimq/commands/shared/templates/tasks.py</code> <pre><code>@worker.task()\ndef example(data: Dict[str, Any]) -&gt; Dict[str, str]:\n    \"\"\"Example task that converts input text to uppercase.\n\n    This is a simple example task that demonstrates the basic pattern for\n    creating worker tasks in AIMQ. It takes a dictionary with a 'text' key\n    and returns a dictionary with the uppercase version of that text.\n\n    Args:\n        data: Dictionary containing task data with a 'text' key.\n\n    Returns:\n        Dictionary with 'result' key containing the uppercase text.\n\n    Example:\n        ```python\n        result = await worker.enqueue('example', {'text': 'hello'})\n        assert result['result'] == 'HELLO'\n        ```\n    \"\"\"\n    text = data.get('text', '')\n    return {'result': text.upper()}\n</code></pre>"},{"location":"reference/aimq/providers/","title":"aimq.providers","text":""},{"location":"reference/aimq/providers/#aimq.providers","title":"<code>aimq.providers</code>","text":""},{"location":"reference/aimq/providers/#aimq.providers-attributes","title":"Attributes","text":""},{"location":"reference/aimq/providers/#aimq.providers.__all__","title":"<code>__all__ = ['QueueProvider', 'QueueNotFoundError', 'SupabaseQueueProvider']</code>  <code>module-attribute</code>","text":""},{"location":"reference/aimq/providers/#aimq.providers-classes","title":"Classes","text":""},{"location":"reference/aimq/providers/#aimq.providers.QueueNotFoundError","title":"<code>QueueNotFoundError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Raised when attempting to access a queue that does not exist.</p>"},{"location":"reference/aimq/providers/#aimq.providers.QueueProvider","title":"<code>QueueProvider</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base class for queue providers.</p>"},{"location":"reference/aimq/providers/#aimq.providers.QueueProvider-functions","title":"Functions","text":""},{"location":"reference/aimq/providers/#aimq.providers.QueueProvider.archive","title":"<code>archive(queue_name, job_or_id)</code>  <code>abstractmethod</code>","text":"<p>Archive a message in the queue.</p> Source code in <code>src/aimq/providers/base.py</code> <pre><code>@abstractmethod\ndef archive(self, queue_name: str, job_or_id: int | Job) -&gt; bool:\n    \"\"\"Archive a message in the queue.\"\"\"\n    pass\n</code></pre>"},{"location":"reference/aimq/providers/#aimq.providers.QueueProvider.delete","title":"<code>delete(queue_name, job_or_id)</code>  <code>abstractmethod</code>","text":"<p>Delete a message from the queue.</p> Source code in <code>src/aimq/providers/base.py</code> <pre><code>@abstractmethod\ndef delete(self, queue_name: str, job_or_id: int | Job) -&gt; bool:\n    \"\"\"Delete a message from the queue.\"\"\"\n    pass\n</code></pre>"},{"location":"reference/aimq/providers/#aimq.providers.QueueProvider.pop","title":"<code>pop(queue_name)</code>  <code>abstractmethod</code>","text":"<p>Pop a message from the queue.</p> Source code in <code>src/aimq/providers/base.py</code> <pre><code>@abstractmethod\ndef pop(self, queue_name: str) -&gt; Job | None:\n    \"\"\"Pop a message from the queue.\"\"\"\n    pass\n</code></pre>"},{"location":"reference/aimq/providers/#aimq.providers.QueueProvider.read","title":"<code>read(queue_name, timeout, count)</code>  <code>abstractmethod</code>","text":"<p>Read messages from the queue.</p> Source code in <code>src/aimq/providers/base.py</code> <pre><code>@abstractmethod\ndef read(self, queue_name: str, timeout: int, count: int) -&gt; List[Job]:\n    \"\"\"Read messages from the queue.\"\"\"\n    pass\n</code></pre>"},{"location":"reference/aimq/providers/#aimq.providers.QueueProvider.send","title":"<code>send(queue_name, data, delay=None)</code>  <code>abstractmethod</code>","text":"<p>Add a message to the queue.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The ID of the added message</p> Source code in <code>src/aimq/providers/base.py</code> <pre><code>@abstractmethod\ndef send(self, queue_name: str, data: dict[str, Any], delay: int | None = None) -&gt; int:\n    \"\"\"Add a message to the queue.\n\n    Returns:\n        int: The ID of the added message\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/aimq/providers/#aimq.providers.QueueProvider.send_batch","title":"<code>send_batch(queue_name, data_list, delay=None)</code>  <code>abstractmethod</code>","text":"<p>Add a batch of messages to the queue.</p> <p>Returns:</p> Type Description <code>list[int]</code> <p>list[int]: The IDs of the added messages</p> Source code in <code>src/aimq/providers/base.py</code> <pre><code>@abstractmethod\ndef send_batch(self, queue_name: str, data_list: list[dict[str, Any]], delay: int | None = None) -&gt; list[int]:\n    \"\"\"Add a batch of messages to the queue.\n\n    Returns:\n        list[int]: The IDs of the added messages\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/aimq/providers/#aimq.providers.SupabaseQueueProvider","title":"<code>SupabaseQueueProvider</code>","text":"<p>               Bases: <code>QueueProvider</code></p> <p>Supabase implementation of QueueProvider.</p>"},{"location":"reference/aimq/providers/#aimq.providers.SupabaseQueueProvider-functions","title":"Functions","text":""},{"location":"reference/aimq/providers/#aimq.providers.SupabaseQueueProvider.archive","title":"<code>archive(queue_name, job_or_id)</code>","text":"Source code in <code>src/aimq/providers/supabase.py</code> <pre><code>def archive(self, queue_name: str, job_or_id: int | Job) -&gt; bool:\n    msg_id = job_or_id.id if isinstance(job_or_id, Job) else job_or_id\n    data = self._rpc('archive', {\n        'queue_name': queue_name,\n        'message_id': msg_id\n    })\n\n    return bool(data)\n</code></pre>"},{"location":"reference/aimq/providers/#aimq.providers.SupabaseQueueProvider.delete","title":"<code>delete(queue_name, job_or_id)</code>","text":"Source code in <code>src/aimq/providers/supabase.py</code> <pre><code>def delete(self, queue_name: str, job_or_id: int | Job) -&gt; bool:\n    msg_id = job_or_id.id if isinstance(job_or_id, Job) else job_or_id\n    data = self._rpc('delete', {\n        'queue_name': queue_name,\n        'message_id': msg_id\n    })\n\n    return bool(data)\n</code></pre>"},{"location":"reference/aimq/providers/#aimq.providers.SupabaseQueueProvider.pop","title":"<code>pop(queue_name)</code>","text":"Source code in <code>src/aimq/providers/supabase.py</code> <pre><code>def pop(self, queue_name: str) -&gt; Job | None:\n    data = self._rpc('pop', {\n        'queue_name': queue_name\n    })\n\n    return Job.from_response(data[0], queue=queue_name, popped=True) if data else None\n</code></pre>"},{"location":"reference/aimq/providers/#aimq.providers.SupabaseQueueProvider.read","title":"<code>read(queue_name, timeout, count)</code>","text":"Source code in <code>src/aimq/providers/supabase.py</code> <pre><code>def read(self, queue_name: str, timeout: int, count: int) -&gt; List[Job]:\n    data = self._rpc('read', {\n        'queue_name': queue_name,\n        'sleep_seconds': timeout,\n        'n': count\n    })\n\n    return [Job.from_response(job, queue=queue_name) for job in data]\n</code></pre>"},{"location":"reference/aimq/providers/#aimq.providers.SupabaseQueueProvider.send","title":"<code>send(queue_name, data, delay=None)</code>","text":"Source code in <code>src/aimq/providers/supabase.py</code> <pre><code>def send(self, queue_name: str, data: dict[str, Any], delay: int | None = None) -&gt; int:\n    params = {\n        'queue_name': queue_name,\n        'message': data\n    }\n    if delay is not None:\n        params['sleep_seconds'] = delay\n\n    result = self._rpc('send', params)\n    return result[0]\n</code></pre>"},{"location":"reference/aimq/providers/#aimq.providers.SupabaseQueueProvider.send_batch","title":"<code>send_batch(queue_name, data_list, delay=None)</code>","text":"Source code in <code>src/aimq/providers/supabase.py</code> <pre><code>def send_batch(self, queue_name: str, data_list: list[dict[str, Any]], delay: int | None = None) -&gt; list[int]:\n    params = {\n        'queue_name': queue_name,\n        'messages': data_list\n    }\n    if delay is not None:\n        params['sleep_seconds'] = delay\n\n    result = self._rpc('send_batch', params)\n    return result\n</code></pre>"},{"location":"reference/aimq/providers/base/","title":"aimq.providers.base","text":""},{"location":"reference/aimq/providers/base/#aimq.providers.base","title":"<code>aimq.providers.base</code>","text":""},{"location":"reference/aimq/providers/base/#aimq.providers.base-classes","title":"Classes","text":""},{"location":"reference/aimq/providers/base/#aimq.providers.base.QueueNotFoundError","title":"<code>QueueNotFoundError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Raised when attempting to access a queue that does not exist.</p>"},{"location":"reference/aimq/providers/base/#aimq.providers.base.QueueProvider","title":"<code>QueueProvider</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base class for queue providers.</p>"},{"location":"reference/aimq/providers/base/#aimq.providers.base.QueueProvider-functions","title":"Functions","text":""},{"location":"reference/aimq/providers/base/#aimq.providers.base.QueueProvider.archive","title":"<code>archive(queue_name, job_or_id)</code>  <code>abstractmethod</code>","text":"<p>Archive a message in the queue.</p> Source code in <code>src/aimq/providers/base.py</code> <pre><code>@abstractmethod\ndef archive(self, queue_name: str, job_or_id: int | Job) -&gt; bool:\n    \"\"\"Archive a message in the queue.\"\"\"\n    pass\n</code></pre>"},{"location":"reference/aimq/providers/base/#aimq.providers.base.QueueProvider.delete","title":"<code>delete(queue_name, job_or_id)</code>  <code>abstractmethod</code>","text":"<p>Delete a message from the queue.</p> Source code in <code>src/aimq/providers/base.py</code> <pre><code>@abstractmethod\ndef delete(self, queue_name: str, job_or_id: int | Job) -&gt; bool:\n    \"\"\"Delete a message from the queue.\"\"\"\n    pass\n</code></pre>"},{"location":"reference/aimq/providers/base/#aimq.providers.base.QueueProvider.pop","title":"<code>pop(queue_name)</code>  <code>abstractmethod</code>","text":"<p>Pop a message from the queue.</p> Source code in <code>src/aimq/providers/base.py</code> <pre><code>@abstractmethod\ndef pop(self, queue_name: str) -&gt; Job | None:\n    \"\"\"Pop a message from the queue.\"\"\"\n    pass\n</code></pre>"},{"location":"reference/aimq/providers/base/#aimq.providers.base.QueueProvider.read","title":"<code>read(queue_name, timeout, count)</code>  <code>abstractmethod</code>","text":"<p>Read messages from the queue.</p> Source code in <code>src/aimq/providers/base.py</code> <pre><code>@abstractmethod\ndef read(self, queue_name: str, timeout: int, count: int) -&gt; List[Job]:\n    \"\"\"Read messages from the queue.\"\"\"\n    pass\n</code></pre>"},{"location":"reference/aimq/providers/base/#aimq.providers.base.QueueProvider.send","title":"<code>send(queue_name, data, delay=None)</code>  <code>abstractmethod</code>","text":"<p>Add a message to the queue.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The ID of the added message</p> Source code in <code>src/aimq/providers/base.py</code> <pre><code>@abstractmethod\ndef send(self, queue_name: str, data: dict[str, Any], delay: int | None = None) -&gt; int:\n    \"\"\"Add a message to the queue.\n\n    Returns:\n        int: The ID of the added message\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/aimq/providers/base/#aimq.providers.base.QueueProvider.send_batch","title":"<code>send_batch(queue_name, data_list, delay=None)</code>  <code>abstractmethod</code>","text":"<p>Add a batch of messages to the queue.</p> <p>Returns:</p> Type Description <code>list[int]</code> <p>list[int]: The IDs of the added messages</p> Source code in <code>src/aimq/providers/base.py</code> <pre><code>@abstractmethod\ndef send_batch(self, queue_name: str, data_list: list[dict[str, Any]], delay: int | None = None) -&gt; list[int]:\n    \"\"\"Add a batch of messages to the queue.\n\n    Returns:\n        list[int]: The IDs of the added messages\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/aimq/providers/supabase/","title":"aimq.providers.supabase","text":""},{"location":"reference/aimq/providers/supabase/#aimq.providers.supabase","title":"<code>aimq.providers.supabase</code>","text":""},{"location":"reference/aimq/providers/supabase/#aimq.providers.supabase-attributes","title":"Attributes","text":""},{"location":"reference/aimq/providers/supabase/#aimq.providers.supabase-classes","title":"Classes","text":""},{"location":"reference/aimq/providers/supabase/#aimq.providers.supabase.SupabaseQueueProvider","title":"<code>SupabaseQueueProvider</code>","text":"<p>               Bases: <code>QueueProvider</code></p> <p>Supabase implementation of QueueProvider.</p>"},{"location":"reference/aimq/providers/supabase/#aimq.providers.supabase.SupabaseQueueProvider-functions","title":"Functions","text":""},{"location":"reference/aimq/providers/supabase/#aimq.providers.supabase.SupabaseQueueProvider.archive","title":"<code>archive(queue_name, job_or_id)</code>","text":"Source code in <code>src/aimq/providers/supabase.py</code> <pre><code>def archive(self, queue_name: str, job_or_id: int | Job) -&gt; bool:\n    msg_id = job_or_id.id if isinstance(job_or_id, Job) else job_or_id\n    data = self._rpc('archive', {\n        'queue_name': queue_name,\n        'message_id': msg_id\n    })\n\n    return bool(data)\n</code></pre>"},{"location":"reference/aimq/providers/supabase/#aimq.providers.supabase.SupabaseQueueProvider.delete","title":"<code>delete(queue_name, job_or_id)</code>","text":"Source code in <code>src/aimq/providers/supabase.py</code> <pre><code>def delete(self, queue_name: str, job_or_id: int | Job) -&gt; bool:\n    msg_id = job_or_id.id if isinstance(job_or_id, Job) else job_or_id\n    data = self._rpc('delete', {\n        'queue_name': queue_name,\n        'message_id': msg_id\n    })\n\n    return bool(data)\n</code></pre>"},{"location":"reference/aimq/providers/supabase/#aimq.providers.supabase.SupabaseQueueProvider.pop","title":"<code>pop(queue_name)</code>","text":"Source code in <code>src/aimq/providers/supabase.py</code> <pre><code>def pop(self, queue_name: str) -&gt; Job | None:\n    data = self._rpc('pop', {\n        'queue_name': queue_name\n    })\n\n    return Job.from_response(data[0], queue=queue_name, popped=True) if data else None\n</code></pre>"},{"location":"reference/aimq/providers/supabase/#aimq.providers.supabase.SupabaseQueueProvider.read","title":"<code>read(queue_name, timeout, count)</code>","text":"Source code in <code>src/aimq/providers/supabase.py</code> <pre><code>def read(self, queue_name: str, timeout: int, count: int) -&gt; List[Job]:\n    data = self._rpc('read', {\n        'queue_name': queue_name,\n        'sleep_seconds': timeout,\n        'n': count\n    })\n\n    return [Job.from_response(job, queue=queue_name) for job in data]\n</code></pre>"},{"location":"reference/aimq/providers/supabase/#aimq.providers.supabase.SupabaseQueueProvider.send","title":"<code>send(queue_name, data, delay=None)</code>","text":"Source code in <code>src/aimq/providers/supabase.py</code> <pre><code>def send(self, queue_name: str, data: dict[str, Any], delay: int | None = None) -&gt; int:\n    params = {\n        'queue_name': queue_name,\n        'message': data\n    }\n    if delay is not None:\n        params['sleep_seconds'] = delay\n\n    result = self._rpc('send', params)\n    return result[0]\n</code></pre>"},{"location":"reference/aimq/providers/supabase/#aimq.providers.supabase.SupabaseQueueProvider.send_batch","title":"<code>send_batch(queue_name, data_list, delay=None)</code>","text":"Source code in <code>src/aimq/providers/supabase.py</code> <pre><code>def send_batch(self, queue_name: str, data_list: list[dict[str, Any]], delay: int | None = None) -&gt; list[int]:\n    params = {\n        'queue_name': queue_name,\n        'messages': data_list\n    }\n    if delay is not None:\n        params['sleep_seconds'] = delay\n\n    result = self._rpc('send_batch', params)\n    return result\n</code></pre>"},{"location":"reference/aimq/tools/","title":"aimq.tools","text":""},{"location":"reference/aimq/tools/#aimq.tools","title":"<code>aimq.tools</code>","text":""},{"location":"reference/aimq/tools/ocr/","title":"aimq.tools.ocr","text":""},{"location":"reference/aimq/tools/ocr/#aimq.tools.ocr","title":"<code>aimq.tools.ocr</code>","text":"<p>OCR tools package.</p>"},{"location":"reference/aimq/tools/ocr/#aimq.tools.ocr-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/ocr/#aimq.tools.ocr.__all__","title":"<code>__all__ = ['ImageOCR', 'ImageOCRInput']</code>  <code>module-attribute</code>","text":""},{"location":"reference/aimq/tools/ocr/#aimq.tools.ocr-classes","title":"Classes","text":""},{"location":"reference/aimq/tools/ocr/#aimq.tools.ocr.ImageOCR","title":"<code>ImageOCR(**kwargs)</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for performing OCR on images.</p> <p>Initialize the OCR processor.</p> Source code in <code>src/aimq/tools/ocr/image_ocr.py</code> <pre><code>def __init__(self, **kwargs):\n    \"\"\"Initialize the OCR processor.\"\"\"\n    super().__init__(**kwargs)\n    self.processor = OCRProcessor()\n</code></pre>"},{"location":"reference/aimq/tools/ocr/#aimq.tools.ocr.ImageOCR-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/ocr/#aimq.tools.ocr.ImageOCR.args_schema","title":"<code>args_schema = ImageOCRInput</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/ocr/#aimq.tools.ocr.ImageOCR.description","title":"<code>description = 'Extract text from images using OCR'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/ocr/#aimq.tools.ocr.ImageOCR.name","title":"<code>name = 'image_ocr'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/ocr/#aimq.tools.ocr.ImageOCR.processor","title":"<code>processor = OCRProcessor()</code>  <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/ocr/#aimq.tools.ocr.ImageOCR-functions","title":"Functions","text":""},{"location":"reference/aimq/tools/ocr/#aimq.tools.ocr.ImageOCRInput","title":"<code>ImageOCRInput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Input for ImageOCR.</p>"},{"location":"reference/aimq/tools/ocr/#aimq.tools.ocr.ImageOCRInput-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/ocr/#aimq.tools.ocr.ImageOCRInput.image","title":"<code>image = Field(..., description='The image file to perform OCR on')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/ocr/#aimq.tools.ocr.ImageOCRInput.save_debug_image","title":"<code>save_debug_image = Field(default=False, description='If True, includes debug image in output showing detected text regions')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/ocr/image_ocr/","title":"aimq.tools.ocr.image_ocr","text":""},{"location":"reference/aimq/tools/ocr/image_ocr/#aimq.tools.ocr.image_ocr","title":"<code>aimq.tools.ocr.image_ocr</code>","text":"<p>Tool for performing OCR on images.</p>"},{"location":"reference/aimq/tools/ocr/image_ocr/#aimq.tools.ocr.image_ocr-classes","title":"Classes","text":""},{"location":"reference/aimq/tools/ocr/image_ocr/#aimq.tools.ocr.image_ocr.ImageOCR","title":"<code>ImageOCR(**kwargs)</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for performing OCR on images.</p> <p>Initialize the OCR processor.</p> Source code in <code>src/aimq/tools/ocr/image_ocr.py</code> <pre><code>def __init__(self, **kwargs):\n    \"\"\"Initialize the OCR processor.\"\"\"\n    super().__init__(**kwargs)\n    self.processor = OCRProcessor()\n</code></pre>"},{"location":"reference/aimq/tools/ocr/image_ocr/#aimq.tools.ocr.image_ocr.ImageOCR-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/ocr/image_ocr/#aimq.tools.ocr.image_ocr.ImageOCR.args_schema","title":"<code>args_schema = ImageOCRInput</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/ocr/image_ocr/#aimq.tools.ocr.image_ocr.ImageOCR.description","title":"<code>description = 'Extract text from images using OCR'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/ocr/image_ocr/#aimq.tools.ocr.image_ocr.ImageOCR.name","title":"<code>name = 'image_ocr'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/ocr/image_ocr/#aimq.tools.ocr.image_ocr.ImageOCR.processor","title":"<code>processor = OCRProcessor()</code>  <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/ocr/image_ocr/#aimq.tools.ocr.image_ocr.ImageOCR-functions","title":"Functions","text":""},{"location":"reference/aimq/tools/ocr/image_ocr/#aimq.tools.ocr.image_ocr.ImageOCRInput","title":"<code>ImageOCRInput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Input for ImageOCR.</p>"},{"location":"reference/aimq/tools/ocr/image_ocr/#aimq.tools.ocr.image_ocr.ImageOCRInput-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/ocr/image_ocr/#aimq.tools.ocr.image_ocr.ImageOCRInput.image","title":"<code>image = Field(..., description='The image file to perform OCR on')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/ocr/image_ocr/#aimq.tools.ocr.image_ocr.ImageOCRInput.save_debug_image","title":"<code>save_debug_image = Field(default=False, description='If True, includes debug image in output showing detected text regions')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/ocr/processor/","title":"aimq.tools.ocr.processor","text":""},{"location":"reference/aimq/tools/ocr/processor/#aimq.tools.ocr.processor","title":"<code>aimq.tools.ocr.processor</code>","text":"<p>OCR module for text extraction and processing from images.</p> <p>This module provides functionality for extracting and processing text from images using the EasyOCR library. It includes utilities for handling text bounding boxes, merging overlapping detections, and creating debug visualizations.</p>"},{"location":"reference/aimq/tools/ocr/processor/#aimq.tools.ocr.processor-classes","title":"Classes","text":""},{"location":"reference/aimq/tools/ocr/processor/#aimq.tools.ocr.processor.OCRProcessor","title":"<code>OCRProcessor(languages=None)</code>","text":"<p>Processor for performing OCR on images using EasyOCR.</p> <p>This class provides a high-level interface for performing OCR on images. It handles initialization of the EasyOCR reader, image preprocessing, text detection, and optional debug visualization.</p> <p>Attributes:</p> Name Type Description <code>languages</code> <p>List of language codes for OCR</p> <code>_reader</code> <p>Lazy-loaded EasyOCR reader instance</p> <p>Initialize OCR processor with specified languages.</p> <p>Parameters:</p> Name Type Description Default <code>languages</code> <code>Optional[List[str]]</code> <p>List of language codes (default: ['en'])</p> <code>None</code> Source code in <code>src/aimq/tools/ocr/processor.py</code> <pre><code>def __init__(self, languages: Optional[List[str]] = None) -&gt; None:\n    \"\"\"Initialize OCR processor with specified languages.\n\n    Args:\n        languages: List of language codes (default: ['en'])\n    \"\"\"\n    self.languages = languages or ['en']\n    self._reader = None\n</code></pre>"},{"location":"reference/aimq/tools/ocr/processor/#aimq.tools.ocr.processor.OCRProcessor-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/ocr/processor/#aimq.tools.ocr.processor.OCRProcessor.languages","title":"<code>languages = languages or ['en']</code>  <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/ocr/processor/#aimq.tools.ocr.processor.OCRProcessor.reader","title":"<code>reader</code>  <code>property</code>","text":"<p>Get or initialize the EasyOCR reader.</p> <p>Returns:</p> Type Description <code>Reader</code> <p>easyocr.Reader: Initialized EasyOCR reader instance</p>"},{"location":"reference/aimq/tools/ocr/processor/#aimq.tools.ocr.processor.OCRProcessor-functions","title":"Functions","text":""},{"location":"reference/aimq/tools/ocr/processor/#aimq.tools.ocr.processor.OCRProcessor.process_image","title":"<code>process_image(image, save_debug_image=False)</code>","text":"<p>Process an image and return OCR results.</p> <p>Parameters:</p> Name Type Description Default <code>image</code> <code>Union[str, Path, Image, bytes]</code> <p>The image to process. Can be one of: - Path to image file (str or Path) - PIL Image object - Bytes of image data</p> required <code>save_debug_image</code> <code>bool</code> <p>If True, includes debug image in output</p> <code>False</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: OCR results including: - processing_time: Time taken to process in seconds - text: Extracted text content - debug_image: Optional base64 encoded debug image - detections: List of text detections with coordinates</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If image format is invalid or unreadable</p> Source code in <code>src/aimq/tools/ocr/processor.py</code> <pre><code>def process_image(\n    self, \n    image: Union[str, Path, Image.Image, bytes], \n    save_debug_image: bool = False,\n) -&gt; Dict[str, Any]:\n    \"\"\"Process an image and return OCR results.\n\n    Args:\n        image: The image to process. Can be one of:\n            - Path to image file (str or Path)\n            - PIL Image object\n            - Bytes of image data\n        save_debug_image: If True, includes debug image in output\n\n    Returns:\n        Dict[str, Any]: OCR results including:\n            - processing_time: Time taken to process in seconds\n            - text: Extracted text content\n            - debug_image: Optional base64 encoded debug image\n            - detections: List of text detections with coordinates\n\n    Raises:\n        ValueError: If image format is invalid or unreadable\n    \"\"\"\n    start_time = time.time()\n\n    # Convert input to a format EasyOCR can process\n    if isinstance(image, (str, Path)):\n        image_path = str(image)\n        pil_image = Image.open(image_path)\n    elif isinstance(image, bytes):\n        image_stream = io.BytesIO(image)\n        pil_image = Image.open(image_stream)\n        image_path = None\n    elif isinstance(image, Image.Image):\n        pil_image = image\n        image_path = None\n    else:\n        raise ValueError(\"Image must be a file path, PIL Image, or bytes\")\n\n    # Convert PIL Image to numpy array for EasyOCR\n    if pil_image.mode != 'RGB':\n        pil_image = pil_image.convert('RGB')\n    np_image = np.array(pil_image)\n\n    # Read the image with optimized parameters\n    results = self.reader.readtext(\n        np_image,\n        paragraph=False,\n        min_size=20,\n        text_threshold=0.7,\n        link_threshold=0.4,\n        low_text=0.4,\n        width_ths=0.7,\n        height_ths=0.9,\n        ycenter_ths=0.9,\n    )\n\n    # Format initial results\n    detections = []\n    for result in results:\n        if len(result) == 2:\n            bbox, text = result\n            confidence = 1.0\n        else:\n            bbox, text, confidence = result\n\n        x1, y1 = int(bbox[0][0]), int(bbox[0][1])\n        x2, y2 = int(bbox[1][0]), int(bbox[1][1])\n        x3, y3 = int(bbox[2][0]), int(bbox[2][1])\n        x4, y4 = int(bbox[3][0]), int(bbox[3][1])\n\n        detections.append({\n            \"text\": str(text),\n            \"confidence\": float(round(float(confidence), 3)),\n            \"bounding_box\": {\n                \"x\": x1,\n                \"y\": y1,\n                \"width\": x2 - x1,\n                \"height\": y3 - y1\n            }\n        })\n\n    # Group the detections\n    grouped_detections = group_text_boxes(\n        detections,\n        width_growth=20,\n        height_growth=1\n    )\n\n    end_time = time.time()\n    output = {\n        \"processing_time\": float(round(end_time - start_time, 2)),\n        \"detections\": grouped_detections,\n        \"text\": \" \".join(d[\"text\"] for d in grouped_detections)\n    }\n\n    if save_debug_image:\n        debug_image = self._create_debug_image(pil_image, grouped_detections)\n        # Convert debug image to bytes\n        debug_bytes = io.BytesIO()\n        debug_image.save(debug_bytes, format='PNG')\n        output[\"debug_image\"] = debug_bytes.getvalue()\n\n    return output\n</code></pre>"},{"location":"reference/aimq/tools/ocr/processor/#aimq.tools.ocr.processor-functions","title":"Functions","text":""},{"location":"reference/aimq/tools/ocr/processor/#aimq.tools.ocr.processor.boxes_overlap","title":"<code>boxes_overlap(box1, box2)</code>","text":"<p>Check if two boxes overlap at all.</p> <p>Parameters:</p> Name Type Description Default <code>box1</code> <code>Dict[str, int]</code> <p>Dictionary with x, y, width, height</p> required <code>box2</code> <code>Dict[str, int]</code> <p>Dictionary with x, y, width, height</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if boxes overlap</p> Source code in <code>src/aimq/tools/ocr/processor.py</code> <pre><code>def boxes_overlap(box1: Dict[str, int], box2: Dict[str, int]) -&gt; bool:\n    \"\"\"\n    Check if two boxes overlap at all.\n\n    Args:\n        box1: Dictionary with x, y, width, height\n        box2: Dictionary with x, y, width, height\n\n    Returns:\n        bool: True if boxes overlap\n    \"\"\"\n    h_overlap = (\n        box1['x'] &lt; box2['x'] + box2['width'] and\n        box2['x'] &lt; box1['x'] + box1['width']\n    )\n\n    v_overlap = (\n        box1['y'] &lt; box2['y'] + box2['height'] and\n        box2['y'] &lt; box1['y'] + box1['height']\n    )\n\n    return h_overlap and v_overlap\n</code></pre>"},{"location":"reference/aimq/tools/ocr/processor/#aimq.tools.ocr.processor.group_text_boxes","title":"<code>group_text_boxes(detections, width_growth=0, height_growth=0)</code>","text":"<p>Group text boxes that are spatially related.</p> <p>This function groups text boxes that are spatially related, starting with overlapping boxes. It can optionally expand boxes horizontally and vertically before grouping to capture nearby text that may be related.</p> <p>Parameters:</p> Name Type Description Default <code>detections</code> <code>List[Dict[str, Any]]</code> <p>List of detection dictionaries containing text and bounding boxes</p> required <code>width_growth</code> <code>int</code> <p>Number of pixels to expand boxes horizontally</p> <code>0</code> <code>height_growth</code> <code>int</code> <p>Number of pixels to expand boxes vertically</p> <code>0</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List[Dict[str, Any]]: List of grouped text detections with merged bounding boxes</p> Source code in <code>src/aimq/tools/ocr/processor.py</code> <pre><code>def group_text_boxes(\n    detections: List[Dict[str, Any]], \n    width_growth: int = 0, \n    height_growth: int = 0\n) -&gt; List[Dict[str, Any]]:\n    \"\"\"Group text boxes that are spatially related.\n\n    This function groups text boxes that are spatially related, starting with\n    overlapping boxes. It can optionally expand boxes horizontally and vertically\n    before grouping to capture nearby text that may be related.\n\n    Args:\n        detections: List of detection dictionaries containing text and bounding boxes\n        width_growth: Number of pixels to expand boxes horizontally\n        height_growth: Number of pixels to expand boxes vertically\n\n    Returns:\n        List[Dict[str, Any]]: List of grouped text detections with merged bounding boxes\n    \"\"\"\n    if not detections:\n        return []\n\n    def grow_box(box: Dict[str, int]) -&gt; Dict[str, int]:\n        \"\"\"Helper to expand a box by the growth parameters\"\"\"\n        return {\n            'x': box['x'],\n            'y': box['y'],\n            'width': box['width'] + width_growth,\n            'height': box['height'] + height_growth\n        }\n\n    groups = [[det] for det in detections]\n\n    while True:\n        merged = False\n        new_groups = []\n        used = set()\n\n        for i, group1 in enumerate(groups):\n            if i in used:\n                continue\n\n            merged_group = group1.copy()\n            used.add(i)\n\n            box1 = grow_box(merge_boxes([det['bounding_box'] for det in merged_group]))\n\n            for j, group2 in enumerate(groups):\n                if j in used:\n                    continue\n\n                box2 = merge_boxes([det['bounding_box'] for det in group2])\n\n                if boxes_overlap(box1, box2):\n                    merged_group.extend(group2)\n                    used.add(j)\n                    box1 = grow_box(merge_boxes([det['bounding_box'] for det in merged_group]))\n                    merged = True\n\n            new_groups.append(merged_group)\n\n        if not merged:\n            break\n\n        groups = new_groups\n\n    return [{\n        \"text\": ' '.join(det['text'] for det in sorted(\n            group,\n            key=lambda d: (d['bounding_box']['y'], d['bounding_box']['x'])\n        )),\n        \"confidence\": float(round(\n            sum(det['confidence'] for det in group) / len(group),\n            3\n        )),\n        \"bounding_box\": merge_boxes([det['bounding_box'] for det in group])\n    } for group in groups]\n</code></pre>"},{"location":"reference/aimq/tools/ocr/processor/#aimq.tools.ocr.processor.merge_boxes","title":"<code>merge_boxes(boxes)</code>","text":"<p>Merge a list of bounding boxes into a single box that encompasses all of them.</p> <p>Parameters:</p> Name Type Description Default <code>boxes</code> <code>List[Dict[str, int]]</code> <p>List of dictionaries with x, y, width, height</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>Optional[Dict[str, int]]</code> <p>Merged bounding box or None if input is empty</p> Source code in <code>src/aimq/tools/ocr/processor.py</code> <pre><code>def merge_boxes(boxes: List[Dict[str, int]]) -&gt; Optional[Dict[str, int]]:\n    \"\"\"\n    Merge a list of bounding boxes into a single box that encompasses all of them.\n\n    Args:\n        boxes: List of dictionaries with x, y, width, height\n\n    Returns:\n        dict: Merged bounding box or None if input is empty\n    \"\"\"\n    if not boxes:\n        return None\n\n    min_x = min(box['x'] for box in boxes)\n    min_y = min(box['y'] for box in boxes)\n    max_x = max(box['x'] + box['width'] for box in boxes)\n    max_y = max(box['y'] + box['height'] for box in boxes)\n\n    return {\n        'x': int(min_x),\n        'y': int(min_y),\n        'width': int(max_x - min_x),\n        'height': int(max_y - min_y)\n    }\n</code></pre>"},{"location":"reference/aimq/tools/pdf/","title":"aimq.tools.pdf","text":""},{"location":"reference/aimq/tools/pdf/#aimq.tools.pdf","title":"<code>aimq.tools.pdf</code>","text":"<p>PDF tools for processing and manipulating PDF files.</p>"},{"location":"reference/aimq/tools/pdf/#aimq.tools.pdf-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/pdf/#aimq.tools.pdf.__all__","title":"<code>__all__ = ['PageSplitter']</code>  <code>module-attribute</code>","text":""},{"location":"reference/aimq/tools/pdf/#aimq.tools.pdf-classes","title":"Classes","text":""},{"location":"reference/aimq/tools/pdf/#aimq.tools.pdf.PageSplitter","title":"<code>PageSplitter</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for splitting PDF into pages.</p>"},{"location":"reference/aimq/tools/pdf/#aimq.tools.pdf.PageSplitter-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/pdf/#aimq.tools.pdf.PageSplitter.args_schema","title":"<code>args_schema = PageSplitterInput</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/pdf/#aimq.tools.pdf.PageSplitter.description","title":"<code>description = 'Split a PDF file into individual pages'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/pdf/#aimq.tools.pdf.PageSplitter.name","title":"<code>name = 'pdf_page_splitter'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/pdf/#aimq.tools.pdf-functions","title":"Functions","text":""},{"location":"reference/aimq/tools/pdf/#aimq.tools.pdf.get_tools","title":"<code>get_tools()</code>","text":"<p>Get all PDF tools.</p> Source code in <code>src/aimq/tools/pdf/__init__.py</code> <pre><code>def get_tools() -&gt; List[BaseTool]:\n    \"\"\"Get all PDF tools.\"\"\"\n    tools: List[BaseTool] = [\n        PageSplitter(),\n    ]\n    return tools\n</code></pre>"},{"location":"reference/aimq/tools/pdf/page_splitter/","title":"aimq.tools.pdf.page_splitter","text":""},{"location":"reference/aimq/tools/pdf/page_splitter/#aimq.tools.pdf.page_splitter","title":"<code>aimq.tools.pdf.page_splitter</code>","text":"<p>Tool for splitting PDFs into individual pages.</p>"},{"location":"reference/aimq/tools/pdf/page_splitter/#aimq.tools.pdf.page_splitter-classes","title":"Classes","text":""},{"location":"reference/aimq/tools/pdf/page_splitter/#aimq.tools.pdf.page_splitter.PageSplitter","title":"<code>PageSplitter</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for splitting PDF into pages.</p>"},{"location":"reference/aimq/tools/pdf/page_splitter/#aimq.tools.pdf.page_splitter.PageSplitter-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/pdf/page_splitter/#aimq.tools.pdf.page_splitter.PageSplitter.args_schema","title":"<code>args_schema = PageSplitterInput</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/pdf/page_splitter/#aimq.tools.pdf.page_splitter.PageSplitter.description","title":"<code>description = 'Split a PDF file into individual pages'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/pdf/page_splitter/#aimq.tools.pdf.page_splitter.PageSplitter.name","title":"<code>name = 'pdf_page_splitter'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/pdf/page_splitter/#aimq.tools.pdf.page_splitter.PageSplitterInput","title":"<code>PageSplitterInput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Input for PageSplitter.</p>"},{"location":"reference/aimq/tools/pdf/page_splitter/#aimq.tools.pdf.page_splitter.PageSplitterInput-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/pdf/page_splitter/#aimq.tools.pdf.page_splitter.PageSplitterInput.file","title":"<code>file = Field(..., description='The PDF file to split into pages')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/","title":"aimq.tools.supabase","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase","title":"<code>aimq.tools.supabase</code>","text":"<p>Supabase tools for interacting with Supabase services.</p>"},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.__all__","title":"<code>__all__ = ['ReadRecord', 'WriteRecord', 'ReadFile', 'WriteFile', 'Enqueue']</code>  <code>module-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase-classes","title":"Classes","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.Enqueue","title":"<code>Enqueue</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for enqueueing jobs to Supabase Queue.</p>"},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.Enqueue-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.Enqueue.args_schema","title":"<code>args_schema = EnqueueInput</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.Enqueue.description","title":"<code>description = 'Send a job to a Supabase Queue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.Enqueue.formater","title":"<code>formater = Field('mustache', description='The format to use for the template')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.Enqueue.name","title":"<code>name = 'enqueue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.Enqueue.queue","title":"<code>queue = Field('{{queue}}', description='The queue template to send the job to')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.ReadFile","title":"<code>ReadFile</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for reading files from Supabase Storage.</p>"},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.ReadFile-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.ReadFile.args_schema","title":"<code>args_schema = ReadFileInput</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.ReadFile.bucket","title":"<code>bucket = Field('{{bucket}}', description='The storage bucket template to read the file from')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.ReadFile.description","title":"<code>description = 'Read a file from Supabase Storage'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.ReadFile.formater","title":"<code>formater = Field('mustache', description='The format to use for the template')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.ReadFile.name","title":"<code>name = 'read_file'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.ReadFile.path","title":"<code>path = Field('{{path}}', description='The path template to use for the file')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.ReadRecord","title":"<code>ReadRecord</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for reading records from Supabase.</p>"},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.ReadRecord-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.ReadRecord.args_schema","title":"<code>args_schema = ReadRecordInput</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.ReadRecord.description","title":"<code>description = 'Read a record from Supabase'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.ReadRecord.name","title":"<code>name = 'read_record'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.ReadRecord.select","title":"<code>select = '*'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.ReadRecord.table","title":"<code>table = 'records'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.WriteFile","title":"<code>WriteFile</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for writing files to Supabase Storage.</p>"},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.WriteFile-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.WriteFile.args_schema","title":"<code>args_schema = WriteFileInput</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.WriteFile.bucket","title":"<code>bucket = Field('{{bucket}}', description='The storage bucket template to read the file from')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.WriteFile.description","title":"<code>description = 'Write a file to Supabase Storage'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.WriteFile.formater","title":"<code>formater = Field('mustache', description='The format to use for the template')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.WriteFile.name","title":"<code>name = 'write_file'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.WriteFile.path","title":"<code>path = Field('{{path}}', description='The path template to use for the file')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.WriteRecord","title":"<code>WriteRecord</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for writing records to Supabase.</p>"},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.WriteRecord-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.WriteRecord.args_schema","title":"<code>args_schema = WriteRecordInput</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.WriteRecord.description","title":"<code>description = 'Write a record to Supabase. If an ID is provided, updates existing record; otherwise creates new record.'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.WriteRecord.name","title":"<code>name = 'write_record'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase-functions","title":"Functions","text":""},{"location":"reference/aimq/tools/supabase/#aimq.tools.supabase.get_tools","title":"<code>get_tools()</code>","text":"<p>Get all Supabase tools.</p> Source code in <code>src/aimq/tools/supabase/__init__.py</code> <pre><code>def get_tools() -&gt; List[BaseTool]:\n    \"\"\"Get all Supabase tools.\"\"\"\n    tools: List[BaseTool] = [\n        ReadRecord(),\n        WriteRecord(),\n        ReadFile(),\n        WriteFile(),\n    ]\n    return tools\n</code></pre>"},{"location":"reference/aimq/tools/supabase/enqueue/","title":"aimq.tools.supabase.enqueue","text":""},{"location":"reference/aimq/tools/supabase/enqueue/#aimq.tools.supabase.enqueue","title":"<code>aimq.tools.supabase.enqueue</code>","text":"<p>Tool for enqueueing jobs to Supabase Queue.</p>"},{"location":"reference/aimq/tools/supabase/enqueue/#aimq.tools.supabase.enqueue-classes","title":"Classes","text":""},{"location":"reference/aimq/tools/supabase/enqueue/#aimq.tools.supabase.enqueue.Enqueue","title":"<code>Enqueue</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for enqueueing jobs to Supabase Queue.</p>"},{"location":"reference/aimq/tools/supabase/enqueue/#aimq.tools.supabase.enqueue.Enqueue-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/enqueue/#aimq.tools.supabase.enqueue.Enqueue.args_schema","title":"<code>args_schema = EnqueueInput</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/enqueue/#aimq.tools.supabase.enqueue.Enqueue.description","title":"<code>description = 'Send a job to a Supabase Queue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/enqueue/#aimq.tools.supabase.enqueue.Enqueue.formater","title":"<code>formater = Field('mustache', description='The format to use for the template')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/enqueue/#aimq.tools.supabase.enqueue.Enqueue.name","title":"<code>name = 'enqueue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/enqueue/#aimq.tools.supabase.enqueue.Enqueue.queue","title":"<code>queue = Field('{{queue}}', description='The queue template to send the job to')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/enqueue/#aimq.tools.supabase.enqueue.EnqueueInput","title":"<code>EnqueueInput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Input for Enqueue.</p>"},{"location":"reference/aimq/tools/supabase/enqueue/#aimq.tools.supabase.enqueue.EnqueueInput-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/enqueue/#aimq.tools.supabase.enqueue.EnqueueInput.data","title":"<code>data = Field(..., description='The job data to enqueue')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/enqueue/#aimq.tools.supabase.enqueue.EnqueueInput.delay","title":"<code>delay = Field(None, description='Optional delay in seconds before the job becomes available')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/enqueue/#aimq.tools.supabase.enqueue.EnqueueInput.queue","title":"<code>queue = Field(None, description='The queue name to send the job to')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/read_file/","title":"aimq.tools.supabase.read_file","text":""},{"location":"reference/aimq/tools/supabase/read_file/#aimq.tools.supabase.read_file","title":"<code>aimq.tools.supabase.read_file</code>","text":"<p>Tool for reading files from Supabase Storage.</p>"},{"location":"reference/aimq/tools/supabase/read_file/#aimq.tools.supabase.read_file-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/read_file/#aimq.tools.supabase.read_file-classes","title":"Classes","text":""},{"location":"reference/aimq/tools/supabase/read_file/#aimq.tools.supabase.read_file.ReadFile","title":"<code>ReadFile</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for reading files from Supabase Storage.</p>"},{"location":"reference/aimq/tools/supabase/read_file/#aimq.tools.supabase.read_file.ReadFile-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/read_file/#aimq.tools.supabase.read_file.ReadFile.args_schema","title":"<code>args_schema = ReadFileInput</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/read_file/#aimq.tools.supabase.read_file.ReadFile.bucket","title":"<code>bucket = Field('{{bucket}}', description='The storage bucket template to read the file from')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/read_file/#aimq.tools.supabase.read_file.ReadFile.description","title":"<code>description = 'Read a file from Supabase Storage'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/read_file/#aimq.tools.supabase.read_file.ReadFile.formater","title":"<code>formater = Field('mustache', description='The format to use for the template')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/read_file/#aimq.tools.supabase.read_file.ReadFile.name","title":"<code>name = 'read_file'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/read_file/#aimq.tools.supabase.read_file.ReadFile.path","title":"<code>path = Field('{{path}}', description='The path template to use for the file')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/read_file/#aimq.tools.supabase.read_file.ReadFileInput","title":"<code>ReadFileInput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Input for ReadFile.</p>"},{"location":"reference/aimq/tools/supabase/read_file/#aimq.tools.supabase.read_file.ReadFileInput-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/read_file/#aimq.tools.supabase.read_file.ReadFileInput.bucket","title":"<code>bucket = Field('files', description='The storage bucket to read the file from')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/read_file/#aimq.tools.supabase.read_file.ReadFileInput.metadata","title":"<code>metadata = Field(None, description='Additional metadata to attach to the file')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/read_file/#aimq.tools.supabase.read_file.ReadFileInput.path","title":"<code>path = Field(..., description='The path values to apply to the template path')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/read_record/","title":"aimq.tools.supabase.read_record","text":""},{"location":"reference/aimq/tools/supabase/read_record/#aimq.tools.supabase.read_record","title":"<code>aimq.tools.supabase.read_record</code>","text":"<p>Tool for reading records from Supabase.</p>"},{"location":"reference/aimq/tools/supabase/read_record/#aimq.tools.supabase.read_record-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/read_record/#aimq.tools.supabase.read_record-classes","title":"Classes","text":""},{"location":"reference/aimq/tools/supabase/read_record/#aimq.tools.supabase.read_record.ReadRecord","title":"<code>ReadRecord</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for reading records from Supabase.</p>"},{"location":"reference/aimq/tools/supabase/read_record/#aimq.tools.supabase.read_record.ReadRecord-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/read_record/#aimq.tools.supabase.read_record.ReadRecord.args_schema","title":"<code>args_schema = ReadRecordInput</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/read_record/#aimq.tools.supabase.read_record.ReadRecord.description","title":"<code>description = 'Read a record from Supabase'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/read_record/#aimq.tools.supabase.read_record.ReadRecord.name","title":"<code>name = 'read_record'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/read_record/#aimq.tools.supabase.read_record.ReadRecord.select","title":"<code>select = '*'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/read_record/#aimq.tools.supabase.read_record.ReadRecord.table","title":"<code>table = 'records'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/read_record/#aimq.tools.supabase.read_record.ReadRecordInput","title":"<code>ReadRecordInput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Input for ReadRecord.</p>"},{"location":"reference/aimq/tools/supabase/read_record/#aimq.tools.supabase.read_record.ReadRecordInput-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/read_record/#aimq.tools.supabase.read_record.ReadRecordInput.id","title":"<code>id = Field(..., description='The ID of the record to read')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/read_record/#aimq.tools.supabase.read_record.ReadRecordInput.select","title":"<code>select = Field(None, description='The columns to select')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/read_record/#aimq.tools.supabase.read_record.ReadRecordInput.table","title":"<code>table = Field(None, description='The table to read from')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/write_file/","title":"aimq.tools.supabase.write_file","text":""},{"location":"reference/aimq/tools/supabase/write_file/#aimq.tools.supabase.write_file","title":"<code>aimq.tools.supabase.write_file</code>","text":"<p>Tool for writing files to Supabase Storage.</p>"},{"location":"reference/aimq/tools/supabase/write_file/#aimq.tools.supabase.write_file-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/write_file/#aimq.tools.supabase.write_file-classes","title":"Classes","text":""},{"location":"reference/aimq/tools/supabase/write_file/#aimq.tools.supabase.write_file.WriteFile","title":"<code>WriteFile</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for writing files to Supabase Storage.</p>"},{"location":"reference/aimq/tools/supabase/write_file/#aimq.tools.supabase.write_file.WriteFile-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/write_file/#aimq.tools.supabase.write_file.WriteFile.args_schema","title":"<code>args_schema = WriteFileInput</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/write_file/#aimq.tools.supabase.write_file.WriteFile.bucket","title":"<code>bucket = Field('{{bucket}}', description='The storage bucket template to read the file from')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/write_file/#aimq.tools.supabase.write_file.WriteFile.description","title":"<code>description = 'Write a file to Supabase Storage'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/write_file/#aimq.tools.supabase.write_file.WriteFile.formater","title":"<code>formater = Field('mustache', description='The format to use for the template')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/write_file/#aimq.tools.supabase.write_file.WriteFile.name","title":"<code>name = 'write_file'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/write_file/#aimq.tools.supabase.write_file.WriteFile.path","title":"<code>path = Field('{{path}}', description='The path template to use for the file')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/write_file/#aimq.tools.supabase.write_file.WriteFileInput","title":"<code>WriteFileInput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Input for WriteFile.</p>"},{"location":"reference/aimq/tools/supabase/write_file/#aimq.tools.supabase.write_file.WriteFileInput-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/write_file/#aimq.tools.supabase.write_file.WriteFileInput.bucket","title":"<code>bucket = Field('files', description='The storage bucket to read the file from')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/write_file/#aimq.tools.supabase.write_file.WriteFileInput.file","title":"<code>file = Field(..., description='The file to write')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/write_file/#aimq.tools.supabase.write_file.WriteFileInput.metadata","title":"<code>metadata = Field(None, description='Additional metadata to attach to the file')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/write_file/#aimq.tools.supabase.write_file.WriteFileInput.path","title":"<code>path = Field(None, description='The path values to apply to the template path')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/write_record/","title":"aimq.tools.supabase.write_record","text":""},{"location":"reference/aimq/tools/supabase/write_record/#aimq.tools.supabase.write_record","title":"<code>aimq.tools.supabase.write_record</code>","text":"<p>Tool for writing records to Supabase.</p>"},{"location":"reference/aimq/tools/supabase/write_record/#aimq.tools.supabase.write_record-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/write_record/#aimq.tools.supabase.write_record-classes","title":"Classes","text":""},{"location":"reference/aimq/tools/supabase/write_record/#aimq.tools.supabase.write_record.WriteRecord","title":"<code>WriteRecord</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>Tool for writing records to Supabase.</p>"},{"location":"reference/aimq/tools/supabase/write_record/#aimq.tools.supabase.write_record.WriteRecord-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/write_record/#aimq.tools.supabase.write_record.WriteRecord.args_schema","title":"<code>args_schema = WriteRecordInput</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/write_record/#aimq.tools.supabase.write_record.WriteRecord.description","title":"<code>description = 'Write a record to Supabase. If an ID is provided, updates existing record; otherwise creates new record.'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/write_record/#aimq.tools.supabase.write_record.WriteRecord.name","title":"<code>name = 'write_record'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/write_record/#aimq.tools.supabase.write_record.WriteRecordInput","title":"<code>WriteRecordInput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Input for WriteRecord.</p>"},{"location":"reference/aimq/tools/supabase/write_record/#aimq.tools.supabase.write_record.WriteRecordInput-attributes","title":"Attributes","text":""},{"location":"reference/aimq/tools/supabase/write_record/#aimq.tools.supabase.write_record.WriteRecordInput.data","title":"<code>data = Field(..., description='The data to write')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/write_record/#aimq.tools.supabase.write_record.WriteRecordInput.id","title":"<code>id = Field(..., description='The ID of the record to update (if updating existing record)')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/aimq/tools/supabase/write_record/#aimq.tools.supabase.write_record.WriteRecordInput.table","title":"<code>table = Field(..., description='The table to write to')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"user-guide/document-processing/","title":"Document Processing","text":"<p>This guide covers AIMQ's document processing capabilities.</p>"},{"location":"user-guide/document-processing/#supported-document-types","title":"Supported Document Types","text":"<p>AIMQ supports processing various document types:</p> <ul> <li>Images (JPG, PNG, TIFF, etc.)</li> <li>PDFs</li> <li>Text documents</li> <li>Scanned documents</li> </ul>"},{"location":"user-guide/document-processing/#processing-pipeline","title":"Processing Pipeline","text":""},{"location":"user-guide/document-processing/#1-document-upload","title":"1. Document Upload","text":"<pre><code>from aimq.attachment import Attachment\n\n# Create attachment from file\nattachment = Attachment.from_file(\"document.pdf\")\n\n# Or from bytes\nattachment = Attachment.from_bytes(file_bytes, \"application/pdf\")\n</code></pre>"},{"location":"user-guide/document-processing/#2-document-analysis","title":"2. Document Analysis","text":"<pre><code>from aimq.tools.pdf import PDFProcessor\nfrom aimq.tools.ocr import ImageOCR\n\n# Process PDF\npdf_processor = PDFProcessor()\npdf_result = pdf_processor.process(attachment)\n\n# Process image with OCR\nocr = ImageOCR()\nocr_result = ocr.process(attachment)\n</code></pre>"},{"location":"user-guide/document-processing/#3-result-processing","title":"3. Result Processing","text":"<pre><code># Extract text\ntext = result[\"text\"]\n\n# Get metadata\nmetadata = result[\"metadata\"]\n\n# Access debug information\ndebug_info = result[\"debug\"]\n</code></pre>"},{"location":"user-guide/document-processing/#processing-tools","title":"Processing Tools","text":""},{"location":"user-guide/document-processing/#ocr-processing","title":"OCR Processing","text":"<pre><code>from aimq.tools.ocr import ImageOCR\n\nocr = ImageOCR()\n\n# Basic processing\nresult = ocr.process(image_attachment)\n\n# With debug visualization\nresult = ocr.process(image_attachment, save_debug_image=True)\ndebug_image = result[\"debug_image\"]\n</code></pre>"},{"location":"user-guide/document-processing/#pdf-processing","title":"PDF Processing","text":"<pre><code>from aimq.tools.pdf import PDFProcessor\n\nprocessor = PDFProcessor()\n\n# Process entire PDF\nresult = processor.process(pdf_attachment)\n\n# Process specific pages\nresult = processor.process(pdf_attachment, pages=[1, 3, 5])\n</code></pre>"},{"location":"user-guide/document-processing/#integration-with-queue-processing","title":"Integration with Queue Processing","text":"<pre><code>from aimq import Worker\nfrom aimq.tools.ocr import ImageOCR\n\nworker = Worker()\nworker.register_queue(\"documents\")\nocr = ImageOCR()\n\n@worker.processor(\"documents\")\nasync def process_document(job):\n    attachment = job.data[\"attachment\"]\n\n    # Process based on file type\n    if attachment.is_image():\n        return ocr.process(attachment)\n    elif attachment.is_pdf():\n        return pdf_processor.process(attachment)\n    else:\n        raise ValueError(f\"Unsupported file type: {attachment.mime_type}\")\n</code></pre>"},{"location":"user-guide/document-processing/#best-practices","title":"Best Practices","text":"<ol> <li> <p>File Type Validation <pre><code>if not attachment.is_supported():\n    raise ValueError(f\"Unsupported file type: {attachment.mime_type}\")\n</code></pre></p> </li> <li> <p>Error Handling <pre><code>try:\n    result = processor.process(attachment)\nexcept ProcessingError as e:\n    logger.error(f\"Processing failed: {e}\")\n    raise\n</code></pre></p> </li> <li> <p>Resource Management <pre><code>with attachment.open() as file:\n    result = processor.process(file)\n</code></pre></p> </li> <li> <p>Debug Mode <pre><code># Enable debug mode for more information\nprocessor.enable_debug()\nresult = processor.process(attachment)\ndebug_info = result[\"debug\"]\n</code></pre></p> </li> </ol>"},{"location":"user-guide/helpers/","title":"Helper Functions","text":"<p>AIMQ provides a set of helper functions to simplify working with LangChain runnables and task composition. These helpers are designed to make it easier to build and chain together different components of your AI workflows.</p>"},{"location":"user-guide/helpers/#available-helpers","title":"Available Helpers","text":""},{"location":"user-guide/helpers/#echo","title":"echo","text":"<pre><code>@chain\ndef echo(input: T) -&gt; T\n</code></pre> <p>Echo the input value back while also printing it to stdout. This is useful for debugging and monitoring the flow of data through your pipeline.</p> <p>Example:</p> <pre><code>from aimq.helpers import echo\n\nresult = echo(\"Testing pipeline\") | next_step\n# Prints: Testing pipeline\n# And passes \"Testing pipeline\" to next_step\n</code></pre>"},{"location":"user-guide/helpers/#select","title":"select","text":"<pre><code>def select(key: str | list[str] | dict[str, str] | None = None) -&gt; Runnable\n</code></pre> <p>Creates a runnable that selects specific keys from the input. This is particularly useful when you need to reshape or filter data between pipeline steps.</p> <p>Options:</p> <ul> <li><code>None</code>: Pass through the entire input</li> <li><code>str</code>: Select a single key</li> <li><code>list[str]</code>: Select multiple keys</li> <li><code>dict[str, str]</code>: Map old keys to new keys</li> </ul> <p>Example:</p> <pre><code>from aimq.helpers import select\n\n# Select a single key\nsingle = select(\"content\")\n\n# Select multiple keys\nmultiple = select([\"content\", \"metadata\"])\n\n# Rename keys\nrenamed = select({\"old_key\": \"new_key\"})\n</code></pre>"},{"location":"user-guide/helpers/#const","title":"const","text":"<pre><code>def const(value: T) -&gt; Callable[[Any], T]\n</code></pre> <p>Creates a function that always returns a constant value. This is useful when you need to inject constant values into your pipeline.</p> <p>Example:</p> <pre><code>from aimq.helpers import const\n\n# Add a constant model parameter\npipeline = pipeline | assign({\"model\": const(\"gpt-4\")})\n</code></pre>"},{"location":"user-guide/helpers/#assign","title":"assign","text":"<pre><code>def assign(runnables: dict[str, Any] = {}) -&gt; RunnableAssign\n</code></pre> <p>Creates a RunnableAssign from a dictionary of runnables or constant values. This helper makes it easy to add or modify data in your pipeline.</p> <p>Example:</p> <pre><code>from aimq.helpers import assign, const\n\n# Add multiple values\npipeline = pipeline | assign({\n    \"model\": const(\"gpt-4\"),\n    \"temperature\": const(0.7),\n    \"processed_text\": text_processor\n})\n</code></pre>"},{"location":"user-guide/helpers/#pick","title":"pick","text":"<pre><code>def pick(key: str | list[str]) -&gt; RunnablePick\n</code></pre> <p>Creates a RunnablePick to select specific keys from the input. Similar to <code>select</code> but more focused on simple key selection.</p> <p>Example:</p> <pre><code>from aimq.helpers import pick\n\n# Pick a single key\nresult = pipeline | pick(\"content\")\n\n# Pick multiple keys\nresult = pipeline | pick([\"content\", \"metadata\"])\n</code></pre>"},{"location":"user-guide/helpers/#orig","title":"orig","text":"<pre><code>def orig(key: str | list[str] | None = None) -&gt; Runnable[Any, dict[str, Any]]\n</code></pre> <p>Creates a runnable that retrieves the original configuration. This is useful when you need to access the initial configuration later in your pipeline.</p> <p>Example:</p> <pre><code>from aimq.helpers import orig\n\n# Get all original config\nconfig = pipeline | orig()\n\n# Get specific config keys\nmodel_config = pipeline | orig([\"model\", \"temperature\"])\n</code></pre>"},{"location":"user-guide/helpers/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Pipeline Composition</p> </li> <li> <p>Use <code>select</code> when you need to reshape data between steps</p> </li> <li>Use <code>assign</code> to add new data or transform existing data</li> <li> <p>Use <code>echo</code> for debugging complex pipelines</p> </li> <li> <p>Data Flow</p> </li> <li> <p>Keep your data transformations clear and explicit</p> </li> <li>Use type hints to ensure type safety</li> <li> <p>Document any assumptions about data structure</p> </li> <li> <p>Error Handling</p> </li> <li> <p>Handle potential errors when selecting non-existent keys</p> </li> <li>Validate input data structure before processing</li> <li>Use appropriate error messages for debugging</li> </ol>"},{"location":"user-guide/ocr/","title":"OCR (Optical Character Recognition)","text":"<p>This guide covers AIMQ's OCR capabilities for extracting text from images.</p>"},{"location":"user-guide/ocr/#basic-usage","title":"Basic Usage","text":"<pre><code>from aimq.tools.ocr import ImageOCR\n\n# Initialize OCR\nocr = ImageOCR()\n\n# Process an image\nresult = ocr.process_image(\"image.jpg\")\nprint(result[\"text\"])\n</code></pre>"},{"location":"user-guide/ocr/#features","title":"Features","text":""},{"location":"user-guide/ocr/#multi-language-support","title":"Multi-language Support","text":"<pre><code># Initialize with multiple languages\nocr = ImageOCR(languages=[\"en\", \"es\", \"fr\"])\n\n# Process image\nresult = ocr.process_image(\"multilingual.jpg\")\n</code></pre>"},{"location":"user-guide/ocr/#debug-visualization","title":"Debug Visualization","text":"<pre><code># Process with debug visualization\nresult = ocr.process_image(\"document.jpg\", save_debug_image=True)\n\n# Access debug image\ndebug_image = result[\"debug_image\"]\n</code></pre>"},{"location":"user-guide/ocr/#text-regions","title":"Text Regions","text":"<pre><code># Get detailed text regions\nresult = ocr.process_image(\"document.jpg\")\nfor region in result[\"regions\"]:\n    print(f\"Text: {region['text']}\")\n    print(f\"Confidence: {region['confidence']}\")\n    print(f\"Position: {region['bbox']}\")\n</code></pre>"},{"location":"user-guide/ocr/#integration-examples","title":"Integration Examples","text":""},{"location":"user-guide/ocr/#queue-processing","title":"Queue Processing","text":"<pre><code>from aimq import Worker\nfrom aimq.tools.ocr import ImageOCR\n\nworker = Worker()\nocr = ImageOCR()\n\n@worker.task(queue=\"ocr\")\ndef process_image(data):\n    image_data = data[\"image\"]\n    return ocr.process_image(image_data)\n</code></pre>"},{"location":"user-guide/ocr/#batch-processing","title":"Batch Processing","text":"<pre><code>from aimq.tools.ocr import BatchImageOCR\n\n# Initialize batch processor\nbatch_ocr = BatchImageOCR()\n\n# Process multiple images\nimages = [\"image1.jpg\", \"image2.jpg\", \"image3.jpg\"]\nresults = batch_ocr.process_images(images)\n</code></pre>"},{"location":"user-guide/ocr/#pdf-ocr","title":"PDF OCR","text":"<pre><code>from aimq.tools.ocr import PDFImageOCR\n\n# Initialize PDF OCR processor\npdf_ocr = PDFImageOCR()\n\n# Process PDF pages\nresult = pdf_ocr.process_pdf(\"document.pdf\")\n</code></pre>"},{"location":"user-guide/ocr/#performance-optimization","title":"Performance Optimization","text":""},{"location":"user-guide/ocr/#image-preprocessing","title":"Image Preprocessing","text":"<pre><code>from aimq.tools.ocr import ImagePreprocessor\n\n# Initialize preprocessor\npreprocessor = ImagePreprocessor()\n\n# Preprocess image\nprocessed_image = preprocessor.process(\n    image,\n    denoise=True,\n    deskew=True,\n    enhance_contrast=True\n)\n\n# Run OCR on processed image\nresult = ocr.process_image(processed_image)\n</code></pre>"},{"location":"user-guide/ocr/#parallel-processing","title":"Parallel Processing","text":"<pre><code>from aimq.tools.ocr import ParallelOCR\n\n# Initialize parallel processor\nparallel_ocr = ParallelOCR(num_workers=4)\n\n# Process images in parallel\nresults = parallel_ocr.process_images(images)\n</code></pre>"},{"location":"user-guide/ocr/#best-practices","title":"Best Practices","text":"<ol> <li>Image Quality</li> <li>Ensure good image resolution (at least 300 DPI)</li> <li>Use clear, well-lit images</li> <li> <p>Remove noise and artifacts</p> </li> <li> <p>Language Selection</p> </li> <li>Specify correct languages for better accuracy</li> <li> <p>Use multiple languages only when needed</p> </li> <li> <p>Performance</p> </li> <li>Use batch processing for multiple images</li> <li>Enable preprocessing for poor quality images</li> <li> <p>Use parallel processing for large workloads</p> </li> <li> <p>Error Handling <pre><code>try:\n    result = ocr.process_image(image)\nexcept OCRError as e:\n    logger.error(f\"OCR failed: {e}\")\n    # Handle error appropriately\n</code></pre></p> </li> </ol>"},{"location":"user-guide/overview/","title":"User Guide Overview","text":"<p>AIMQ is designed to make document processing with AI capabilities easy and efficient. This guide will help you understand the core concepts and features of AIMQ.</p>"},{"location":"user-guide/overview/#core-concepts","title":"Core Concepts","text":""},{"location":"user-guide/overview/#workers-and-queues","title":"Workers and Queues","text":"<p>AIMQ uses a worker-queue pattern where: - Workers manage the processing of jobs - Queues store and distribute jobs to workers - Jobs represent units of work (like documents to process)</p>"},{"location":"user-guide/overview/#document-processing","title":"Document Processing","text":"<p>AIMQ supports various document types: - Images (JPG, PNG, etc.) - PDFs - Text documents</p>"},{"location":"user-guide/overview/#ai-integration","title":"AI Integration","text":"<p>AIMQ integrates with various AI tools and services: - OCR for text extraction - Language models for text processing - Custom AI model integration</p>"},{"location":"user-guide/overview/#common-use-cases","title":"Common Use Cases","text":"<ol> <li>Document Processing Pipeline</li> <li>Upload documents to Supabase storage</li> <li>Queue documents for processing</li> <li>Extract text and metadata</li> <li> <p>Store results</p> </li> <li> <p>Batch Processing</p> </li> <li>Process multiple documents in parallel</li> <li>Handle different document types</li> <li> <p>Aggregate results</p> </li> <li> <p>Real-time Processing</p> </li> <li>Process documents as they are uploaded</li> <li>Send notifications when processing is complete</li> <li>Stream results to clients</li> </ol>"},{"location":"user-guide/overview/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Queue Processing</li> <li>Explore Document Processing</li> <li>Try out OCR capabilities</li> </ul>"},{"location":"user-guide/queue-processing/","title":"Queue Processing","text":"<p>This guide explains how to work with AIMQ's queue processing system.</p>"},{"location":"user-guide/queue-processing/#queue-basics","title":"Queue Basics","text":""},{"location":"user-guide/queue-processing/#creating-a-queue-and-task","title":"Creating a Queue and Task","text":"<pre><code>from aimq import Worker\n\nworker = Worker()\n\n@worker.task(queue=\"documents\")\ndef process_document(data):\n    # Process document based on type\n    if data.get(\"process_type\") == \"ocr\":\n        return process_ocr(data)\n    elif data.get(\"process_type\") == \"pdf\":\n        return process_pdf(data)\n</code></pre>"},{"location":"user-guide/queue-processing/#sending-jobs-to-a-queue","title":"Sending Jobs to a Queue","text":"<pre><code># Send a job directly\nworker.send(\"documents\", {\n    \"file_id\": \"123\",\n    \"process_type\": \"ocr\"\n})\n\n# Or using the queue directly\nqueue = worker.queues[\"documents\"]\nqueue.send({\n    \"file_id\": \"456\",\n    \"process_type\": \"pdf\"\n})\n</code></pre>"},{"location":"user-guide/queue-processing/#processing-jobs","title":"Processing Jobs","text":""},{"location":"user-guide/queue-processing/#basic-job-processing","title":"Basic Job Processing","text":"<pre><code>@worker.processor(\"documents\")\nasync def process_document(job):\n    # Access job data\n    file_id = job.data[\"file_id\"]\n    process_type = job.data[\"process_type\"]\n\n    # Process based on type\n    if process_type == \"ocr\":\n        return await process_ocr(file_id)\n    elif process_type == \"pdf\":\n        return await process_pdf(file_id)\n</code></pre>"},{"location":"user-guide/queue-processing/#error-handling","title":"Error Handling","text":"<pre><code>@worker.processor(\"documents\")\nasync def process_document(job):\n    try:\n        result = await process_file(job.data)\n        return {\"status\": \"success\", \"result\": result}\n    except Exception as e:\n        # Job will be retried\n        raise ProcessingError(f\"Failed to process: {str(e)}\")\n</code></pre>"},{"location":"user-guide/queue-processing/#advanced-features","title":"Advanced Features","text":""},{"location":"user-guide/queue-processing/#job-priority","title":"Job Priority","text":"<pre><code># Send high priority job\nqueue.send(data, priority=1)\n\n# Send low priority job\nqueue.send(data, priority=10)\n</code></pre>"},{"location":"user-guide/queue-processing/#delayed-processing","title":"Delayed Processing","text":"<pre><code># Process after 1 hour\nqueue.send(data, delay=3600)\n</code></pre>"},{"location":"user-guide/queue-processing/#batch-processing","title":"Batch Processing","text":"<pre><code>@worker.processor(\"documents\")\nasync def process_documents(jobs):\n    results = []\n    for job in jobs:\n        result = await process_document(job)\n        results.append(result)\n    return results\n\n# Enable batch processing\nworker.enable_batch_processing(\"documents\", batch_size=10)\n</code></pre>"},{"location":"user-guide/queue-processing/#monitoring","title":"Monitoring","text":""},{"location":"user-guide/queue-processing/#job-status","title":"Job Status","text":"<pre><code># Check job status\njob = queue.get_job(job_id)\nprint(f\"Job {job.id} status: {job.status}\")\n\n# Get queue stats\nstats = queue.get_stats()\nprint(f\"Pending jobs: {stats.pending}\")\nprint(f\"Processing jobs: {stats.processing}\")\n</code></pre>"},{"location":"user-guide/queue-processing/#logging","title":"Logging","text":"<p>```python</p>"},{"location":"user-guide/queue-processing/#enable-debug-logging","title":"Enable debug logging","text":"<p>worker.set_log_level(\"DEBUG\")</p>"},{"location":"user-guide/queue-processing/#print-logs","title":"Print logs","text":"<p>worker.print_logs()</p>"},{"location":"user-guide/worker-configuration/","title":"Worker Configuration","text":"<p>AIMQ workers can be configured through both environment variables and programmatic settings. This guide covers all available configuration options and best practices.</p>"},{"location":"user-guide/worker-configuration/#environment-variables","title":"Environment Variables","text":"<p>The following environment variables control worker behavior:</p> Variable Description Default <code>WORKER_NAME</code> Name of the worker instance <code>'peon'</code> <code>WORKER_LOG_LEVEL</code> Logging level (debug, info, warning, error) <code>'info'</code> <code>WORKER_IDLE_WAIT</code> Time to wait between queue checks (seconds) <code>10.0</code>"},{"location":"user-guide/worker-configuration/#programmatic-configuration","title":"Programmatic Configuration","text":"<p>You can configure workers programmatically when creating a Worker instance:</p> <pre><code>from aimq import Worker\n\nworker = Worker(\n    name=\"custom-worker\",      # Override worker name\n    log_level=\"debug\",        # Set logging level\n    idle_wait=5.0            # Set idle wait time\n)\n</code></pre>"},{"location":"user-guide/worker-configuration/#configuration-precedence","title":"Configuration Precedence","text":"<p>Configuration values are determined in the following order (highest to lowest priority): 1. Programmatic configuration 2. Environment variables 3. Default values</p>"},{"location":"user-guide/worker-configuration/#worker-settings","title":"Worker Settings","text":""},{"location":"user-guide/worker-configuration/#name","title":"Name","text":"<p>The worker name is used to identify the worker instance in logs and monitoring:</p> <pre><code># Via environment\nWORKER_NAME=analytics-worker\n\n# Via code\nworker = Worker(name=\"analytics-worker\")\n</code></pre>"},{"location":"user-guide/worker-configuration/#log-level","title":"Log Level","text":"<p>Control the verbosity of worker logs:</p> <pre><code># Via environment\nWORKER_LOG_LEVEL=debug\n\n# Via code\nworker = Worker(log_level=\"debug\")\n</code></pre> <p>Available log levels: - <code>debug</code>: Detailed debugging information - <code>info</code>: General operational information - <code>warning</code>: Warning messages for potential issues - <code>error</code>: Error messages for actual problems</p>"},{"location":"user-guide/worker-configuration/#idle-wait","title":"Idle Wait","text":"<p>Configure how long the worker waits between checking for new tasks:</p> <pre><code># Via environment\nWORKER_IDLE_WAIT=5.0\n\n# Via code\nworker = Worker(idle_wait=5.0)\n</code></pre>"},{"location":"user-guide/worker-configuration/#best-practices","title":"Best Practices","text":"<ol> <li>Worker Names</li> <li>Use descriptive names that indicate the worker's purpose</li> <li>Include environment or region in the name if relevant</li> <li> <p>Example: <code>prod-us-east-analytics-worker</code></p> </li> <li> <p>Log Levels</p> </li> <li>Use <code>debug</code> during development</li> <li>Use <code>info</code> in production</li> <li> <p>Use <code>warning</code> or <code>error</code> for minimal logging</p> </li> <li> <p>Idle Wait</p> </li> <li>Lower values (1-5s) for time-sensitive tasks</li> <li>Higher values (10-30s) for background tasks</li> <li>Consider queue volume when setting this value</li> </ol>"},{"location":"user-guide/worker-configuration/#example-configurations","title":"Example Configurations","text":""},{"location":"user-guide/worker-configuration/#development-environment","title":"Development Environment","text":"<pre><code># .env\nWORKER_NAME=dev-worker\nWORKER_LOG_LEVEL=debug\nWORKER_IDLE_WAIT=5.0\n</code></pre>"},{"location":"user-guide/worker-configuration/#production-environment","title":"Production Environment","text":"<pre><code># .env\nWORKER_NAME=prod-analytics\nWORKER_LOG_LEVEL=info\nWORKER_IDLE_WAIT=10.0\n</code></pre>"},{"location":"user-guide/worker-configuration/#mixed-configuration","title":"Mixed Configuration","text":"<pre><code># .env\nWORKER_NAME=prod-worker\nWORKER_LOG_LEVEL=info\n\n# code\nworker = Worker(\n    name=os.getenv(\"WORKER_NAME\"),\n    log_level=os.getenv(\"WORKER_LOG_LEVEL\"),\n    idle_wait=5.0  # Override default and env\n)\n</code></pre>"},{"location":"user-guide/worker-configuration/#monitoring-and-debugging","title":"Monitoring and Debugging","text":"<ol> <li>Log Output</li> <li>All worker operations are logged according to log_level</li> <li> <p>Logs include worker name, timestamp, and operation details</p> </li> <li> <p>Performance Tuning</p> </li> <li>Monitor worker performance with different idle_wait values</li> <li> <p>Adjust based on queue volume and task processing time</p> </li> <li> <p>Multiple Workers</p> </li> <li>Use different names for each worker instance</li> <li>Configure log levels independently for focused debugging</li> </ol>"},{"location":"user-guide/writing-tasks/","title":"Writing Tasks","text":"<p>Tasks are the fundamental building blocks in AIMQ that define how to process and transform data. This guide will help you understand how to write effective tasks that can be composed into powerful AI workflows.</p>"},{"location":"user-guide/writing-tasks/#task-structure","title":"Task Structure","text":"<p>A task in AIMQ is typically composed of:</p> <ol> <li>Input definition</li> <li>Processing logic</li> <li>Output transformation</li> <li>Error handling</li> </ol>"},{"location":"user-guide/writing-tasks/#basic-task-example","title":"Basic Task Example","text":"<pre><code>from aimq.helpers import select, assign\nfrom langchain_core.runnables import RunnablePassthrough\n\ndef create_summarization_task():\n    \"\"\"Create a task that summarizes text content.\"\"\"\n    return (\n        # 1. Select input\n        select(\"content\")\n        # 2. Process with LLM\n        | summarize_with_llm\n        # 3. Format output\n        | assign({\n            \"summary\": RunnablePassthrough(),\n            \"metadata\": const({\n                \"task\": \"summarization\",\n                \"timestamp\": datetime.now().isoformat()\n            })\n        })\n    )\n</code></pre>"},{"location":"user-guide/writing-tasks/#task-composition","title":"Task Composition","text":"<p>Tasks can be composed together using the pipeline operator (<code>|</code>). AIMQ's helper functions make it easy to transform data between tasks.</p>"},{"location":"user-guide/writing-tasks/#example-multi-step-task","title":"Example: Multi-Step Task","text":"<pre><code>def create_analysis_pipeline():\n    \"\"\"Create a pipeline that summarizes and analyzes text.\"\"\"\n    return (\n        # Extract relevant content\n        select(\"text\")\n        # Summarize the text\n        | create_summarization_task()\n        # Analyze sentiment\n        | create_sentiment_task()\n        # Combine results\n        | assign({\n            \"summary\": pick(\"summary\"),\n            \"sentiment\": pick(\"sentiment\"),\n            \"metadata\": orig(\"metadata\")\n        })\n    )\n</code></pre>"},{"location":"user-guide/writing-tasks/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/writing-tasks/#1-input-validation","title":"1. Input Validation","text":"<p>Always validate your input data at the start of your task:</p> <pre><code>def validate_input(input_data):\n    if \"content\" not in input_data:\n        raise ValueError(\"Input must contain 'content' key\")\n    if not isinstance(input_data[\"content\"], str):\n        raise TypeError(\"Content must be a string\")\n</code></pre>"},{"location":"user-guide/writing-tasks/#2-error-handling","title":"2. Error Handling","text":"<p>Implement proper error handling to make debugging easier:</p> <pre><code>def create_robust_task():\n    return (\n        # Validate input\n        RunnableLambda(validate_input)\n        # Process data with error handling\n        | handle_errors(process_data)\n        # Format output\n        | format_output\n    )\n</code></pre>"},{"location":"user-guide/writing-tasks/#3-type-safety","title":"3. Type Safety","text":"<p>Use type hints and ensure type safety throughout your task:</p> <pre><code>from typing import TypedDict, Optional\n\nclass TaskInput(TypedDict):\n    content: str\n    metadata: Optional[dict]\n\nclass TaskOutput(TypedDict):\n    result: str\n    error: Optional[str]\n\ndef process_task(input_data: TaskInput) -&gt; TaskOutput:\n    ...\n</code></pre>"},{"location":"user-guide/writing-tasks/#4-documentation","title":"4. Documentation","text":"<p>Document your tasks thoroughly:</p> <pre><code>def create_classification_task():\n    \"\"\"Create a task for text classification.\n\n    This task processes input text and classifies it into predefined categories\n    using a specified classification model.\n\n    Returns:\n        A runnable pipeline that:\n        1. Validates input text\n        2. Preprocesses text for classification\n        3. Applies classification model\n        4. Formats results with confidence scores\n\n    Example:\n        ```python\n        classifier = create_classification_task()\n        result = classifier.invoke({\n            \"text\": \"Sample text to classify\",\n            \"categories\": [\"A\", \"B\", \"C\"]\n        })\n        ```\n    \"\"\"\n    ...\n</code></pre>"},{"location":"user-guide/writing-tasks/#testing-tasks","title":"Testing Tasks","text":""},{"location":"user-guide/writing-tasks/#1-unit-tests","title":"1. Unit Tests","text":"<p>Write unit tests for individual components:</p> <pre><code>def test_summarization_task():\n    task = create_summarization_task()\n    result = task.invoke({\"content\": \"Test content\"})\n\n    assert \"summary\" in result\n    assert isinstance(result[\"summary\"], str)\n</code></pre>"},{"location":"user-guide/writing-tasks/#2-integration-tests","title":"2. Integration Tests","text":"<p>Test task composition and data flow:</p> <pre><code>def test_analysis_pipeline():\n    pipeline = create_analysis_pipeline()\n    result = pipeline.invoke({\n        \"text\": \"Test content\",\n        \"metadata\": {\"source\": \"test\"}\n    })\n\n    assert \"summary\" in result\n    assert \"sentiment\" in result\n    assert result[\"metadata\"][\"source\"] == \"test\"\n</code></pre>"},{"location":"user-guide/writing-tasks/#common-patterns","title":"Common Patterns","text":""},{"location":"user-guide/writing-tasks/#1-data-transformation","title":"1. Data Transformation","text":"<p>Use helpers to transform data between tasks:</p> <pre><code># Transform output format\nresult = task | assign({\n    \"data\": pick(\"result\"),\n    \"metadata\": orig(\"metadata\")\n})\n</code></pre>"},{"location":"user-guide/writing-tasks/#2-conditional-processing","title":"2. Conditional Processing","text":"<p>Implement conditional logic in your tasks:</p> <pre><code>def conditional_process(input_data):\n    if input_data.get(\"skip_summary\"):\n        return select(\"content\")\n    return create_summarization_task()\n</code></pre>"},{"location":"user-guide/writing-tasks/#3-parallel-processing","title":"3. Parallel Processing","text":"<p>Run tasks in parallel when possible:</p> <pre><code>def parallel_analysis():\n    return RunnableParallel({\n        \"summary\": create_summarization_task(),\n        \"sentiment\": create_sentiment_task(),\n        \"categories\": create_classification_task()\n    })\n</code></pre>"},{"location":"user-guide/writing-tasks/#debugging-tasks","title":"Debugging Tasks","text":"<ol> <li>Use the <code>echo</code> helper to inspect data flow:</li> </ol> <pre><code>pipeline = (\n    select(\"content\")\n    | echo  # Print content\n    | process_data\n    | echo  # Print processed data\n)\n</code></pre> <ol> <li>Add logging for complex operations:</li> </ol> <p>```python def log_step(name):     def _log(data):         logger.debug(f\"Step {name}: {data}\")         return data     return RunnableLambda(_log)</p> <p>pipeline = (     select(\"content\")     | log_step(\"input\")     | process_data     | log_step(\"output\") )</p>"}]}
